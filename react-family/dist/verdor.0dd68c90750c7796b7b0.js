!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=50)}([function(e,t,n){e.exports=n(31)()},function(e,t,n){"use strict";e.exports=n(27)},function(e,t,n){"use strict";e.exports=function(e,t,n,r,o,i,a,u){if(!e){var l;if(void 0===t)l=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var c=[n,r,o,i,a,u],s=0;(l=new Error(t.replace(/%s/g,function(){return c[s++]}))).name="Invariant Violation"}throw l.framesToPop=1,l}}},function(e,t,n){"use strict";e.exports=function(){}},function(e,t,n){"use strict";var r=function(){};e.exports=r},function(e,t,n){"use strict";var r=n(3),o=n.n(r),i=n(2),a=n.n(i);function u(e){return"/"===e.charAt(0)}function l(e,t){for(var n=t,r=n+1,o=e.length;r<o;n+=1,r+=1)e[n]=e[r];e.pop()}var c=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",n=e&&e.split("/")||[],r=t&&t.split("/")||[],o=e&&u(e),i=t&&u(t),a=o||i;if(e&&u(e)?r=n:n.length&&(r.pop(),r=r.concat(n)),!r.length)return"/";var c=void 0;if(r.length){var s=r[r.length-1];c="."===s||".."===s||""===s}else c=!1;for(var f=0,p=r.length;p>=0;p--){var d=r[p];"."===d?l(r,p):".."===d?(l(r,p),f++):f&&(l(r,p),f--)}if(!a)for(;f--;f)r.unshift("..");!a||""===r[0]||r[0]&&u(r[0])||r.unshift("");var h=r.join("/");return c&&"/"!==h.substr(-1)&&(h+="/"),h},s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};var f=function e(t,n){if(t===n)return!0;if(null==t||null==n)return!1;if(Array.isArray(t))return Array.isArray(n)&&t.length===n.length&&t.every(function(t,r){return e(t,n[r])});var r=void 0===t?"undefined":s(t);if(r!==(void 0===n?"undefined":s(n)))return!1;if("object"===r){var o=t.valueOf(),i=n.valueOf();if(o!==t||i!==n)return e(o,i);var a=Object.keys(t),u=Object.keys(n);return a.length===u.length&&a.every(function(r){return e(t[r],n[r])})}return!1},p=function(e){return"/"===e.charAt(0)?e:"/"+e},d=function(e){return"/"===e.charAt(0)?e.substr(1):e},h=function(e,t){return new RegExp("^"+t+"(\\/|\\?|#|$)","i").test(e)},m=function(e,t){return h(e,t)?e.substr(t.length):e},y=function(e){return"/"===e.charAt(e.length-1)?e.slice(0,-1):e},v=function(e){var t=e.pathname,n=e.search,r=e.hash,o=t||"/";return n&&"?"!==n&&(o+="?"===n.charAt(0)?n:"?"+n),r&&"#"!==r&&(o+="#"===r.charAt(0)?r:"#"+r),o},g=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},b=function(e,t,n,r){var o=void 0;"string"==typeof e?(o=function(e){var t=e||"/",n="",r="",o=t.indexOf("#");-1!==o&&(r=t.substr(o),t=t.substr(0,o));var i=t.indexOf("?");return-1!==i&&(n=t.substr(i),t=t.substr(0,i)),{pathname:t,search:"?"===n?"":n,hash:"#"===r?"":r}}(e)).state=t:(void 0===(o=g({},e)).pathname&&(o.pathname=""),o.search?"?"!==o.search.charAt(0)&&(o.search="?"+o.search):o.search="",o.hash?"#"!==o.hash.charAt(0)&&(o.hash="#"+o.hash):o.hash="",void 0!==t&&void 0===o.state&&(o.state=t));try{o.pathname=decodeURI(o.pathname)}catch(e){throw e instanceof URIError?new URIError('Pathname "'+o.pathname+'" could not be decoded. This is likely caused by an invalid percent-encoding.'):e}return n&&(o.key=n),r?o.pathname?"/"!==o.pathname.charAt(0)&&(o.pathname=c(o.pathname,r.pathname)):o.pathname=r.pathname:o.pathname||(o.pathname="/"),o},w=function(e,t){return e.pathname===t.pathname&&e.search===t.search&&e.hash===t.hash&&e.key===t.key&&f(e.state,t.state)},x=function(){var e=null,t=[];return{setPrompt:function(t){return o()(null==e,"A history supports only one prompt at a time"),e=t,function(){e===t&&(e=null)}},confirmTransitionTo:function(t,n,r,i){if(null!=e){var a="function"==typeof e?e(t,n):e;"string"==typeof a?"function"==typeof r?r(a,i):(o()(!1,"A history needs a getUserConfirmation function in order to use a prompt message"),i(!0)):i(!1!==a)}else i(!0)},appendListener:function(e){var n=!0,r=function(){n&&e.apply(void 0,arguments)};return t.push(r),function(){n=!1,t=t.filter(function(e){return e!==r})}},notifyListeners:function(){for(var e=arguments.length,n=Array(e),r=0;r<e;r++)n[r]=arguments[r];t.forEach(function(e){return e.apply(void 0,n)})}}},k=!("undefined"==typeof window||!window.document||!window.document.createElement),T=function(e,t,n){return e.addEventListener?e.addEventListener(t,n,!1):e.attachEvent("on"+t,n)},E=function(e,t,n){return e.removeEventListener?e.removeEventListener(t,n,!1):e.detachEvent("on"+t,n)},S=function(e,t){return t(window.confirm(e))},P="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},C=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},_=function(){try{return window.history.state||{}}catch(e){return{}}},O=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};a()(k,"Browser history needs a DOM");var t,n=window.history,r=(-1===(t=window.navigator.userAgent).indexOf("Android 2.")&&-1===t.indexOf("Android 4.0")||-1===t.indexOf("Mobile Safari")||-1!==t.indexOf("Chrome")||-1!==t.indexOf("Windows Phone"))&&window.history&&"pushState"in window.history,i=!(-1===window.navigator.userAgent.indexOf("Trident")),u=e.forceRefresh,l=void 0!==u&&u,c=e.getUserConfirmation,s=void 0===c?S:c,f=e.keyLength,d=void 0===f?6:f,g=e.basename?y(p(e.basename)):"",w=function(e){var t=e||{},n=t.key,r=t.state,i=window.location,a=i.pathname+i.search+i.hash;return o()(!g||h(a,g),'You are attempting to use a basename on a page whose URL path does not begin with the basename. Expected path "'+a+'" to begin with "'+g+'".'),g&&(a=m(a,g)),b(a,r,n)},O=function(){return Math.random().toString(36).substr(2,d)},R=x(),j=function(e){C(B,e),B.length=n.length,R.notifyListeners(B.location,B.action)},N=function(e){(function(e){return void 0===e.state&&-1===navigator.userAgent.indexOf("CriOS")})(e)||I(w(e.state))},M=function(){I(w(_()))},A=!1,I=function(e){A?(A=!1,j()):R.confirmTransitionTo(e,"POP",s,function(t){t?j({action:"POP",location:e}):U(e)})},U=function(e){var t=B.location,n=L.indexOf(t.key);-1===n&&(n=0);var r=L.indexOf(e.key);-1===r&&(r=0);var o=n-r;o&&(A=!0,z(o))},D=w(_()),L=[D.key],F=function(e){return g+v(e)},z=function(e){n.go(e)},W=0,H=function(e){1===(W+=e)?(T(window,"popstate",N),i&&T(window,"hashchange",M)):0===W&&(E(window,"popstate",N),i&&E(window,"hashchange",M))},$=!1,B={length:n.length,action:"POP",location:D,createHref:F,push:function(e,t){o()(!("object"===(void 0===e?"undefined":P(e))&&void 0!==e.state&&void 0!==t),"You should avoid providing a 2nd state argument to push when the 1st argument is a location-like object that already has state; it is ignored");var i=b(e,t,O(),B.location);R.confirmTransitionTo(i,"PUSH",s,function(e){if(e){var t=F(i),a=i.key,u=i.state;if(r)if(n.pushState({key:a,state:u},null,t),l)window.location.href=t;else{var c=L.indexOf(B.location.key),s=L.slice(0,-1===c?0:c+1);s.push(i.key),L=s,j({action:"PUSH",location:i})}else o()(void 0===u,"Browser history cannot push state in browsers that do not support HTML5 history"),window.location.href=t}})},replace:function(e,t){o()(!("object"===(void 0===e?"undefined":P(e))&&void 0!==e.state&&void 0!==t),"You should avoid providing a 2nd state argument to replace when the 1st argument is a location-like object that already has state; it is ignored");var i=b(e,t,O(),B.location);R.confirmTransitionTo(i,"REPLACE",s,function(e){if(e){var t=F(i),a=i.key,u=i.state;if(r)if(n.replaceState({key:a,state:u},null,t),l)window.location.replace(t);else{var c=L.indexOf(B.location.key);-1!==c&&(L[c]=i.key),j({action:"REPLACE",location:i})}else o()(void 0===u,"Browser history cannot replace state in browsers that do not support HTML5 history"),window.location.replace(t)}})},go:z,goBack:function(){return z(-1)},goForward:function(){return z(1)},block:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0],t=R.setPrompt(e);return $||(H(1),$=!0),function(){return $&&($=!1,H(-1)),t()}},listen:function(e){var t=R.appendListener(e);return H(1),function(){H(-1),t()}}};return B},R=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},j={hashbang:{encodePath:function(e){return"!"===e.charAt(0)?e:"!/"+d(e)},decodePath:function(e){return"!"===e.charAt(0)?e.substr(1):e}},noslash:{encodePath:d,decodePath:p},slash:{encodePath:p,decodePath:p}},N=function(){var e=window.location.href,t=e.indexOf("#");return-1===t?"":e.substring(t+1)},M=function(e){var t=window.location.href.indexOf("#");window.location.replace(window.location.href.slice(0,t>=0?t:0)+"#"+e)},A=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};a()(k,"Hash history needs a DOM");var t=window.history,n=-1===window.navigator.userAgent.indexOf("Firefox"),r=e.getUserConfirmation,i=void 0===r?S:r,u=e.hashType,l=void 0===u?"slash":u,c=e.basename?y(p(e.basename)):"",s=j[l],f=s.encodePath,d=s.decodePath,g=function(){var e=d(N());return o()(!c||h(e,c),'You are attempting to use a basename on a page whose URL path does not begin with the basename. Expected path "'+e+'" to begin with "'+c+'".'),c&&(e=m(e,c)),b(e)},P=x(),C=function(e){R(q,e),q.length=t.length,P.notifyListeners(q.location,q.action)},_=!1,O=null,A=function(){var e=N(),t=f(e);if(e!==t)M(t);else{var n=g(),r=q.location;if(!_&&w(r,n))return;if(O===v(n))return;O=null,I(n)}},I=function(e){_?(_=!1,C()):P.confirmTransitionTo(e,"POP",i,function(t){t?C({action:"POP",location:e}):U(e)})},U=function(e){var t=q.location,n=z.lastIndexOf(v(t));-1===n&&(n=0);var r=z.lastIndexOf(v(e));-1===r&&(r=0);var o=n-r;o&&(_=!0,W(o))},D=N(),L=f(D);D!==L&&M(L);var F=g(),z=[v(F)],W=function(e){o()(n,"Hash history go(n) causes a full page reload in this browser"),t.go(e)},H=0,$=function(e){1===(H+=e)?T(window,"hashchange",A):0===H&&E(window,"hashchange",A)},B=!1,q={length:t.length,action:"POP",location:F,createHref:function(e){return"#"+f(c+v(e))},push:function(e,t){o()(void 0===t,"Hash history cannot push state; it is ignored");var n=b(e,void 0,void 0,q.location);P.confirmTransitionTo(n,"PUSH",i,function(e){if(e){var t=v(n),r=f(c+t);if(N()!==r){O=t,function(e){window.location.hash=e}(r);var i=z.lastIndexOf(v(q.location)),a=z.slice(0,-1===i?0:i+1);a.push(t),z=a,C({action:"PUSH",location:n})}else o()(!1,"Hash history cannot PUSH the same path; a new entry will not be added to the history stack"),C()}})},replace:function(e,t){o()(void 0===t,"Hash history cannot replace state; it is ignored");var n=b(e,void 0,void 0,q.location);P.confirmTransitionTo(n,"REPLACE",i,function(e){if(e){var t=v(n),r=f(c+t);N()!==r&&(O=t,M(r));var o=z.indexOf(v(q.location));-1!==o&&(z[o]=t),C({action:"REPLACE",location:n})}})},go:W,goBack:function(){return W(-1)},goForward:function(){return W(1)},block:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0],t=P.setPrompt(e);return B||($(1),B=!0),function(){return B&&(B=!1,$(-1)),t()}},listen:function(e){var t=P.appendListener(e);return $(1),function(){$(-1),t()}}};return q},I="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},U=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},D=function(e,t,n){return Math.min(Math.max(e,t),n)},L=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.getUserConfirmation,n=e.initialEntries,r=void 0===n?["/"]:n,i=e.initialIndex,a=void 0===i?0:i,u=e.keyLength,l=void 0===u?6:u,c=x(),s=function(e){U(y,e),y.length=y.entries.length,c.notifyListeners(y.location,y.action)},f=function(){return Math.random().toString(36).substr(2,l)},p=D(a,0,r.length-1),d=r.map(function(e){return b(e,void 0,"string"==typeof e?f():e.key||f())}),h=v,m=function(e){var n=D(y.index+e,0,y.entries.length-1),r=y.entries[n];c.confirmTransitionTo(r,"POP",t,function(e){e?s({action:"POP",location:r,index:n}):s()})},y={length:d.length,action:"POP",location:d[p],index:p,entries:d,createHref:h,push:function(e,n){o()(!("object"===(void 0===e?"undefined":I(e))&&void 0!==e.state&&void 0!==n),"You should avoid providing a 2nd state argument to push when the 1st argument is a location-like object that already has state; it is ignored");var r=b(e,n,f(),y.location);c.confirmTransitionTo(r,"PUSH",t,function(e){if(e){var t=y.index+1,n=y.entries.slice(0);n.length>t?n.splice(t,n.length-t,r):n.push(r),s({action:"PUSH",location:r,index:t,entries:n})}})},replace:function(e,n){o()(!("object"===(void 0===e?"undefined":I(e))&&void 0!==e.state&&void 0!==n),"You should avoid providing a 2nd state argument to replace when the 1st argument is a location-like object that already has state; it is ignored");var r=b(e,n,f(),y.location);c.confirmTransitionTo(r,"REPLACE",t,function(e){e&&(y.entries[y.index]=r,s({action:"REPLACE",location:r}))})},go:m,goBack:function(){return m(-1)},goForward:function(){return m(1)},canGo:function(e){var t=y.index+e;return t>=0&&t<y.entries.length},block:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0];return c.setPrompt(e)},listen:function(e){return c.appendListener(e)}};return y};n.d(t,"a",function(){return O}),n.d(t,"b",function(){return A}),n.d(t,"d",function(){return L}),n.d(t,"c",function(){return b}),n.d(t,"f",function(){return w}),n.d(t,"e",function(){return v})},,function(e,t,n){"use strict";var r=n(15),o=n.n(r),i={},a=0;t.a=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=arguments[2];"string"==typeof t&&(t={path:t});var r=t,u=r.path,l=r.exact,c=void 0!==l&&l,s=r.strict,f=void 0!==s&&s,p=r.sensitive;if(null==u)return n;var d=function(e,t){var n=""+t.end+t.strict+t.sensitive,r=i[n]||(i[n]={});if(r[e])return r[e];var u=[],l={re:o()(e,u,t),keys:u};return a<1e4&&(r[e]=l,a++),l}(u,{end:c,strict:f,sensitive:void 0!==p&&p}),h=d.re,m=d.keys,y=h.exec(e);if(!y)return null;var v=y[0],g=y.slice(1),b=e===v;return c&&!b?null:{path:u,url:"/"===u&&""===v?"/":v,isExact:b,params:m.reduce(function(e,t,n){return e[t.name]=g[n],e},{})}}},function(e,t,n){"use strict";n.r(t),n.d(t,"createStore",function(){return u}),n.d(t,"combineReducers",function(){return c}),n.d(t,"bindActionCreators",function(){return f}),n.d(t,"applyMiddleware",function(){return h}),n.d(t,"compose",function(){return d}),n.d(t,"__DO_NOT_USE__ActionTypes",function(){return i});var r=n(17),o=function(){return Math.random().toString(36).substring(7).split("").join(".")},i={INIT:"@@redux/INIT"+o(),REPLACE:"@@redux/REPLACE"+o(),PROBE_UNKNOWN_ACTION:function(){return"@@redux/PROBE_UNKNOWN_ACTION"+o()}};function a(e){if("object"!=typeof e||null===e)return!1;for(var t=e;null!==Object.getPrototypeOf(t);)t=Object.getPrototypeOf(t);return Object.getPrototypeOf(e)===t}function u(e,t,n){var o;if("function"==typeof t&&"function"==typeof n||"function"==typeof n&&"function"==typeof arguments[3])throw new Error("It looks like you are passing several store enhancers to createStore(). This is not supported. Instead, compose them together to a single function");if("function"==typeof t&&void 0===n&&(n=t,t=void 0),void 0!==n){if("function"!=typeof n)throw new Error("Expected the enhancer to be a function.");return n(u)(e,t)}if("function"!=typeof e)throw new Error("Expected the reducer to be a function.");var l=e,c=t,s=[],f=s,p=!1;function d(){f===s&&(f=s.slice())}function h(){if(p)throw new Error("You may not call store.getState() while the reducer is executing. The reducer has already received the state as an argument. Pass it down from the top reducer instead of reading it from the store.");return c}function m(e){if("function"!=typeof e)throw new Error("Expected the listener to be a function.");if(p)throw new Error("You may not call store.subscribe() while the reducer is executing. If you would like to be notified after the store has been updated, subscribe from a component and invoke store.getState() in the callback to access the latest state. See https://redux.js.org/api-reference/store#subscribe(listener) for more details.");var t=!0;return d(),f.push(e),function(){if(t){if(p)throw new Error("You may not unsubscribe from a store listener while the reducer is executing. See https://redux.js.org/api-reference/store#subscribe(listener) for more details.");t=!1,d();var n=f.indexOf(e);f.splice(n,1)}}}function y(e){if(!a(e))throw new Error("Actions must be plain objects. Use custom middleware for async actions.");if(void 0===e.type)throw new Error('Actions may not have an undefined "type" property. Have you misspelled a constant?');if(p)throw new Error("Reducers may not dispatch actions.");try{p=!0,c=l(c,e)}finally{p=!1}for(var t=s=f,n=0;n<t.length;n++){(0,t[n])()}return e}return y({type:i.INIT}),(o={dispatch:y,subscribe:m,getState:h,replaceReducer:function(e){if("function"!=typeof e)throw new Error("Expected the nextReducer to be a function.");l=e,y({type:i.REPLACE})}})[r.a]=function(){var e,t=m;return(e={subscribe:function(e){if("object"!=typeof e||null===e)throw new TypeError("Expected the observer to be an object.");function n(){e.next&&e.next(h())}return n(),{unsubscribe:t(n)}}})[r.a]=function(){return this},e},o}function l(e,t){var n=t&&t.type;return"Given "+(n&&'action "'+String(n)+'"'||"an action")+', reducer "'+e+'" returned undefined. To ignore an action, you must explicitly return the previous state. If you want this reducer to hold no value, you can return null instead of undefined.'}function c(e){for(var t=Object.keys(e),n={},r=0;r<t.length;r++){var o=t[r];0,"function"==typeof e[o]&&(n[o]=e[o])}var a,u=Object.keys(n);try{!function(e){Object.keys(e).forEach(function(t){var n=e[t];if(void 0===n(void 0,{type:i.INIT}))throw new Error('Reducer "'+t+"\" returned undefined during initialization. If the state passed to the reducer is undefined, you must explicitly return the initial state. The initial state may not be undefined. If you don't want to set a value for this reducer, you can use null instead of undefined.");if(void 0===n(void 0,{type:i.PROBE_UNKNOWN_ACTION()}))throw new Error('Reducer "'+t+"\" returned undefined when probed with a random type. Don't try to handle "+i.INIT+' or other actions in "redux/*" namespace. They are considered private. Instead, you must return the current state for any unknown actions, unless it is undefined, in which case you must return the initial state, regardless of the action type. The initial state may not be undefined, but can be null.')})}(n)}catch(e){a=e}return function(e,t){if(void 0===e&&(e={}),a)throw a;for(var r=!1,o={},i=0;i<u.length;i++){var c=u[i],s=n[c],f=e[c],p=s(f,t);if(void 0===p){var d=l(c,t);throw new Error(d)}o[c]=p,r=r||p!==f}return r?o:e}}function s(e,t){return function(){return t(e.apply(this,arguments))}}function f(e,t){if("function"==typeof e)return s(e,t);if("object"!=typeof e||null===e)throw new Error("bindActionCreators expected an object or a function, instead received "+(null===e?"null":typeof e)+'. Did you write "import ActionCreators from" instead of "import * as ActionCreators from"?');for(var n=Object.keys(e),r={},o=0;o<n.length;o++){var i=n[o],a=e[i];"function"==typeof a&&(r[i]=s(a,t))}return r}function p(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function d(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return 0===t.length?function(e){return e}:1===t.length?t[0]:t.reduce(function(e,t){return function(){return e(t.apply(void 0,arguments))}})}function h(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return function(e){return function(){var n=e.apply(void 0,arguments),r=function(){throw new Error("Dispatching while constructing your middleware is not allowed. Other middleware would not be applied to this dispatch.")},o={getState:n.getState,dispatch:function(){return r.apply(void 0,arguments)}},i=t.map(function(e){return e(o)});return function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter(function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),r.forEach(function(t){p(e,t,n[t])})}return e}({},n,{dispatch:r=d.apply(void 0,i)(n.dispatch)})}}}},function(e,t,n){"use strict";var r=n(1),o=n.n(r),i=n(0),a=n.n(i),u=n(2),l=n.n(u),c=n(5),s=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};function f(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var p=function(e){return!!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)},d=function(e){function t(){var n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,i=Array(o),a=0;a<o;a++)i[a]=arguments[a];return n=r=f(this,e.call.apply(e,[this].concat(i))),r.handleClick=function(e){if(r.props.onClick&&r.props.onClick(e),!e.defaultPrevented&&0===e.button&&!r.props.target&&!p(e)){e.preventDefault();var t=r.context.router.history,n=r.props,o=n.replace,i=n.to;o?t.replace(i):t.push(i)}},f(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.render=function(){var e=this.props,t=(e.replace,e.to),n=e.innerRef,r=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(e,["replace","to","innerRef"]);l()(this.context.router,"You should not use <Link> outside a <Router>"),l()(void 0!==t,'You must specify the "to" property');var i=this.context.router.history,a="string"==typeof t?Object(c.c)(t,null,null,i.location):t,u=i.createHref(a);return o.a.createElement("a",s({},r,{onClick:this.handleClick,href:u,ref:n}))},t}(o.a.Component);d.propTypes={onClick:a.a.func,target:a.a.string,replace:a.a.bool,to:a.a.oneOfType([a.a.string,a.a.object]).isRequired,innerRef:a.a.oneOfType([a.a.string,a.a.func])},d.defaultProps={replace:!1},d.contextTypes={router:a.a.shape({history:a.a.shape({push:a.a.func.isRequired,replace:a.a.func.isRequired,createHref:a.a.func.isRequired}).isRequired}).isRequired},t.a=d},function(e,t){e.exports=function(e){if(!e.webpackPolyfill){var t=Object.create(e);t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),Object.defineProperty(t,"exports",{enumerable:!0}),t.webpackPolyfill=1}return t}},function(e,t,n){"use strict";var r=n(12);t.a=r.a},function(e,t,n){"use strict";var r=n(4),o=n.n(r),i=n(2),a=n.n(i),u=n(1),l=n.n(u),c=n(0),s=n.n(c),f=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};function p(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var d=function(e){function t(){var n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,i=Array(o),a=0;a<o;a++)i[a]=arguments[a];return n=r=p(this,e.call.apply(e,[this].concat(i))),r.state={match:r.computeMatch(r.props.history.location.pathname)},p(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.getChildContext=function(){return{router:f({},this.context.router,{history:this.props.history,route:{location:this.props.history.location,match:this.state.match}})}},t.prototype.computeMatch=function(e){return{path:"/",url:"/",params:{},isExact:"/"===e}},t.prototype.componentWillMount=function(){var e=this,t=this.props,n=t.children,r=t.history;a()(null==n||1===l.a.Children.count(n),"A <Router> may have only one child element"),this.unlisten=r.listen(function(){e.setState({match:e.computeMatch(r.location.pathname)})})},t.prototype.componentWillReceiveProps=function(e){o()(this.props.history===e.history,"You cannot change <Router history>")},t.prototype.componentWillUnmount=function(){this.unlisten()},t.prototype.render=function(){var e=this.props.children;return e?l.a.Children.only(e):null},t}(l.a.Component);d.propTypes={history:s.a.object.isRequired,children:s.a.node},d.contextTypes={router:s.a.object},d.childContextTypes={router:s.a.object.isRequired},t.a=d},function(e,t,n){"use strict";var r=n(16);t.a=r.a},function(e,t,n){"use strict";e.exports=n(34)},function(e,t,n){var r=n(33);e.exports=d,e.exports.parse=i,e.exports.compile=function(e,t){return u(i(e,t))},e.exports.tokensToFunction=u,e.exports.tokensToRegExp=p;var o=new RegExp(["(\\\\.)","([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))"].join("|"),"g");function i(e,t){for(var n,r=[],i=0,a=0,u="",s=t&&t.delimiter||"/";null!=(n=o.exec(e));){var f=n[0],p=n[1],d=n.index;if(u+=e.slice(a,d),a=d+f.length,p)u+=p[1];else{var h=e[a],m=n[2],y=n[3],v=n[4],g=n[5],b=n[6],w=n[7];u&&(r.push(u),u="");var x=null!=m&&null!=h&&h!==m,k="+"===b||"*"===b,T="?"===b||"*"===b,E=n[2]||s,S=v||g;r.push({name:y||i++,prefix:m||"",delimiter:E,optional:T,repeat:k,partial:x,asterisk:!!w,pattern:S?c(S):w?".*":"[^"+l(E)+"]+?"})}}return a<e.length&&(u+=e.substr(a)),u&&r.push(u),r}function a(e){return encodeURI(e).replace(/[\/?#]/g,function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()})}function u(e){for(var t=new Array(e.length),n=0;n<e.length;n++)"object"==typeof e[n]&&(t[n]=new RegExp("^(?:"+e[n].pattern+")$"));return function(n,o){for(var i="",u=n||{},l=(o||{}).pretty?a:encodeURIComponent,c=0;c<e.length;c++){var s=e[c];if("string"!=typeof s){var f,p=u[s.name];if(null==p){if(s.optional){s.partial&&(i+=s.prefix);continue}throw new TypeError('Expected "'+s.name+'" to be defined')}if(r(p)){if(!s.repeat)throw new TypeError('Expected "'+s.name+'" to not repeat, but received `'+JSON.stringify(p)+"`");if(0===p.length){if(s.optional)continue;throw new TypeError('Expected "'+s.name+'" to not be empty')}for(var d=0;d<p.length;d++){if(f=l(p[d]),!t[c].test(f))throw new TypeError('Expected all "'+s.name+'" to match "'+s.pattern+'", but received `'+JSON.stringify(f)+"`");i+=(0===d?s.prefix:s.delimiter)+f}}else{if(f=s.asterisk?encodeURI(p).replace(/[?#]/g,function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()}):l(p),!t[c].test(f))throw new TypeError('Expected "'+s.name+'" to match "'+s.pattern+'", but received "'+f+'"');i+=s.prefix+f}}else i+=s}return i}}function l(e){return e.replace(/([.+*?=^!:${}()[\]|\/\\])/g,"\\$1")}function c(e){return e.replace(/([=!:$\/()])/g,"\\$1")}function s(e,t){return e.keys=t,e}function f(e){return e.sensitive?"":"i"}function p(e,t,n){r(t)||(n=t||n,t=[]);for(var o=(n=n||{}).strict,i=!1!==n.end,a="",u=0;u<e.length;u++){var c=e[u];if("string"==typeof c)a+=l(c);else{var p=l(c.prefix),d="(?:"+c.pattern+")";t.push(c),c.repeat&&(d+="(?:"+p+d+")*"),a+=d=c.optional?c.partial?p+"("+d+")?":"(?:"+p+"("+d+"))?":p+"("+d+")"}}var h=l(n.delimiter||"/"),m=a.slice(-h.length)===h;return o||(a=(m?a.slice(0,-h.length):a)+"(?:"+h+"(?=$))?"),a+=i?"$":o&&m?"":"(?="+h+"|$)",s(new RegExp("^"+a,f(n)),t)}function d(e,t,n){return r(t)||(n=t||n,t=[]),n=n||{},e instanceof RegExp?function(e,t){var n=e.source.match(/\((?!\?)/g);if(n)for(var r=0;r<n.length;r++)t.push({name:r,prefix:null,delimiter:null,optional:!1,repeat:!1,partial:!1,asterisk:!1,pattern:null});return s(e,t)}(e,t):r(e)?function(e,t,n){for(var r=[],o=0;o<e.length;o++)r.push(d(e[o],t,n).source);return s(new RegExp("(?:"+r.join("|")+")",f(n)),t)}(e,t,n):function(e,t,n){return p(i(e,n),t,n)}(e,t,n)}},function(e,t,n){"use strict";var r=n(4),o=n.n(r),i=n(2),a=n.n(i),u=n(1),l=n.n(u),c=n(0),s=n.n(c),f=n(7),p=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};function d(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var h=function(e){return 0===l.a.Children.count(e)},m=function(e){function t(){var n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,i=Array(o),a=0;a<o;a++)i[a]=arguments[a];return n=r=d(this,e.call.apply(e,[this].concat(i))),r.state={match:r.computeMatch(r.props,r.context.router)},d(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.getChildContext=function(){return{router:p({},this.context.router,{route:{location:this.props.location||this.context.router.route.location,match:this.state.match}})}},t.prototype.computeMatch=function(e,t){var n=e.computedMatch,r=e.location,o=e.path,i=e.strict,u=e.exact,l=e.sensitive;if(n)return n;a()(t,"You should not use <Route> or withRouter() outside a <Router>");var c=t.route,s=(r||c.location).pathname;return Object(f.a)(s,{path:o,strict:i,exact:u,sensitive:l},c.match)},t.prototype.componentWillMount=function(){o()(!(this.props.component&&this.props.render),"You should not use <Route component> and <Route render> in the same route; <Route render> will be ignored"),o()(!(this.props.component&&this.props.children&&!h(this.props.children)),"You should not use <Route component> and <Route children> in the same route; <Route children> will be ignored"),o()(!(this.props.render&&this.props.children&&!h(this.props.children)),"You should not use <Route render> and <Route children> in the same route; <Route children> will be ignored")},t.prototype.componentWillReceiveProps=function(e,t){o()(!(e.location&&!this.props.location),'<Route> elements should not change from uncontrolled to controlled (or vice versa). You initially used no "location" prop and then provided one on a subsequent render.'),o()(!(!e.location&&this.props.location),'<Route> elements should not change from controlled to uncontrolled (or vice versa). You provided a "location" prop initially but omitted it on a subsequent render.'),this.setState({match:this.computeMatch(e,t.router)})},t.prototype.render=function(){var e=this.state.match,t=this.props,n=t.children,r=t.component,o=t.render,i=this.context.router,a=i.history,u=i.route,c=i.staticContext,s={match:e,location:this.props.location||u.location,history:a,staticContext:c};return r?e?l.a.createElement(r,s):null:o?e?o(s):null:"function"==typeof n?n(s):n&&!h(n)?l.a.Children.only(n):null},t}(l.a.Component);m.propTypes={computedMatch:s.a.object,path:s.a.string,exact:s.a.bool,strict:s.a.bool,sensitive:s.a.bool,component:s.a.func,render:s.a.func,children:s.a.oneOfType([s.a.func,s.a.node]),location:s.a.object},m.contextTypes={router:s.a.shape({history:s.a.object.isRequired,route:s.a.object.isRequired,staticContext:s.a.object})},m.childContextTypes={router:s.a.object.isRequired},t.a=m},function(e,t,n){"use strict";(function(e,r){var o,i=n(21);o="undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==e?e:r;var a=Object(i.a)(o);t.a=a}).call(this,n(19),n(10)(e))},function(e,t,n){"use strict";var r=n(14),o={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},i={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},a={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},u={};function l(e){return r.isMemo(e)?a:u[e.$$typeof]||o}u[r.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0};var c=Object.defineProperty,s=Object.getOwnPropertyNames,f=Object.getOwnPropertySymbols,p=Object.getOwnPropertyDescriptor,d=Object.getPrototypeOf,h=Object.prototype;e.exports=function e(t,n,r){if("string"!=typeof n){if(h){var o=d(n);o&&o!==h&&e(t,o,r)}var a=s(n);f&&(a=a.concat(f(n)));for(var u=l(t),m=l(n),y=0;y<a.length;++y){var v=a[y];if(!(i[v]||r&&r[v]||m&&m[v]||u&&u[v])){var g=p(n,v);try{c(t,v,g)}catch(e){}}}return t}return t}},function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/var r=Object.getOwnPropertySymbols,o=Object.prototype.hasOwnProperty,i=Object.prototype.propertyIsEnumerable;e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map(function(e){return t[e]}).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach(function(e){r[e]=e}),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,t){for(var n,a,u=function(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}(e),l=1;l<arguments.length;l++){for(var c in n=Object(arguments[l]))o.call(n,c)&&(u[c]=n[c]);if(r){a=r(n);for(var s=0;s<a.length;s++)i.call(n,a[s])&&(u[a[s]]=n[a[s]])}}return u}},function(e,t,n){"use strict";function r(e){var t,n=e.Symbol;return"function"==typeof n?n.observable?t=n.observable:(t=n("observable"),n.observable=t):t="@@observable",t}n.d(t,"a",function(){return r})},function(e,t,n){"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(28)},function(e,t,n){"use strict";function r(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,e.__proto__=t}n.r(t);var o=n(1),i=n.n(o),a=n(0),u=n.n(a),l=i.a.createContext(null),c=function(e){function t(t){var n;n=e.call(this,t)||this;var r=t.store;return n.state={storeState:r.getState(),store:r},n}r(t,e);var n=t.prototype;return n.componentDidMount=function(){this._isMounted=!0,this.subscribe()},n.componentWillUnmount=function(){this.unsubscribe&&this.unsubscribe(),this._isMounted=!1},n.componentDidUpdate=function(e){this.props.store!==e.store&&(this.unsubscribe&&this.unsubscribe(),this.subscribe())},n.subscribe=function(){var e=this,t=this.props.store;this.unsubscribe=t.subscribe(function(){var n=t.getState();e._isMounted&&e.setState(function(e){return e.storeState===n?null:{storeState:n}})});var n=t.getState();n!==this.state.storeState&&this.setState({storeState:n})},n.render=function(){var e=this.props.context||l;return i.a.createElement(e.Provider,{value:this.state},this.props.children)},t}(o.Component);c.propTypes={store:u.a.shape({subscribe:u.a.func.isRequired,dispatch:u.a.func.isRequired,getState:u.a.func.isRequired}),context:u.a.object,children:u.a.any};var s=c;function f(){return(f=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function p(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}var d=n(18),h=n.n(d),m=n(2),y=n.n(m),v=n(14);function g(e,t){void 0===t&&(t={});var n=t,a=n.getDisplayName,u=void 0===a?function(e){return"ConnectAdvanced("+e+")"}:a,c=n.methodName,s=void 0===c?"connectAdvanced":c,d=n.renderCountProp,m=void 0===d?void 0:d,g=n.shouldHandleStateChanges,b=void 0===g||g,w=n.storeKey,x=void 0===w?"store":w,k=n.withRef,T=void 0!==k&&k,E=n.forwardRef,S=void 0!==E&&E,P=n.context,C=void 0===P?l:P,_=p(n,["getDisplayName","methodName","renderCountProp","shouldHandleStateChanges","storeKey","withRef","forwardRef","context"]);y()(void 0===m,"renderCountProp is removed. render counting is built into the latest React dev tools profiling extension"),y()(!T,"withRef is removed. To access the wrapped instance, use a ref on the connected component");var O="To use a custom Redux store for specific components,  create a custom React context with React.createContext(), and pass the context object to React Redux's Provider and specific components like:  <Provider context={MyContext}><ConnectedComponent context={MyContext} /></Provider>. You may also pass a {context : MyContext} option to connect";y()("store"===x,"storeKey has been removed and does not do anything. "+O);var R=C;return function(t){var n=t.displayName||t.name||"Component",a=u(n),l=f({},_,{getDisplayName:u,methodName:s,renderCountProp:m,shouldHandleStateChanges:b,storeKey:x,displayName:a,wrappedComponentName:n,WrappedComponent:t}),c=_.pure,p=o.Component;c&&(p=o.PureComponent);var d=function(n){function o(t){var r,o,a,u,l,s,p,d,h,m,v;return r=n.call(this,t)||this,y()(S?!t.wrapperProps[x]:!t[x],"Passing redux store in props has been removed and does not do anything. "+O),r.selectDerivedProps=function(t,n,r,i){if(c&&o===n&&a===t)return u;r===l&&s===i||(l=r,s=i,p=e(r.dispatch,i)),o=n,a=t;var f=p(t,n);return u=f},r.selectChildElement=function(e,t,n){return t===d&&n===h&&v===e||(d=t,h=n,v=e,m=i.a.createElement(e,f({},t,{ref:n}))),m},r.indirectRenderWrappedComponent=r.indirectRenderWrappedComponent.bind(function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(r)),r}r(o,n);var u=o.prototype;return u.indirectRenderWrappedComponent=function(e){return this.renderWrappedComponent(e)},u.renderWrappedComponent=function(e){y()(e,'Could not find "store" in the context of "'+a+'". Either wrap the root component in a <Provider>, or pass a custom React context provider to <Provider> and the corresponding React context consumer to '+a+" in connect options.");var n,r=e.storeState,o=e.store,i=this.props;S&&(i=this.props.wrapperProps,n=this.props.forwardedRef);var u=this.selectDerivedProps(r,i,o,l);return this.selectChildElement(t,u,n)},u.render=function(){var e=this.props.context&&this.props.context.Consumer&&Object(v.isContextConsumer)(i.a.createElement(this.props.context.Consumer,null))?this.props.context:R;return i.a.createElement(e.Consumer,null,this.indirectRenderWrappedComponent)},o}(p);if(d.WrappedComponent=t,d.displayName=a,S){var g=i.a.forwardRef(function(e,t){return i.a.createElement(d,{wrapperProps:e,forwardedRef:t})});return g.displayName=a,g.WrappedComponent=t,h()(g,t)}return h()(d,t)}}var b=Object.prototype.hasOwnProperty;function w(e,t){return e===t?0!==e||0!==t||1/e==1/t:e!=e&&t!=t}function x(e,t){if(w(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(var o=0;o<n.length;o++)if(!b.call(t,n[o])||!w(e[n[o]],t[n[o]]))return!1;return!0}var k=n(8);function T(e){return function(t,n){var r=e(t,n);function o(){return r}return o.dependsOnOwnProps=!1,o}}function E(e){return null!==e.dependsOnOwnProps&&void 0!==e.dependsOnOwnProps?Boolean(e.dependsOnOwnProps):1!==e.length}function S(e,t){return function(t,n){n.displayName;var r=function(e,t){return r.dependsOnOwnProps?r.mapToProps(e,t):r.mapToProps(e)};return r.dependsOnOwnProps=!0,r.mapToProps=function(t,n){r.mapToProps=e,r.dependsOnOwnProps=E(e);var o=r(t,n);return"function"==typeof o&&(r.mapToProps=o,r.dependsOnOwnProps=E(o),o=r(t,n)),o},r}}var P=[function(e){return"function"==typeof e?S(e):void 0},function(e){return e?void 0:T(function(e){return{dispatch:e}})},function(e){return e&&"object"==typeof e?T(function(t){return Object(k.bindActionCreators)(e,t)}):void 0}];var C=[function(e){return"function"==typeof e?S(e):void 0},function(e){return e?void 0:T(function(){return{}})}];function _(e,t,n){return f({},n,e,t)}var O=[function(e){return"function"==typeof e?function(e){return function(t,n){n.displayName;var r,o=n.pure,i=n.areMergedPropsEqual,a=!1;return function(t,n,u){var l=e(t,n,u);return a?o&&i(l,r)||(r=l):(a=!0,r=l),r}}}(e):void 0},function(e){return e?void 0:function(){return _}}];function R(e,t,n,r){return function(o,i){return n(e(o,i),t(r,i),i)}}function j(e,t,n,r,o){var i,a,u,l,c,s=o.areStatesEqual,f=o.areOwnPropsEqual,p=o.areStatePropsEqual,d=!1;function h(o,d){var h,m,y=!f(d,a),v=!s(o,i);return i=o,a=d,y&&v?(u=e(i,a),t.dependsOnOwnProps&&(l=t(r,a)),c=n(u,l,a)):y?(e.dependsOnOwnProps&&(u=e(i,a)),t.dependsOnOwnProps&&(l=t(r,a)),c=n(u,l,a)):v?(h=e(i,a),m=!p(h,u),u=h,m&&(c=n(u,l,a)),c):c}return function(o,s){return d?h(o,s):(u=e(i=o,a=s),l=t(r,a),c=n(u,l,a),d=!0,c)}}function N(e,t){var n=t.initMapStateToProps,r=t.initMapDispatchToProps,o=t.initMergeProps,i=p(t,["initMapStateToProps","initMapDispatchToProps","initMergeProps"]),a=n(e,i),u=r(e,i),l=o(e,i);return(i.pure?j:R)(a,u,l,e,i)}function M(e,t,n){for(var r=t.length-1;r>=0;r--){var o=t[r](e);if(o)return o}return function(t,r){throw new Error("Invalid value of type "+typeof e+" for "+n+" argument when connecting component "+r.wrappedComponentName+".")}}function A(e,t){return e===t}var I,U,D,L,F,z,W,H,$,B,q,V,Y=(D=(U=void 0===I?{}:I).connectHOC,L=void 0===D?g:D,F=U.mapStateToPropsFactories,z=void 0===F?C:F,W=U.mapDispatchToPropsFactories,H=void 0===W?P:W,$=U.mergePropsFactories,B=void 0===$?O:$,q=U.selectorFactory,V=void 0===q?N:q,function(e,t,n,r){void 0===r&&(r={});var o=r,i=o.pure,a=void 0===i||i,u=o.areStatesEqual,l=void 0===u?A:u,c=o.areOwnPropsEqual,s=void 0===c?x:c,d=o.areStatePropsEqual,h=void 0===d?x:d,m=o.areMergedPropsEqual,y=void 0===m?x:m,v=p(o,["pure","areStatesEqual","areOwnPropsEqual","areStatePropsEqual","areMergedPropsEqual"]),g=M(e,z,"mapStateToProps"),b=M(t,H,"mapDispatchToProps"),w=M(n,B,"mergeProps");return L(V,f({methodName:"connect",getDisplayName:function(e){return"Connect("+e+")"},shouldHandleStateChanges:Boolean(e),initMapStateToProps:g,initMapDispatchToProps:b,initMergeProps:w,pure:a,areStatesEqual:l,areOwnPropsEqual:s,areStatePropsEqual:h,areMergedPropsEqual:y},v))});n.d(t,"Provider",function(){return s}),n.d(t,"connectAdvanced",function(){return g}),n.d(t,"ReactReduxContext",function(){return l}),n.d(t,"connect",function(){return Y})},function(e,t,n){"use strict";var r=n(4),o=n.n(r),i=n(1),a=n.n(i),u=n(0),l=n.n(u),c=n(5),s=n(11);function f(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var p=function(e){function t(){var n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,i=Array(o),a=0;a<o;a++)i[a]=arguments[a];return n=r=f(this,e.call.apply(e,[this].concat(i))),r.history=Object(c.a)(r.props),f(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.componentWillMount=function(){o()(!this.props.history,"<BrowserRouter> ignores the history prop. To use a custom history, use `import { Router }` instead of `import { BrowserRouter as Router }`.")},t.prototype.render=function(){return a.a.createElement(s.a,{history:this.history,children:this.props.children})},t}(a.a.Component);p.propTypes={basename:l.a.string,forceRefresh:l.a.bool,getUserConfirmation:l.a.func,keyLength:l.a.number,children:l.a.node},t.a=p},function(e,t,n){"use strict";var r=n(1),o=n.n(r),i=n(0),a=n.n(i),u=n(4),l=n.n(u),c=n(2),s=n.n(c),f=n(7);var p=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,e.apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.componentWillMount=function(){s()(this.context.router,"You should not use <Switch> outside a <Router>")},t.prototype.componentWillReceiveProps=function(e){l()(!(e.location&&!this.props.location),'<Switch> elements should not change from uncontrolled to controlled (or vice versa). You initially used no "location" prop and then provided one on a subsequent render.'),l()(!(!e.location&&this.props.location),'<Switch> elements should not change from controlled to uncontrolled (or vice versa). You provided a "location" prop initially but omitted it on a subsequent render.')},t.prototype.render=function(){var e=this.context.router.route,t=this.props.children,n=this.props.location||e.location,r=void 0,i=void 0;return o.a.Children.forEach(t,function(t){if(null==r&&o.a.isValidElement(t)){var a=t.props,u=a.path,l=a.exact,c=a.strict,s=a.sensitive,p=a.from,d=u||p;i=t,r=Object(f.a)(n.pathname,{path:d,exact:l,strict:c,sensitive:s},e.match)}}),r?o.a.cloneElement(i,{location:n,computedMatch:r}):null},t}(o.a.Component);p.contextTypes={router:a.a.shape({route:a.a.object.isRequired}).isRequired},p.propTypes={children:a.a.node,location:a.a.object};var d=p;t.a=d},,function(e,t,n){"use strict";
/** @license React v16.8.4
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(20),o="function"==typeof Symbol&&Symbol.for,i=o?Symbol.for("react.element"):60103,a=o?Symbol.for("react.portal"):60106,u=o?Symbol.for("react.fragment"):60107,l=o?Symbol.for("react.strict_mode"):60108,c=o?Symbol.for("react.profiler"):60114,s=o?Symbol.for("react.provider"):60109,f=o?Symbol.for("react.context"):60110,p=o?Symbol.for("react.concurrent_mode"):60111,d=o?Symbol.for("react.forward_ref"):60112,h=o?Symbol.for("react.suspense"):60113,m=o?Symbol.for("react.memo"):60115,y=o?Symbol.for("react.lazy"):60116,v="function"==typeof Symbol&&Symbol.iterator;function g(e){for(var t=arguments.length-1,n="https://reactjs.org/docs/error-decoder.html?invariant="+e,r=0;r<t;r++)n+="&args[]="+encodeURIComponent(arguments[r+1]);!function(e,t,n,r,o,i,a,u){if(!e){if(e=void 0,void 0===t)e=Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var l=[n,r,o,i,a,u],c=0;(e=Error(t.replace(/%s/g,function(){return l[c++]}))).name="Invariant Violation"}throw e.framesToPop=1,e}}(!1,"Minified React error #"+e+"; visit %s for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ",n)}var b={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},w={};function x(e,t,n){this.props=e,this.context=t,this.refs=w,this.updater=n||b}function k(){}function T(e,t,n){this.props=e,this.context=t,this.refs=w,this.updater=n||b}x.prototype.isReactComponent={},x.prototype.setState=function(e,t){"object"!=typeof e&&"function"!=typeof e&&null!=e&&g("85"),this.updater.enqueueSetState(this,e,t,"setState")},x.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},k.prototype=x.prototype;var E=T.prototype=new k;E.constructor=T,r(E,x.prototype),E.isPureReactComponent=!0;var S={current:null},P={current:null},C=Object.prototype.hasOwnProperty,_={key:!0,ref:!0,__self:!0,__source:!0};function O(e,t,n){var r=void 0,o={},a=null,u=null;if(null!=t)for(r in void 0!==t.ref&&(u=t.ref),void 0!==t.key&&(a=""+t.key),t)C.call(t,r)&&!_.hasOwnProperty(r)&&(o[r]=t[r]);var l=arguments.length-2;if(1===l)o.children=n;else if(1<l){for(var c=Array(l),s=0;s<l;s++)c[s]=arguments[s+2];o.children=c}if(e&&e.defaultProps)for(r in l=e.defaultProps)void 0===o[r]&&(o[r]=l[r]);return{$$typeof:i,type:e,key:a,ref:u,props:o,_owner:P.current}}function R(e){return"object"==typeof e&&null!==e&&e.$$typeof===i}var j=/\/+/g,N=[];function M(e,t,n,r){if(N.length){var o=N.pop();return o.result=e,o.keyPrefix=t,o.func=n,o.context=r,o.count=0,o}return{result:e,keyPrefix:t,func:n,context:r,count:0}}function A(e){e.result=null,e.keyPrefix=null,e.func=null,e.context=null,e.count=0,10>N.length&&N.push(e)}function I(e,t,n){return null==e?0:function e(t,n,r,o){var u=typeof t;"undefined"!==u&&"boolean"!==u||(t=null);var l=!1;if(null===t)l=!0;else switch(u){case"string":case"number":l=!0;break;case"object":switch(t.$$typeof){case i:case a:l=!0}}if(l)return r(o,t,""===n?"."+U(t,0):n),1;if(l=0,n=""===n?".":n+":",Array.isArray(t))for(var c=0;c<t.length;c++){var s=n+U(u=t[c],c);l+=e(u,s,r,o)}else if(s=null===t||"object"!=typeof t?null:"function"==typeof(s=v&&t[v]||t["@@iterator"])?s:null,"function"==typeof s)for(t=s.call(t),c=0;!(u=t.next()).done;)l+=e(u=u.value,s=n+U(u,c++),r,o);else"object"===u&&g("31","[object Object]"==(r=""+t)?"object with keys {"+Object.keys(t).join(", ")+"}":r,"");return l}(e,"",t,n)}function U(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+(""+e).replace(/[=:]/g,function(e){return t[e]})}(e.key):t.toString(36)}function D(e,t){e.func.call(e.context,t,e.count++)}function L(e,t,n){var r=e.result,o=e.keyPrefix;e=e.func.call(e.context,t,e.count++),Array.isArray(e)?F(e,r,n,function(e){return e}):null!=e&&(R(e)&&(e=function(e,t){return{$$typeof:i,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(e,o+(!e.key||t&&t.key===e.key?"":(""+e.key).replace(j,"$&/")+"/")+n)),r.push(e))}function F(e,t,n,r,o){var i="";null!=n&&(i=(""+n).replace(j,"$&/")+"/"),I(e,L,t=M(t,i,r,o)),A(t)}function z(){var e=S.current;return null===e&&g("307"),e}var W={Children:{map:function(e,t,n){if(null==e)return e;var r=[];return F(e,r,null,t,n),r},forEach:function(e,t,n){if(null==e)return e;I(e,D,t=M(null,null,t,n)),A(t)},count:function(e){return I(e,function(){return null},null)},toArray:function(e){var t=[];return F(e,t,null,function(e){return e}),t},only:function(e){return R(e)||g("143"),e}},createRef:function(){return{current:null}},Component:x,PureComponent:T,createContext:function(e,t){return void 0===t&&(t=null),(e={$$typeof:f,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:s,_context:e},e.Consumer=e},forwardRef:function(e){return{$$typeof:d,render:e}},lazy:function(e){return{$$typeof:y,_ctor:e,_status:-1,_result:null}},memo:function(e,t){return{$$typeof:m,type:e,compare:void 0===t?null:t}},useCallback:function(e,t){return z().useCallback(e,t)},useContext:function(e,t){return z().useContext(e,t)},useEffect:function(e,t){return z().useEffect(e,t)},useImperativeHandle:function(e,t,n){return z().useImperativeHandle(e,t,n)},useDebugValue:function(){},useLayoutEffect:function(e,t){return z().useLayoutEffect(e,t)},useMemo:function(e,t){return z().useMemo(e,t)},useReducer:function(e,t,n){return z().useReducer(e,t,n)},useRef:function(e){return z().useRef(e)},useState:function(e){return z().useState(e)},Fragment:u,StrictMode:l,Suspense:h,createElement:O,cloneElement:function(e,t,n){null==e&&g("267",e);var o=void 0,a=r({},e.props),u=e.key,l=e.ref,c=e._owner;if(null!=t){void 0!==t.ref&&(l=t.ref,c=P.current),void 0!==t.key&&(u=""+t.key);var s=void 0;for(o in e.type&&e.type.defaultProps&&(s=e.type.defaultProps),t)C.call(t,o)&&!_.hasOwnProperty(o)&&(a[o]=void 0===t[o]&&void 0!==s?s[o]:t[o])}if(1===(o=arguments.length-2))a.children=n;else if(1<o){s=Array(o);for(var f=0;f<o;f++)s[f]=arguments[f+2];a.children=s}return{$$typeof:i,type:e.type,key:u,ref:l,props:a,_owner:c}},createFactory:function(e){var t=O.bind(null,e);return t.type=e,t},isValidElement:R,version:"16.8.4",unstable_ConcurrentMode:p,unstable_Profiler:c,__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{ReactCurrentDispatcher:S,ReactCurrentOwner:P,assign:r}},H={default:W},$=H&&W||H;e.exports=$.default||$},function(e,t,n){"use strict";
/** @license React v16.8.4
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(1),o=n(20),i=n(29);function a(e){for(var t=arguments.length-1,n="https://reactjs.org/docs/error-decoder.html?invariant="+e,r=0;r<t;r++)n+="&args[]="+encodeURIComponent(arguments[r+1]);!function(e,t,n,r,o,i,a,u){if(!e){if(e=void 0,void 0===t)e=Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var l=[n,r,o,i,a,u],c=0;(e=Error(t.replace(/%s/g,function(){return l[c++]}))).name="Invariant Violation"}throw e.framesToPop=1,e}}(!1,"Minified React error #"+e+"; visit %s for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ",n)}r||a("227");var u=!1,l=null,c=!1,s=null,f={onError:function(e){u=!0,l=e}};function p(e,t,n,r,o,i,a,c,s){u=!1,l=null,function(e,t,n,r,o,i,a,u,l){var c=Array.prototype.slice.call(arguments,3);try{t.apply(n,c)}catch(e){this.onError(e)}}.apply(f,arguments)}var d=null,h={};function m(){if(d)for(var e in h){var t=h[e],n=d.indexOf(e);if(-1<n||a("96",e),!v[n])for(var r in t.extractEvents||a("97",e),v[n]=t,n=t.eventTypes){var o=void 0,i=n[r],u=t,l=r;g.hasOwnProperty(l)&&a("99",l),g[l]=i;var c=i.phasedRegistrationNames;if(c){for(o in c)c.hasOwnProperty(o)&&y(c[o],u,l);o=!0}else i.registrationName?(y(i.registrationName,u,l),o=!0):o=!1;o||a("98",r,e)}}}function y(e,t,n){b[e]&&a("100",e),b[e]=t,w[e]=t.eventTypes[n].dependencies}var v=[],g={},b={},w={},x=null,k=null,T=null;function E(e,t,n){var r=e.type||"unknown-event";e.currentTarget=T(n),function(e,t,n,r,o,i,f,d,h){if(p.apply(this,arguments),u){if(u){var m=l;u=!1,l=null}else a("198"),m=void 0;c||(c=!0,s=m)}}(r,t,void 0,e),e.currentTarget=null}function S(e,t){return null==t&&a("30"),null==e?t:Array.isArray(e)?Array.isArray(t)?(e.push.apply(e,t),e):(e.push(t),e):Array.isArray(t)?[e].concat(t):[e,t]}function P(e,t,n){Array.isArray(e)?e.forEach(t,n):e&&t.call(n,e)}var C=null;function _(e){if(e){var t=e._dispatchListeners,n=e._dispatchInstances;if(Array.isArray(t))for(var r=0;r<t.length&&!e.isPropagationStopped();r++)E(e,t[r],n[r]);else t&&E(e,t,n);e._dispatchListeners=null,e._dispatchInstances=null,e.isPersistent()||e.constructor.release(e)}}var O={injectEventPluginOrder:function(e){d&&a("101"),d=Array.prototype.slice.call(e),m()},injectEventPluginsByName:function(e){var t,n=!1;for(t in e)if(e.hasOwnProperty(t)){var r=e[t];h.hasOwnProperty(t)&&h[t]===r||(h[t]&&a("102",t),h[t]=r,n=!0)}n&&m()}};function R(e,t){var n=e.stateNode;if(!n)return null;var r=x(n);if(!r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}return e?null:(n&&"function"!=typeof n&&a("231",t,typeof n),n)}function j(e){if(null!==e&&(C=S(C,e)),e=C,C=null,e&&(P(e,_),C&&a("95"),c))throw e=s,c=!1,s=null,e}var N=Math.random().toString(36).slice(2),M="__reactInternalInstance$"+N,A="__reactEventHandlers$"+N;function I(e){if(e[M])return e[M];for(;!e[M];){if(!e.parentNode)return null;e=e.parentNode}return 5===(e=e[M]).tag||6===e.tag?e:null}function U(e){return!(e=e[M])||5!==e.tag&&6!==e.tag?null:e}function D(e){if(5===e.tag||6===e.tag)return e.stateNode;a("33")}function L(e){return e[A]||null}function F(e){do{e=e.return}while(e&&5!==e.tag);return e||null}function z(e,t,n){(t=R(e,n.dispatchConfig.phasedRegistrationNames[t]))&&(n._dispatchListeners=S(n._dispatchListeners,t),n._dispatchInstances=S(n._dispatchInstances,e))}function W(e){if(e&&e.dispatchConfig.phasedRegistrationNames){for(var t=e._targetInst,n=[];t;)n.push(t),t=F(t);for(t=n.length;0<t--;)z(n[t],"captured",e);for(t=0;t<n.length;t++)z(n[t],"bubbled",e)}}function H(e,t,n){e&&n&&n.dispatchConfig.registrationName&&(t=R(e,n.dispatchConfig.registrationName))&&(n._dispatchListeners=S(n._dispatchListeners,t),n._dispatchInstances=S(n._dispatchInstances,e))}function $(e){e&&e.dispatchConfig.registrationName&&H(e._targetInst,null,e)}function B(e){P(e,W)}var q=!("undefined"==typeof window||!window.document||!window.document.createElement);function V(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var Y={animationend:V("Animation","AnimationEnd"),animationiteration:V("Animation","AnimationIteration"),animationstart:V("Animation","AnimationStart"),transitionend:V("Transition","TransitionEnd")},Q={},K={};function X(e){if(Q[e])return Q[e];if(!Y[e])return e;var t,n=Y[e];for(t in n)if(n.hasOwnProperty(t)&&t in K)return Q[e]=n[t];return e}q&&(K=document.createElement("div").style,"AnimationEvent"in window||(delete Y.animationend.animation,delete Y.animationiteration.animation,delete Y.animationstart.animation),"TransitionEvent"in window||delete Y.transitionend.transition);var G=X("animationend"),J=X("animationiteration"),Z=X("animationstart"),ee=X("transitionend"),te="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),ne=null,re=null,oe=null;function ie(){if(oe)return oe;var e,t,n=re,r=n.length,o="value"in ne?ne.value:ne.textContent,i=o.length;for(e=0;e<r&&n[e]===o[e];e++);var a=r-e;for(t=1;t<=a&&n[r-t]===o[i-t];t++);return oe=o.slice(e,1<t?1-t:void 0)}function ae(){return!0}function ue(){return!1}function le(e,t,n,r){for(var o in this.dispatchConfig=e,this._targetInst=t,this.nativeEvent=n,e=this.constructor.Interface)e.hasOwnProperty(o)&&((t=e[o])?this[o]=t(n):"target"===o?this.target=r:this[o]=n[o]);return this.isDefaultPrevented=(null!=n.defaultPrevented?n.defaultPrevented:!1===n.returnValue)?ae:ue,this.isPropagationStopped=ue,this}function ce(e,t,n,r){if(this.eventPool.length){var o=this.eventPool.pop();return this.call(o,e,t,n,r),o}return new this(e,t,n,r)}function se(e){e instanceof this||a("279"),e.destructor(),10>this.eventPool.length&&this.eventPool.push(e)}function fe(e){e.eventPool=[],e.getPooled=ce,e.release=se}o(le.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=ae)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=ae)},persist:function(){this.isPersistent=ae},isPersistent:ue,destructor:function(){var e,t=this.constructor.Interface;for(e in t)this[e]=null;this.nativeEvent=this._targetInst=this.dispatchConfig=null,this.isPropagationStopped=this.isDefaultPrevented=ue,this._dispatchInstances=this._dispatchListeners=null}}),le.Interface={type:null,target:null,currentTarget:function(){return null},eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null},le.extend=function(e){function t(){}function n(){return r.apply(this,arguments)}var r=this;t.prototype=r.prototype;var i=new t;return o(i,n.prototype),n.prototype=i,n.prototype.constructor=n,n.Interface=o({},r.Interface,e),n.extend=r.extend,fe(n),n},fe(le);var pe=le.extend({data:null}),de=le.extend({data:null}),he=[9,13,27,32],me=q&&"CompositionEvent"in window,ye=null;q&&"documentMode"in document&&(ye=document.documentMode);var ve=q&&"TextEvent"in window&&!ye,ge=q&&(!me||ye&&8<ye&&11>=ye),be=String.fromCharCode(32),we={beforeInput:{phasedRegistrationNames:{bubbled:"onBeforeInput",captured:"onBeforeInputCapture"},dependencies:["compositionend","keypress","textInput","paste"]},compositionEnd:{phasedRegistrationNames:{bubbled:"onCompositionEnd",captured:"onCompositionEndCapture"},dependencies:"blur compositionend keydown keypress keyup mousedown".split(" ")},compositionStart:{phasedRegistrationNames:{bubbled:"onCompositionStart",captured:"onCompositionStartCapture"},dependencies:"blur compositionstart keydown keypress keyup mousedown".split(" ")},compositionUpdate:{phasedRegistrationNames:{bubbled:"onCompositionUpdate",captured:"onCompositionUpdateCapture"},dependencies:"blur compositionupdate keydown keypress keyup mousedown".split(" ")}},xe=!1;function ke(e,t){switch(e){case"keyup":return-1!==he.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"blur":return!0;default:return!1}}function Te(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Ee=!1;var Se={eventTypes:we,extractEvents:function(e,t,n,r){var o=void 0,i=void 0;if(me)e:{switch(e){case"compositionstart":o=we.compositionStart;break e;case"compositionend":o=we.compositionEnd;break e;case"compositionupdate":o=we.compositionUpdate;break e}o=void 0}else Ee?ke(e,n)&&(o=we.compositionEnd):"keydown"===e&&229===n.keyCode&&(o=we.compositionStart);return o?(ge&&"ko"!==n.locale&&(Ee||o!==we.compositionStart?o===we.compositionEnd&&Ee&&(i=ie()):(re="value"in(ne=r)?ne.value:ne.textContent,Ee=!0)),o=pe.getPooled(o,t,n,r),i?o.data=i:null!==(i=Te(n))&&(o.data=i),B(o),i=o):i=null,(e=ve?function(e,t){switch(e){case"compositionend":return Te(t);case"keypress":return 32!==t.which?null:(xe=!0,be);case"textInput":return(e=t.data)===be&&xe?null:e;default:return null}}(e,n):function(e,t){if(Ee)return"compositionend"===e||!me&&ke(e,t)?(e=ie(),oe=re=ne=null,Ee=!1,e):null;switch(e){case"paste":return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return ge&&"ko"!==t.locale?null:t.data;default:return null}}(e,n))?((t=de.getPooled(we.beforeInput,t,n,r)).data=e,B(t)):t=null,null===i?t:null===t?i:[i,t]}},Pe=null,Ce=null,_e=null;function Oe(e){if(e=k(e)){"function"!=typeof Pe&&a("280");var t=x(e.stateNode);Pe(e.stateNode,e.type,t)}}function Re(e){Ce?_e?_e.push(e):_e=[e]:Ce=e}function je(){if(Ce){var e=Ce,t=_e;if(_e=Ce=null,Oe(e),t)for(e=0;e<t.length;e++)Oe(t[e])}}function Ne(e,t){return e(t)}function Me(e,t,n){return e(t,n)}function Ae(){}var Ie=!1;function Ue(e,t){if(Ie)return e(t);Ie=!0;try{return Ne(e,t)}finally{Ie=!1,(null!==Ce||null!==_e)&&(Ae(),je())}}var De={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Le(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!De[e.type]:"textarea"===t}function Fe(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}function ze(e){if(!q)return!1;var t=(e="on"+e)in document;return t||((t=document.createElement("div")).setAttribute(e,"return;"),t="function"==typeof t[e]),t}function We(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function He(e){e._valueTracker||(e._valueTracker=function(e){var t=We(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var o=n.get,i=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return o.call(this)},set:function(e){r=""+e,i.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function $e(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=We(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}var Be=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;Be.hasOwnProperty("ReactCurrentDispatcher")||(Be.ReactCurrentDispatcher={current:null});var qe=/^(.*)[\\\/]/,Ve="function"==typeof Symbol&&Symbol.for,Ye=Ve?Symbol.for("react.element"):60103,Qe=Ve?Symbol.for("react.portal"):60106,Ke=Ve?Symbol.for("react.fragment"):60107,Xe=Ve?Symbol.for("react.strict_mode"):60108,Ge=Ve?Symbol.for("react.profiler"):60114,Je=Ve?Symbol.for("react.provider"):60109,Ze=Ve?Symbol.for("react.context"):60110,et=Ve?Symbol.for("react.concurrent_mode"):60111,tt=Ve?Symbol.for("react.forward_ref"):60112,nt=Ve?Symbol.for("react.suspense"):60113,rt=Ve?Symbol.for("react.memo"):60115,ot=Ve?Symbol.for("react.lazy"):60116,it="function"==typeof Symbol&&Symbol.iterator;function at(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=it&&e[it]||e["@@iterator"])?e:null}function ut(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case et:return"ConcurrentMode";case Ke:return"Fragment";case Qe:return"Portal";case Ge:return"Profiler";case Xe:return"StrictMode";case nt:return"Suspense"}if("object"==typeof e)switch(e.$$typeof){case Ze:return"Context.Consumer";case Je:return"Context.Provider";case tt:var t=e.render;return t=t.displayName||t.name||"",e.displayName||(""!==t?"ForwardRef("+t+")":"ForwardRef");case rt:return ut(e.type);case ot:if(e=1===e._status?e._result:null)return ut(e)}return null}function lt(e){var t="";do{e:switch(e.tag){case 3:case 4:case 6:case 7:case 10:case 9:var n="";break e;default:var r=e._debugOwner,o=e._debugSource,i=ut(e.type);n=null,r&&(n=ut(r.type)),r=i,i="",o?i=" (at "+o.fileName.replace(qe,"")+":"+o.lineNumber+")":n&&(i=" (created by "+n+")"),n="\n    in "+(r||"Unknown")+i}t+=n,e=e.return}while(e);return t}var ct=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,st=Object.prototype.hasOwnProperty,ft={},pt={};function dt(e,t,n,r,o){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=o,this.mustUseProperty=n,this.propertyName=e,this.type=t}var ht={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(e){ht[e]=new dt(e,0,!1,e,null)}),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach(function(e){var t=e[0];ht[t]=new dt(t,1,!1,e[1],null)}),["contentEditable","draggable","spellCheck","value"].forEach(function(e){ht[e]=new dt(e,2,!1,e.toLowerCase(),null)}),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach(function(e){ht[e]=new dt(e,2,!1,e,null)}),"allowFullScreen async autoFocus autoPlay controls default defer disabled formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(e){ht[e]=new dt(e,3,!1,e.toLowerCase(),null)}),["checked","multiple","muted","selected"].forEach(function(e){ht[e]=new dt(e,3,!0,e,null)}),["capture","download"].forEach(function(e){ht[e]=new dt(e,4,!1,e,null)}),["cols","rows","size","span"].forEach(function(e){ht[e]=new dt(e,6,!1,e,null)}),["rowSpan","start"].forEach(function(e){ht[e]=new dt(e,5,!1,e.toLowerCase(),null)});var mt=/[\-:]([a-z])/g;function yt(e){return e[1].toUpperCase()}function vt(e,t,n,r){var o=ht.hasOwnProperty(t)?ht[t]:null;(null!==o?0===o.type:!r&&(2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1])))||(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,o,r)&&(n=null),r||null===o?function(e){return!!st.call(pt,e)||!st.call(ft,e)&&(ct.test(e)?pt[e]=!0:(ft[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):o.mustUseProperty?e[o.propertyName]=null===n?3!==o.type&&"":n:(t=o.attributeName,r=o.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(o=o.type)||4===o&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}function gt(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}function bt(e,t){var n=t.checked;return o({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function wt(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=gt(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function xt(e,t){null!=(t=t.checked)&&vt(e,"checked",t,!1)}function kt(e,t){xt(e,t);var n=gt(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?Et(e,t.type,n):t.hasOwnProperty("defaultValue")&&Et(e,t.type,gt(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function Tt(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!e.defaultChecked,e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function Et(e,t,n){"number"===t&&e.ownerDocument.activeElement===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(e){var t=e.replace(mt,yt);ht[t]=new dt(t,1,!1,e,null)}),"xlink:actuate xlink:arcrole xlink:href xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(e){var t=e.replace(mt,yt);ht[t]=new dt(t,1,!1,e,"http://www.w3.org/1999/xlink")}),["xml:base","xml:lang","xml:space"].forEach(function(e){var t=e.replace(mt,yt);ht[t]=new dt(t,1,!1,e,"http://www.w3.org/XML/1998/namespace")}),["tabIndex","crossOrigin"].forEach(function(e){ht[e]=new dt(e,1,!1,e.toLowerCase(),null)});var St={change:{phasedRegistrationNames:{bubbled:"onChange",captured:"onChangeCapture"},dependencies:"blur change click focus input keydown keyup selectionchange".split(" ")}};function Pt(e,t,n){return(e=le.getPooled(St.change,e,t,n)).type="change",Re(n),B(e),e}var Ct=null,_t=null;function Ot(e){j(e)}function Rt(e){if($e(D(e)))return e}function jt(e,t){if("change"===e)return t}var Nt=!1;function Mt(){Ct&&(Ct.detachEvent("onpropertychange",At),_t=Ct=null)}function At(e){"value"===e.propertyName&&Rt(_t)&&Ue(Ot,e=Pt(_t,e,Fe(e)))}function It(e,t,n){"focus"===e?(Mt(),_t=n,(Ct=t).attachEvent("onpropertychange",At)):"blur"===e&&Mt()}function Ut(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Rt(_t)}function Dt(e,t){if("click"===e)return Rt(t)}function Lt(e,t){if("input"===e||"change"===e)return Rt(t)}q&&(Nt=ze("input")&&(!document.documentMode||9<document.documentMode));var Ft={eventTypes:St,_isInputEventSupported:Nt,extractEvents:function(e,t,n,r){var o=t?D(t):window,i=void 0,a=void 0,u=o.nodeName&&o.nodeName.toLowerCase();if("select"===u||"input"===u&&"file"===o.type?i=jt:Le(o)?Nt?i=Lt:(i=Ut,a=It):(u=o.nodeName)&&"input"===u.toLowerCase()&&("checkbox"===o.type||"radio"===o.type)&&(i=Dt),i&&(i=i(e,t)))return Pt(i,n,r);a&&a(e,o,t),"blur"===e&&(e=o._wrapperState)&&e.controlled&&"number"===o.type&&Et(o,"number",o.value)}},zt=le.extend({view:null,detail:null}),Wt={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Ht(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=Wt[e])&&!!t[e]}function $t(){return Ht}var Bt=0,qt=0,Vt=!1,Yt=!1,Qt=zt.extend({screenX:null,screenY:null,clientX:null,clientY:null,pageX:null,pageY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:$t,button:null,buttons:null,relatedTarget:function(e){return e.relatedTarget||(e.fromElement===e.srcElement?e.toElement:e.fromElement)},movementX:function(e){if("movementX"in e)return e.movementX;var t=Bt;return Bt=e.screenX,Vt?"mousemove"===e.type?e.screenX-t:0:(Vt=!0,0)},movementY:function(e){if("movementY"in e)return e.movementY;var t=qt;return qt=e.screenY,Yt?"mousemove"===e.type?e.screenY-t:0:(Yt=!0,0)}}),Kt=Qt.extend({pointerId:null,width:null,height:null,pressure:null,tangentialPressure:null,tiltX:null,tiltY:null,twist:null,pointerType:null,isPrimary:null}),Xt={mouseEnter:{registrationName:"onMouseEnter",dependencies:["mouseout","mouseover"]},mouseLeave:{registrationName:"onMouseLeave",dependencies:["mouseout","mouseover"]},pointerEnter:{registrationName:"onPointerEnter",dependencies:["pointerout","pointerover"]},pointerLeave:{registrationName:"onPointerLeave",dependencies:["pointerout","pointerover"]}},Gt={eventTypes:Xt,extractEvents:function(e,t,n,r){var o="mouseover"===e||"pointerover"===e,i="mouseout"===e||"pointerout"===e;if(o&&(n.relatedTarget||n.fromElement)||!i&&!o)return null;if(o=r.window===r?r:(o=r.ownerDocument)?o.defaultView||o.parentWindow:window,i?(i=t,t=(t=n.relatedTarget||n.toElement)?I(t):null):i=null,i===t)return null;var a=void 0,u=void 0,l=void 0,c=void 0;"mouseout"===e||"mouseover"===e?(a=Qt,u=Xt.mouseLeave,l=Xt.mouseEnter,c="mouse"):"pointerout"!==e&&"pointerover"!==e||(a=Kt,u=Xt.pointerLeave,l=Xt.pointerEnter,c="pointer");var s=null==i?o:D(i);if(o=null==t?o:D(t),(e=a.getPooled(u,i,n,r)).type=c+"leave",e.target=s,e.relatedTarget=o,(n=a.getPooled(l,t,n,r)).type=c+"enter",n.target=o,n.relatedTarget=s,r=t,i&&r)e:{for(o=r,c=0,a=t=i;a;a=F(a))c++;for(a=0,l=o;l;l=F(l))a++;for(;0<c-a;)t=F(t),c--;for(;0<a-c;)o=F(o),a--;for(;c--;){if(t===o||t===o.alternate)break e;t=F(t),o=F(o)}t=null}else t=null;for(o=t,t=[];i&&i!==o&&(null===(c=i.alternate)||c!==o);)t.push(i),i=F(i);for(i=[];r&&r!==o&&(null===(c=r.alternate)||c!==o);)i.push(r),r=F(r);for(r=0;r<t.length;r++)H(t[r],"bubbled",e);for(r=i.length;0<r--;)H(i[r],"captured",n);return[e,n]}};function Jt(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t}var Zt=Object.prototype.hasOwnProperty;function en(e,t){if(Jt(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++)if(!Zt.call(t,n[r])||!Jt(e[n[r]],t[n[r]]))return!1;return!0}function tn(e){var t=e;if(e.alternate)for(;t.return;)t=t.return;else{if(0!=(2&t.effectTag))return 1;for(;t.return;)if(0!=(2&(t=t.return).effectTag))return 1}return 3===t.tag?2:3}function nn(e){2!==tn(e)&&a("188")}function rn(e){if(!(e=function(e){var t=e.alternate;if(!t)return 3===(t=tn(e))&&a("188"),1===t?null:e;for(var n=e,r=t;;){var o=n.return,i=o?o.alternate:null;if(!o||!i)break;if(o.child===i.child){for(var u=o.child;u;){if(u===n)return nn(o),e;if(u===r)return nn(o),t;u=u.sibling}a("188")}if(n.return!==r.return)n=o,r=i;else{u=!1;for(var l=o.child;l;){if(l===n){u=!0,n=o,r=i;break}if(l===r){u=!0,r=o,n=i;break}l=l.sibling}if(!u){for(l=i.child;l;){if(l===n){u=!0,n=i,r=o;break}if(l===r){u=!0,r=i,n=o;break}l=l.sibling}u||a("189")}}n.alternate!==r&&a("190")}return 3!==n.tag&&a("188"),n.stateNode.current===n?e:t}(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}var on=le.extend({animationName:null,elapsedTime:null,pseudoElement:null}),an=le.extend({clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),un=zt.extend({relatedTarget:null});function ln(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}var cn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},sn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},fn=zt.extend({key:function(e){if(e.key){var t=cn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=ln(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?sn[e.keyCode]||"Unidentified":""},location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:$t,charCode:function(e){return"keypress"===e.type?ln(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?ln(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),pn=Qt.extend({dataTransfer:null}),dn=zt.extend({touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:$t}),hn=le.extend({propertyName:null,elapsedTime:null,pseudoElement:null}),mn=Qt.extend({deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:null,deltaMode:null}),yn=[["abort","abort"],[G,"animationEnd"],[J,"animationIteration"],[Z,"animationStart"],["canplay","canPlay"],["canplaythrough","canPlayThrough"],["drag","drag"],["dragenter","dragEnter"],["dragexit","dragExit"],["dragleave","dragLeave"],["dragover","dragOver"],["durationchange","durationChange"],["emptied","emptied"],["encrypted","encrypted"],["ended","ended"],["error","error"],["gotpointercapture","gotPointerCapture"],["load","load"],["loadeddata","loadedData"],["loadedmetadata","loadedMetadata"],["loadstart","loadStart"],["lostpointercapture","lostPointerCapture"],["mousemove","mouseMove"],["mouseout","mouseOut"],["mouseover","mouseOver"],["playing","playing"],["pointermove","pointerMove"],["pointerout","pointerOut"],["pointerover","pointerOver"],["progress","progress"],["scroll","scroll"],["seeking","seeking"],["stalled","stalled"],["suspend","suspend"],["timeupdate","timeUpdate"],["toggle","toggle"],["touchmove","touchMove"],[ee,"transitionEnd"],["waiting","waiting"],["wheel","wheel"]],vn={},gn={};function bn(e,t){var n=e[0],r="on"+((e=e[1])[0].toUpperCase()+e.slice(1));t={phasedRegistrationNames:{bubbled:r,captured:r+"Capture"},dependencies:[n],isInteractive:t},vn[e]=t,gn[n]=t}[["blur","blur"],["cancel","cancel"],["click","click"],["close","close"],["contextmenu","contextMenu"],["copy","copy"],["cut","cut"],["auxclick","auxClick"],["dblclick","doubleClick"],["dragend","dragEnd"],["dragstart","dragStart"],["drop","drop"],["focus","focus"],["input","input"],["invalid","invalid"],["keydown","keyDown"],["keypress","keyPress"],["keyup","keyUp"],["mousedown","mouseDown"],["mouseup","mouseUp"],["paste","paste"],["pause","pause"],["play","play"],["pointercancel","pointerCancel"],["pointerdown","pointerDown"],["pointerup","pointerUp"],["ratechange","rateChange"],["reset","reset"],["seeked","seeked"],["submit","submit"],["touchcancel","touchCancel"],["touchend","touchEnd"],["touchstart","touchStart"],["volumechange","volumeChange"]].forEach(function(e){bn(e,!0)}),yn.forEach(function(e){bn(e,!1)});var wn={eventTypes:vn,isInteractiveTopLevelEventType:function(e){return void 0!==(e=gn[e])&&!0===e.isInteractive},extractEvents:function(e,t,n,r){var o=gn[e];if(!o)return null;switch(e){case"keypress":if(0===ln(n))return null;case"keydown":case"keyup":e=fn;break;case"blur":case"focus":e=un;break;case"click":if(2===n.button)return null;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":e=Qt;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":e=pn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":e=dn;break;case G:case J:case Z:e=on;break;case ee:e=hn;break;case"scroll":e=zt;break;case"wheel":e=mn;break;case"copy":case"cut":case"paste":e=an;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":e=Kt;break;default:e=le}return B(t=e.getPooled(o,t,n,r)),t}},xn=wn.isInteractiveTopLevelEventType,kn=[];function Tn(e){var t=e.targetInst,n=t;do{if(!n){e.ancestors.push(n);break}var r;for(r=n;r.return;)r=r.return;if(!(r=3!==r.tag?null:r.stateNode.containerInfo))break;e.ancestors.push(n),n=I(r)}while(n);for(n=0;n<e.ancestors.length;n++){t=e.ancestors[n];var o=Fe(e.nativeEvent);r=e.topLevelType;for(var i=e.nativeEvent,a=null,u=0;u<v.length;u++){var l=v[u];l&&(l=l.extractEvents(r,t,i,o))&&(a=S(a,l))}j(a)}}var En=!0;function Sn(e,t){if(!t)return null;var n=(xn(e)?Cn:_n).bind(null,e);t.addEventListener(e,n,!1)}function Pn(e,t){if(!t)return null;var n=(xn(e)?Cn:_n).bind(null,e);t.addEventListener(e,n,!0)}function Cn(e,t){Me(_n,e,t)}function _n(e,t){if(En){var n=Fe(t);if(null===(n=I(n))||"number"!=typeof n.tag||2===tn(n)||(n=null),kn.length){var r=kn.pop();r.topLevelType=e,r.nativeEvent=t,r.targetInst=n,e=r}else e={topLevelType:e,nativeEvent:t,targetInst:n,ancestors:[]};try{Ue(Tn,e)}finally{e.topLevelType=null,e.nativeEvent=null,e.targetInst=null,e.ancestors.length=0,10>kn.length&&kn.push(e)}}}var On={},Rn=0,jn="_reactListenersID"+(""+Math.random()).slice(2);function Nn(e){return Object.prototype.hasOwnProperty.call(e,jn)||(e[jn]=Rn++,On[e[jn]]={}),On[e[jn]]}function Mn(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function An(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function In(e,t){var n,r=An(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=An(r)}}function Un(){for(var e=window,t=Mn();t instanceof e.HTMLIFrameElement;){try{e=t.contentDocument.defaultView}catch(e){break}t=Mn(e.document)}return t}function Dn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}function Ln(e){var t=Un(),n=e.focusedElem,r=e.selectionRange;if(t!==n&&n&&n.ownerDocument&&function e(t,n){return!(!t||!n)&&(t===n||(!t||3!==t.nodeType)&&(n&&3===n.nodeType?e(t,n.parentNode):"contains"in t?t.contains(n):!!t.compareDocumentPosition&&!!(16&t.compareDocumentPosition(n))))}(n.ownerDocument.documentElement,n)){if(null!==r&&Dn(n))if(t=r.start,void 0===(e=r.end)&&(e=t),"selectionStart"in n)n.selectionStart=t,n.selectionEnd=Math.min(e,n.value.length);else if((e=(t=n.ownerDocument||document)&&t.defaultView||window).getSelection){e=e.getSelection();var o=n.textContent.length,i=Math.min(r.start,o);r=void 0===r.end?i:Math.min(r.end,o),!e.extend&&i>r&&(o=r,r=i,i=o),o=In(n,i);var a=In(n,r);o&&a&&(1!==e.rangeCount||e.anchorNode!==o.node||e.anchorOffset!==o.offset||e.focusNode!==a.node||e.focusOffset!==a.offset)&&((t=t.createRange()).setStart(o.node,o.offset),e.removeAllRanges(),i>r?(e.addRange(t),e.extend(a.node,a.offset)):(t.setEnd(a.node,a.offset),e.addRange(t)))}for(t=[],e=n;e=e.parentNode;)1===e.nodeType&&t.push({element:e,left:e.scrollLeft,top:e.scrollTop});for("function"==typeof n.focus&&n.focus(),n=0;n<t.length;n++)(e=t[n]).element.scrollLeft=e.left,e.element.scrollTop=e.top}}var Fn=q&&"documentMode"in document&&11>=document.documentMode,zn={select:{phasedRegistrationNames:{bubbled:"onSelect",captured:"onSelectCapture"},dependencies:"blur contextmenu dragend focus keydown keyup mousedown mouseup selectionchange".split(" ")}},Wn=null,Hn=null,$n=null,Bn=!1;function qn(e,t){var n=t.window===t?t.document:9===t.nodeType?t:t.ownerDocument;return Bn||null==Wn||Wn!==Mn(n)?null:("selectionStart"in(n=Wn)&&Dn(n)?n={start:n.selectionStart,end:n.selectionEnd}:n={anchorNode:(n=(n.ownerDocument&&n.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:n.anchorOffset,focusNode:n.focusNode,focusOffset:n.focusOffset},$n&&en($n,n)?null:($n=n,(e=le.getPooled(zn.select,Hn,e,t)).type="select",e.target=Wn,B(e),e))}var Vn={eventTypes:zn,extractEvents:function(e,t,n,r){var o,i=r.window===r?r.document:9===r.nodeType?r:r.ownerDocument;if(!(o=!i)){e:{i=Nn(i),o=w.onSelect;for(var a=0;a<o.length;a++){var u=o[a];if(!i.hasOwnProperty(u)||!i[u]){i=!1;break e}}i=!0}o=!i}if(o)return null;switch(i=t?D(t):window,e){case"focus":(Le(i)||"true"===i.contentEditable)&&(Wn=i,Hn=t,$n=null);break;case"blur":$n=Hn=Wn=null;break;case"mousedown":Bn=!0;break;case"contextmenu":case"mouseup":case"dragend":return Bn=!1,qn(n,r);case"selectionchange":if(Fn)break;case"keydown":case"keyup":return qn(n,r)}return null}};function Yn(e,t){return e=o({children:void 0},t),(t=function(e){var t="";return r.Children.forEach(e,function(e){null!=e&&(t+=e)}),t}(t.children))&&(e.children=t),e}function Qn(e,t,n,r){if(e=e.options,t){t={};for(var o=0;o<n.length;o++)t["$"+n[o]]=!0;for(n=0;n<e.length;n++)o=t.hasOwnProperty("$"+e[n].value),e[n].selected!==o&&(e[n].selected=o),o&&r&&(e[n].defaultSelected=!0)}else{for(n=""+gt(n),t=null,o=0;o<e.length;o++){if(e[o].value===n)return e[o].selected=!0,void(r&&(e[o].defaultSelected=!0));null!==t||e[o].disabled||(t=e[o])}null!==t&&(t.selected=!0)}}function Kn(e,t){return null!=t.dangerouslySetInnerHTML&&a("91"),o({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function Xn(e,t){var n=t.value;null==n&&(n=t.defaultValue,null!=(t=t.children)&&(null!=n&&a("92"),Array.isArray(t)&&(1>=t.length||a("93"),t=t[0]),n=t),null==n&&(n="")),e._wrapperState={initialValue:gt(n)}}function Gn(e,t){var n=gt(t.value),r=gt(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function Jn(e){var t=e.textContent;t===e._wrapperState.initialValue&&(e.value=t)}O.injectEventPluginOrder("ResponderEventPlugin SimpleEventPlugin EnterLeaveEventPlugin ChangeEventPlugin SelectEventPlugin BeforeInputEventPlugin".split(" ")),x=L,k=U,T=D,O.injectEventPluginsByName({SimpleEventPlugin:wn,EnterLeaveEventPlugin:Gt,ChangeEventPlugin:Ft,SelectEventPlugin:Vn,BeforeInputEventPlugin:Se});var Zn={html:"http://www.w3.org/1999/xhtml",mathml:"http://www.w3.org/1998/Math/MathML",svg:"http://www.w3.org/2000/svg"};function er(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function tr(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?er(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var nr,rr=void 0,or=(nr=function(e,t){if(e.namespaceURI!==Zn.svg||"innerHTML"in e)e.innerHTML=t;else{for((rr=rr||document.createElement("div")).innerHTML="<svg>"+t+"</svg>",t=rr.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,r){MSApp.execUnsafeLocalFunction(function(){return nr(e,t)})}:nr);function ir(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var ar={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},ur=["Webkit","ms","Moz","O"];function lr(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||ar.hasOwnProperty(e)&&ar[e]?(""+t).trim():t+"px"}function cr(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),o=lr(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,o):e[n]=o}}Object.keys(ar).forEach(function(e){ur.forEach(function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),ar[t]=ar[e]})});var sr=o({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function fr(e,t){t&&(sr[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML)&&a("137",e,""),null!=t.dangerouslySetInnerHTML&&(null!=t.children&&a("60"),"object"==typeof t.dangerouslySetInnerHTML&&"__html"in t.dangerouslySetInnerHTML||a("61")),null!=t.style&&"object"!=typeof t.style&&a("62",""))}function pr(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}function dr(e,t){var n=Nn(e=9===e.nodeType||11===e.nodeType?e:e.ownerDocument);t=w[t];for(var r=0;r<t.length;r++){var o=t[r];if(!n.hasOwnProperty(o)||!n[o]){switch(o){case"scroll":Pn("scroll",e);break;case"focus":case"blur":Pn("focus",e),Pn("blur",e),n.blur=!0,n.focus=!0;break;case"cancel":case"close":ze(o)&&Pn(o,e);break;case"invalid":case"submit":case"reset":break;default:-1===te.indexOf(o)&&Sn(o,e)}n[o]=!0}}}function hr(){}var mr=null,yr=null;function vr(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}function gr(e,t){return"textarea"===e||"option"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var br="function"==typeof setTimeout?setTimeout:void 0,wr="function"==typeof clearTimeout?clearTimeout:void 0,xr=i.unstable_scheduleCallback,kr=i.unstable_cancelCallback;function Tr(e){for(e=e.nextSibling;e&&1!==e.nodeType&&3!==e.nodeType;)e=e.nextSibling;return e}function Er(e){for(e=e.firstChild;e&&1!==e.nodeType&&3!==e.nodeType;)e=e.nextSibling;return e}new Set;var Sr=[],Pr=-1;function Cr(e){0>Pr||(e.current=Sr[Pr],Sr[Pr]=null,Pr--)}function _r(e,t){Sr[++Pr]=e.current,e.current=t}var Or={},Rr={current:Or},jr={current:!1},Nr=Or;function Mr(e,t){var n=e.type.contextTypes;if(!n)return Or;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var o,i={};for(o in n)i[o]=t[o];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=i),i}function Ar(e){return null!=(e=e.childContextTypes)}function Ir(e){Cr(jr),Cr(Rr)}function Ur(e){Cr(jr),Cr(Rr)}function Dr(e,t,n){Rr.current!==Or&&a("168"),_r(Rr,t),_r(jr,n)}function Lr(e,t,n){var r=e.stateNode;if(e=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var i in r=r.getChildContext())i in e||a("108",ut(t)||"Unknown",i);return o({},n,r)}function Fr(e){var t=e.stateNode;return t=t&&t.__reactInternalMemoizedMergedChildContext||Or,Nr=Rr.current,_r(Rr,t),_r(jr,jr.current),!0}function zr(e,t,n){var r=e.stateNode;r||a("169"),n?(t=Lr(e,t,Nr),r.__reactInternalMemoizedMergedChildContext=t,Cr(jr),Cr(Rr),_r(Rr,t)):Cr(jr),_r(jr,n)}var Wr=null,Hr=null;function $r(e){return function(t){try{return e(t)}catch(e){}}}function Br(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.contextDependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.effectTag=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childExpirationTime=this.expirationTime=0,this.alternate=null}function qr(e,t,n,r){return new Br(e,t,n,r)}function Vr(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Yr(e,t){var n=e.alternate;return null===n?((n=qr(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.effectTag=0,n.nextEffect=null,n.firstEffect=null,n.lastEffect=null),n.childExpirationTime=e.childExpirationTime,n.expirationTime=e.expirationTime,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,n.contextDependencies=e.contextDependencies,n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Qr(e,t,n,r,o,i){var u=2;if(r=e,"function"==typeof e)Vr(e)&&(u=1);else if("string"==typeof e)u=5;else e:switch(e){case Ke:return Kr(n.children,o,i,t);case et:return Xr(n,3|o,i,t);case Xe:return Xr(n,2|o,i,t);case Ge:return(e=qr(12,n,t,4|o)).elementType=Ge,e.type=Ge,e.expirationTime=i,e;case nt:return(e=qr(13,n,t,o)).elementType=nt,e.type=nt,e.expirationTime=i,e;default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case Je:u=10;break e;case Ze:u=9;break e;case tt:u=11;break e;case rt:u=14;break e;case ot:u=16,r=null;break e}a("130",null==e?e:typeof e,"")}return(t=qr(u,n,t,o)).elementType=e,t.type=r,t.expirationTime=i,t}function Kr(e,t,n,r){return(e=qr(7,e,r,t)).expirationTime=n,e}function Xr(e,t,n,r){return e=qr(8,e,r,t),t=0==(1&t)?Xe:et,e.elementType=t,e.type=t,e.expirationTime=n,e}function Gr(e,t,n){return(e=qr(6,e,null,t)).expirationTime=n,e}function Jr(e,t,n){return(t=qr(4,null!==e.children?e.children:[],e.key,t)).expirationTime=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Zr(e,t){e.didError=!1;var n=e.earliestPendingTime;0===n?e.earliestPendingTime=e.latestPendingTime=t:n<t?e.earliestPendingTime=t:e.latestPendingTime>t&&(e.latestPendingTime=t),no(t,e)}function eo(e,t){e.didError=!1,e.latestPingedTime>=t&&(e.latestPingedTime=0);var n=e.earliestPendingTime,r=e.latestPendingTime;n===t?e.earliestPendingTime=r===t?e.latestPendingTime=0:r:r===t&&(e.latestPendingTime=n),n=e.earliestSuspendedTime,r=e.latestSuspendedTime,0===n?e.earliestSuspendedTime=e.latestSuspendedTime=t:n<t?e.earliestSuspendedTime=t:r>t&&(e.latestSuspendedTime=t),no(t,e)}function to(e,t){var n=e.earliestPendingTime;return n>t&&(t=n),(e=e.earliestSuspendedTime)>t&&(t=e),t}function no(e,t){var n=t.earliestSuspendedTime,r=t.latestSuspendedTime,o=t.earliestPendingTime,i=t.latestPingedTime;0===(o=0!==o?o:i)&&(0===e||r<e)&&(o=r),0!==(e=o)&&n>e&&(e=n),t.nextExpirationTimeToWorkOn=o,t.expirationTime=e}function ro(e,t){if(e&&e.defaultProps)for(var n in t=o({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}var oo=(new r.Component).refs;function io(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:o({},t,n),e.memoizedState=n,null!==(r=e.updateQueue)&&0===e.expirationTime&&(r.baseState=n)}var ao={isMounted:function(e){return!!(e=e._reactInternalFiber)&&2===tn(e)},enqueueSetState:function(e,t,n){e=e._reactInternalFiber;var r=ku(),o=Xi(r=Ka(r,e));o.payload=t,null!=n&&(o.callback=n),$a(),Ji(e,o),Ja(e,r)},enqueueReplaceState:function(e,t,n){e=e._reactInternalFiber;var r=ku(),o=Xi(r=Ka(r,e));o.tag=Bi,o.payload=t,null!=n&&(o.callback=n),$a(),Ji(e,o),Ja(e,r)},enqueueForceUpdate:function(e,t){e=e._reactInternalFiber;var n=ku(),r=Xi(n=Ka(n,e));r.tag=qi,null!=t&&(r.callback=t),$a(),Ji(e,r),Ja(e,n)}};function uo(e,t,n,r,o,i,a){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,i,a):!t.prototype||!t.prototype.isPureReactComponent||(!en(n,r)||!en(o,i))}function lo(e,t,n){var r=!1,o=Or,i=t.contextType;return"object"==typeof i&&null!==i?i=Hi(i):(o=Ar(t)?Nr:Rr.current,i=(r=null!=(r=t.contextTypes))?Mr(e,o):Or),t=new t(n,i),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=ao,e.stateNode=t,t._reactInternalFiber=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=o,e.__reactInternalMemoizedMaskedChildContext=i),t}function co(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&ao.enqueueReplaceState(t,t.state,null)}function so(e,t,n,r){var o=e.stateNode;o.props=n,o.state=e.memoizedState,o.refs=oo;var i=t.contextType;"object"==typeof i&&null!==i?o.context=Hi(i):(i=Ar(t)?Nr:Rr.current,o.context=Mr(e,i)),null!==(i=e.updateQueue)&&(na(e,i,n,o,r),o.state=e.memoizedState),"function"==typeof(i=t.getDerivedStateFromProps)&&(io(e,t,i,n),o.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof o.getSnapshotBeforeUpdate||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||(t=o.state,"function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount(),t!==o.state&&ao.enqueueReplaceState(o,o.state,null),null!==(i=e.updateQueue)&&(na(e,i,n,o,r),o.state=e.memoizedState)),"function"==typeof o.componentDidMount&&(e.effectTag|=4)}var fo=Array.isArray;function po(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){n=n._owner;var r=void 0;n&&(1!==n.tag&&a("309"),r=n.stateNode),r||a("147",e);var o=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===o?t.ref:((t=function(e){var t=r.refs;t===oo&&(t=r.refs={}),null===e?delete t[o]:t[o]=e})._stringRef=o,t)}"string"!=typeof e&&a("284"),n._owner||a("290",e)}return e}function ho(e,t){"textarea"!==e.type&&a("31","[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t,"")}function mo(e){function t(t,n){if(e){var r=t.lastEffect;null!==r?(r.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.effectTag=8}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function o(e,t,n){return(e=Yr(e,t)).index=0,e.sibling=null,e}function i(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.effectTag=2,n):r:(t.effectTag=2,n):n}function u(t){return e&&null===t.alternate&&(t.effectTag=2),t}function l(e,t,n,r){return null===t||6!==t.tag?((t=Gr(n,e.mode,r)).return=e,t):((t=o(t,n)).return=e,t)}function c(e,t,n,r){return null!==t&&t.elementType===n.type?((r=o(t,n.props)).ref=po(e,t,n),r.return=e,r):((r=Qr(n.type,n.key,n.props,null,e.mode,r)).ref=po(e,t,n),r.return=e,r)}function s(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Jr(n,e.mode,r)).return=e,t):((t=o(t,n.children||[])).return=e,t)}function f(e,t,n,r,i){return null===t||7!==t.tag?((t=Kr(n,e.mode,r,i)).return=e,t):((t=o(t,n)).return=e,t)}function p(e,t,n){if("string"==typeof t||"number"==typeof t)return(t=Gr(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case Ye:return(n=Qr(t.type,t.key,t.props,null,e.mode,n)).ref=po(e,null,t),n.return=e,n;case Qe:return(t=Jr(t,e.mode,n)).return=e,t}if(fo(t)||at(t))return(t=Kr(t,e.mode,n,null)).return=e,t;ho(e,t)}return null}function d(e,t,n,r){var o=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==o?null:l(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case Ye:return n.key===o?n.type===Ke?f(e,t,n.props.children,r,o):c(e,t,n,r):null;case Qe:return n.key===o?s(e,t,n,r):null}if(fo(n)||at(n))return null!==o?null:f(e,t,n,r,null);ho(e,n)}return null}function h(e,t,n,r,o){if("string"==typeof r||"number"==typeof r)return l(t,e=e.get(n)||null,""+r,o);if("object"==typeof r&&null!==r){switch(r.$$typeof){case Ye:return e=e.get(null===r.key?n:r.key)||null,r.type===Ke?f(t,e,r.props.children,o,r.key):c(t,e,r,o);case Qe:return s(t,e=e.get(null===r.key?n:r.key)||null,r,o)}if(fo(r)||at(r))return f(t,e=e.get(n)||null,r,o,null);ho(t,r)}return null}function m(o,a,u,l){for(var c=null,s=null,f=a,m=a=0,y=null;null!==f&&m<u.length;m++){f.index>m?(y=f,f=null):y=f.sibling;var v=d(o,f,u[m],l);if(null===v){null===f&&(f=y);break}e&&f&&null===v.alternate&&t(o,f),a=i(v,a,m),null===s?c=v:s.sibling=v,s=v,f=y}if(m===u.length)return n(o,f),c;if(null===f){for(;m<u.length;m++)(f=p(o,u[m],l))&&(a=i(f,a,m),null===s?c=f:s.sibling=f,s=f);return c}for(f=r(o,f);m<u.length;m++)(y=h(f,o,m,u[m],l))&&(e&&null!==y.alternate&&f.delete(null===y.key?m:y.key),a=i(y,a,m),null===s?c=y:s.sibling=y,s=y);return e&&f.forEach(function(e){return t(o,e)}),c}function y(o,u,l,c){var s=at(l);"function"!=typeof s&&a("150"),null==(l=s.call(l))&&a("151");for(var f=s=null,m=u,y=u=0,v=null,g=l.next();null!==m&&!g.done;y++,g=l.next()){m.index>y?(v=m,m=null):v=m.sibling;var b=d(o,m,g.value,c);if(null===b){m||(m=v);break}e&&m&&null===b.alternate&&t(o,m),u=i(b,u,y),null===f?s=b:f.sibling=b,f=b,m=v}if(g.done)return n(o,m),s;if(null===m){for(;!g.done;y++,g=l.next())null!==(g=p(o,g.value,c))&&(u=i(g,u,y),null===f?s=g:f.sibling=g,f=g);return s}for(m=r(o,m);!g.done;y++,g=l.next())null!==(g=h(m,o,y,g.value,c))&&(e&&null!==g.alternate&&m.delete(null===g.key?y:g.key),u=i(g,u,y),null===f?s=g:f.sibling=g,f=g);return e&&m.forEach(function(e){return t(o,e)}),s}return function(e,r,i,l){var c="object"==typeof i&&null!==i&&i.type===Ke&&null===i.key;c&&(i=i.props.children);var s="object"==typeof i&&null!==i;if(s)switch(i.$$typeof){case Ye:e:{for(s=i.key,c=r;null!==c;){if(c.key===s){if(7===c.tag?i.type===Ke:c.elementType===i.type){n(e,c.sibling),(r=o(c,i.type===Ke?i.props.children:i.props)).ref=po(e,c,i),r.return=e,e=r;break e}n(e,c);break}t(e,c),c=c.sibling}i.type===Ke?((r=Kr(i.props.children,e.mode,l,i.key)).return=e,e=r):((l=Qr(i.type,i.key,i.props,null,e.mode,l)).ref=po(e,r,i),l.return=e,e=l)}return u(e);case Qe:e:{for(c=i.key;null!==r;){if(r.key===c){if(4===r.tag&&r.stateNode.containerInfo===i.containerInfo&&r.stateNode.implementation===i.implementation){n(e,r.sibling),(r=o(r,i.children||[])).return=e,e=r;break e}n(e,r);break}t(e,r),r=r.sibling}(r=Jr(i,e.mode,l)).return=e,e=r}return u(e)}if("string"==typeof i||"number"==typeof i)return i=""+i,null!==r&&6===r.tag?(n(e,r.sibling),(r=o(r,i)).return=e,e=r):(n(e,r),(r=Gr(i,e.mode,l)).return=e,e=r),u(e);if(fo(i))return m(e,r,i,l);if(at(i))return y(e,r,i,l);if(s&&ho(e,i),void 0===i&&!c)switch(e.tag){case 1:case 0:a("152",(l=e.type).displayName||l.name||"Component")}return n(e,r)}}var yo=mo(!0),vo=mo(!1),go={},bo={current:go},wo={current:go},xo={current:go};function ko(e){return e===go&&a("174"),e}function To(e,t){_r(xo,t),_r(wo,e),_r(bo,go);var n=t.nodeType;switch(n){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:tr(null,"");break;default:t=tr(t=(n=8===n?t.parentNode:t).namespaceURI||null,n=n.tagName)}Cr(bo),_r(bo,t)}function Eo(e){Cr(bo),Cr(wo),Cr(xo)}function So(e){ko(xo.current);var t=ko(bo.current),n=tr(t,e.type);t!==n&&(_r(wo,e),_r(bo,n))}function Po(e){wo.current===e&&(Cr(bo),Cr(wo))}var Co=0,_o=2,Oo=4,Ro=8,jo=16,No=32,Mo=64,Ao=128,Io=Be.ReactCurrentDispatcher,Uo=0,Do=null,Lo=null,Fo=null,zo=null,Wo=null,Ho=null,$o=0,Bo=null,qo=0,Vo=!1,Yo=null,Qo=0;function Ko(){a("307")}function Xo(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!Jt(e[n],t[n]))return!1;return!0}function Go(e,t,n,r,o,i){if(Uo=i,Do=t,Fo=null!==e?e.memoizedState:null,Io.current=null===Fo?si:fi,t=n(r,o),Vo){do{Vo=!1,Qo+=1,Fo=null!==e?e.memoizedState:null,Ho=zo,Bo=Wo=Lo=null,Io.current=fi,t=n(r,o)}while(Vo);Yo=null,Qo=0}return Io.current=ci,(e=Do).memoizedState=zo,e.expirationTime=$o,e.updateQueue=Bo,e.effectTag|=qo,e=null!==Lo&&null!==Lo.next,Uo=0,Ho=Wo=zo=Fo=Lo=Do=null,$o=0,Bo=null,qo=0,e&&a("300"),t}function Jo(){Io.current=ci,Uo=0,Ho=Wo=zo=Fo=Lo=Do=null,$o=0,Bo=null,qo=0,Vo=!1,Yo=null,Qo=0}function Zo(){var e={memoizedState:null,baseState:null,queue:null,baseUpdate:null,next:null};return null===Wo?zo=Wo=e:Wo=Wo.next=e,Wo}function ei(){if(null!==Ho)Ho=(Wo=Ho).next,Fo=null!==(Lo=Fo)?Lo.next:null;else{null===Fo&&a("310");var e={memoizedState:(Lo=Fo).memoizedState,baseState:Lo.baseState,queue:Lo.queue,baseUpdate:Lo.baseUpdate,next:null};Wo=null===Wo?zo=e:Wo.next=e,Fo=Lo.next}return Wo}function ti(e,t){return"function"==typeof t?t(e):t}function ni(e){var t=ei(),n=t.queue;if(null===n&&a("311"),0<Qo){var r=n.dispatch;if(null!==Yo){var o=Yo.get(n);if(void 0!==o){Yo.delete(n);var i=t.memoizedState;do{i=e(i,o.action),o=o.next}while(null!==o);return Jt(i,t.memoizedState)||(ki=!0),t.memoizedState=i,t.baseUpdate===n.last&&(t.baseState=i),n.eagerReducer=e,n.eagerState=i,[i,r]}}return[t.memoizedState,r]}r=n.last;var u=t.baseUpdate;if(i=t.baseState,null!==u?(null!==r&&(r.next=null),r=u.next):r=null!==r?r.next:null,null!==r){var l=o=null,c=r,s=!1;do{var f=c.expirationTime;f<Uo?(s||(s=!0,l=u,o=i),f>$o&&($o=f)):i=c.eagerReducer===e?c.eagerState:e(i,c.action),u=c,c=c.next}while(null!==c&&c!==r);s||(l=u,o=i),Jt(i,t.memoizedState)||(ki=!0),t.memoizedState=i,t.baseUpdate=l,t.baseState=o,n.eagerReducer=e,n.eagerState=i}return[t.memoizedState,n.dispatch]}function ri(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===Bo?(Bo={lastEffect:null}).lastEffect=e.next=e:null===(t=Bo.lastEffect)?Bo.lastEffect=e.next=e:(n=t.next,t.next=e,e.next=n,Bo.lastEffect=e),e}function oi(e,t,n,r){var o=Zo();qo|=e,o.memoizedState=ri(t,n,void 0,void 0===r?null:r)}function ii(e,t,n,r){var o=ei();r=void 0===r?null:r;var i=void 0;if(null!==Lo){var a=Lo.memoizedState;if(i=a.destroy,null!==r&&Xo(r,a.deps))return void ri(Co,n,i,r)}qo|=e,o.memoizedState=ri(t,n,i,r)}function ai(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function ui(){}function li(e,t,n){25>Qo||a("301");var r=e.alternate;if(e===Do||null!==r&&r===Do)if(Vo=!0,e={expirationTime:Uo,action:n,eagerReducer:null,eagerState:null,next:null},null===Yo&&(Yo=new Map),void 0===(n=Yo.get(t)))Yo.set(t,e);else{for(t=n;null!==t.next;)t=t.next;t.next=e}else{$a();var o=ku(),i={expirationTime:o=Ka(o,e),action:n,eagerReducer:null,eagerState:null,next:null},u=t.last;if(null===u)i.next=i;else{var l=u.next;null!==l&&(i.next=l),u.next=i}if(t.last=i,0===e.expirationTime&&(null===r||0===r.expirationTime)&&null!==(r=t.eagerReducer))try{var c=t.eagerState,s=r(c,n);if(i.eagerReducer=r,i.eagerState=s,Jt(s,c))return}catch(e){}Ja(e,o)}}var ci={readContext:Hi,useCallback:Ko,useContext:Ko,useEffect:Ko,useImperativeHandle:Ko,useLayoutEffect:Ko,useMemo:Ko,useReducer:Ko,useRef:Ko,useState:Ko,useDebugValue:Ko},si={readContext:Hi,useCallback:function(e,t){return Zo().memoizedState=[e,void 0===t?null:t],e},useContext:Hi,useEffect:function(e,t){return oi(516,Ao|Mo,e,t)},useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,oi(4,Oo|No,ai.bind(null,t,e),n)},useLayoutEffect:function(e,t){return oi(4,Oo|No,e,t)},useMemo:function(e,t){var n=Zo();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=Zo();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e=(e=r.queue={last:null,dispatch:null,eagerReducer:e,eagerState:t}).dispatch=li.bind(null,Do,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},Zo().memoizedState=e},useState:function(e){var t=Zo();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e=(e=t.queue={last:null,dispatch:null,eagerReducer:ti,eagerState:e}).dispatch=li.bind(null,Do,e),[t.memoizedState,e]},useDebugValue:ui},fi={readContext:Hi,useCallback:function(e,t){var n=ei();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&Xo(t,r[1])?r[0]:(n.memoizedState=[e,t],e)},useContext:Hi,useEffect:function(e,t){return ii(516,Ao|Mo,e,t)},useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,ii(4,Oo|No,ai.bind(null,t,e),n)},useLayoutEffect:function(e,t){return ii(4,Oo|No,e,t)},useMemo:function(e,t){var n=ei();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&Xo(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)},useReducer:ni,useRef:function(){return ei().memoizedState},useState:function(e){return ni(ti)},useDebugValue:ui},pi=null,di=null,hi=!1;function mi(e,t){var n=qr(5,null,null,0);n.elementType="DELETED",n.type="DELETED",n.stateNode=t,n.return=e,n.effectTag=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function yi(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,!0);case 13:default:return!1}}function vi(e){if(hi){var t=di;if(t){var n=t;if(!yi(e,t)){if(!(t=Tr(n))||!yi(e,t))return e.effectTag|=2,hi=!1,void(pi=e);mi(pi,n)}pi=e,di=Er(t)}else e.effectTag|=2,hi=!1,pi=e}}function gi(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&18!==e.tag;)e=e.return;pi=e}function bi(e){if(e!==pi)return!1;if(!hi)return gi(e),hi=!0,!1;var t=e.type;if(5!==e.tag||"head"!==t&&"body"!==t&&!gr(t,e.memoizedProps))for(t=di;t;)mi(e,t),t=Tr(t);return gi(e),di=pi?Tr(e.stateNode):null,!0}function wi(){di=pi=null,hi=!1}var xi=Be.ReactCurrentOwner,ki=!1;function Ti(e,t,n,r){t.child=null===e?vo(t,null,n,r):yo(t,e.child,n,r)}function Ei(e,t,n,r,o){n=n.render;var i=t.ref;return Wi(t,o),r=Go(e,t,n,r,i,o),null===e||ki?(t.effectTag|=1,Ti(e,t,r,o),t.child):(t.updateQueue=e.updateQueue,t.effectTag&=-517,e.expirationTime<=o&&(e.expirationTime=0),Mi(e,t,o))}function Si(e,t,n,r,o,i){if(null===e){var a=n.type;return"function"!=typeof a||Vr(a)||void 0!==a.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=Qr(n.type,null,r,null,t.mode,i)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=a,Pi(e,t,a,r,o,i))}return a=e.child,o<i&&(o=a.memoizedProps,(n=null!==(n=n.compare)?n:en)(o,r)&&e.ref===t.ref)?Mi(e,t,i):(t.effectTag|=1,(e=Yr(a,r)).ref=t.ref,e.return=t,t.child=e)}function Pi(e,t,n,r,o,i){return null!==e&&en(e.memoizedProps,r)&&e.ref===t.ref&&(ki=!1,o<i)?Mi(e,t,i):_i(e,t,n,r,i)}function Ci(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.effectTag|=128)}function _i(e,t,n,r,o){var i=Ar(n)?Nr:Rr.current;return i=Mr(t,i),Wi(t,o),n=Go(e,t,n,r,i,o),null===e||ki?(t.effectTag|=1,Ti(e,t,n,o),t.child):(t.updateQueue=e.updateQueue,t.effectTag&=-517,e.expirationTime<=o&&(e.expirationTime=0),Mi(e,t,o))}function Oi(e,t,n,r,o){if(Ar(n)){var i=!0;Fr(t)}else i=!1;if(Wi(t,o),null===t.stateNode)null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),lo(t,n,r),so(t,n,r,o),r=!0;else if(null===e){var a=t.stateNode,u=t.memoizedProps;a.props=u;var l=a.context,c=n.contextType;"object"==typeof c&&null!==c?c=Hi(c):c=Mr(t,c=Ar(n)?Nr:Rr.current);var s=n.getDerivedStateFromProps,f="function"==typeof s||"function"==typeof a.getSnapshotBeforeUpdate;f||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(u!==r||l!==c)&&co(t,a,r,c),Yi=!1;var p=t.memoizedState;l=a.state=p;var d=t.updateQueue;null!==d&&(na(t,d,r,a,o),l=t.memoizedState),u!==r||p!==l||jr.current||Yi?("function"==typeof s&&(io(t,n,s,r),l=t.memoizedState),(u=Yi||uo(t,n,u,r,p,l,c))?(f||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||("function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount()),"function"==typeof a.componentDidMount&&(t.effectTag|=4)):("function"==typeof a.componentDidMount&&(t.effectTag|=4),t.memoizedProps=r,t.memoizedState=l),a.props=r,a.state=l,a.context=c,r=u):("function"==typeof a.componentDidMount&&(t.effectTag|=4),r=!1)}else a=t.stateNode,u=t.memoizedProps,a.props=t.type===t.elementType?u:ro(t.type,u),l=a.context,"object"==typeof(c=n.contextType)&&null!==c?c=Hi(c):c=Mr(t,c=Ar(n)?Nr:Rr.current),(f="function"==typeof(s=n.getDerivedStateFromProps)||"function"==typeof a.getSnapshotBeforeUpdate)||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(u!==r||l!==c)&&co(t,a,r,c),Yi=!1,l=t.memoizedState,p=a.state=l,null!==(d=t.updateQueue)&&(na(t,d,r,a,o),p=t.memoizedState),u!==r||l!==p||jr.current||Yi?("function"==typeof s&&(io(t,n,s,r),p=t.memoizedState),(s=Yi||uo(t,n,u,r,l,p,c))?(f||"function"!=typeof a.UNSAFE_componentWillUpdate&&"function"!=typeof a.componentWillUpdate||("function"==typeof a.componentWillUpdate&&a.componentWillUpdate(r,p,c),"function"==typeof a.UNSAFE_componentWillUpdate&&a.UNSAFE_componentWillUpdate(r,p,c)),"function"==typeof a.componentDidUpdate&&(t.effectTag|=4),"function"==typeof a.getSnapshotBeforeUpdate&&(t.effectTag|=256)):("function"!=typeof a.componentDidUpdate||u===e.memoizedProps&&l===e.memoizedState||(t.effectTag|=4),"function"!=typeof a.getSnapshotBeforeUpdate||u===e.memoizedProps&&l===e.memoizedState||(t.effectTag|=256),t.memoizedProps=r,t.memoizedState=p),a.props=r,a.state=p,a.context=c,r=s):("function"!=typeof a.componentDidUpdate||u===e.memoizedProps&&l===e.memoizedState||(t.effectTag|=4),"function"!=typeof a.getSnapshotBeforeUpdate||u===e.memoizedProps&&l===e.memoizedState||(t.effectTag|=256),r=!1);return Ri(e,t,n,r,i,o)}function Ri(e,t,n,r,o,i){Ci(e,t);var a=0!=(64&t.effectTag);if(!r&&!a)return o&&zr(t,n,!1),Mi(e,t,i);r=t.stateNode,xi.current=t;var u=a&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.effectTag|=1,null!==e&&a?(t.child=yo(t,e.child,null,i),t.child=yo(t,null,u,i)):Ti(e,t,u,i),t.memoizedState=r.state,o&&zr(t,n,!0),t.child}function ji(e){var t=e.stateNode;t.pendingContext?Dr(0,t.pendingContext,t.pendingContext!==t.context):t.context&&Dr(0,t.context,!1),To(e,t.containerInfo)}function Ni(e,t,n){var r=t.mode,o=t.pendingProps,i=t.memoizedState;if(0==(64&t.effectTag)){i=null;var a=!1}else i={timedOutAt:null!==i?i.timedOutAt:0},a=!0,t.effectTag&=-65;if(null===e)if(a){var u=o.fallback;e=Kr(null,r,0,null),0==(1&t.mode)&&(e.child=null!==t.memoizedState?t.child.child:t.child),r=Kr(u,r,n,null),e.sibling=r,(n=e).return=r.return=t}else n=r=vo(t,null,o.children,n);else null!==e.memoizedState?(u=(r=e.child).sibling,a?(n=o.fallback,o=Yr(r,r.pendingProps),0==(1&t.mode)&&((a=null!==t.memoizedState?t.child.child:t.child)!==r.child&&(o.child=a)),r=o.sibling=Yr(u,n,u.expirationTime),n=o,o.childExpirationTime=0,n.return=r.return=t):n=r=yo(t,r.child,o.children,n)):(u=e.child,a?(a=o.fallback,(o=Kr(null,r,0,null)).child=u,0==(1&t.mode)&&(o.child=null!==t.memoizedState?t.child.child:t.child),(r=o.sibling=Kr(a,r,n,null)).effectTag|=2,n=o,o.childExpirationTime=0,n.return=r.return=t):r=n=yo(t,u,o.children,n)),t.stateNode=e.stateNode;return t.memoizedState=i,t.child=n,r}function Mi(e,t,n){if(null!==e&&(t.contextDependencies=e.contextDependencies),t.childExpirationTime<n)return null;if(null!==e&&t.child!==e.child&&a("153"),null!==t.child){for(n=Yr(e=t.child,e.pendingProps,e.expirationTime),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Yr(e,e.pendingProps,e.expirationTime)).return=t;n.sibling=null}return t.child}function Ai(e,t,n){var r=t.expirationTime;if(null!==e){if(e.memoizedProps!==t.pendingProps||jr.current)ki=!0;else if(r<n){switch(ki=!1,t.tag){case 3:ji(t),wi();break;case 5:So(t);break;case 1:Ar(t.type)&&Fr(t);break;case 4:To(t,t.stateNode.containerInfo);break;case 10:Fi(t,t.memoizedProps.value);break;case 13:if(null!==t.memoizedState)return 0!==(r=t.child.childExpirationTime)&&r>=n?Ni(e,t,n):null!==(t=Mi(e,t,n))?t.sibling:null}return Mi(e,t,n)}}else ki=!1;switch(t.expirationTime=0,t.tag){case 2:r=t.elementType,null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),e=t.pendingProps;var o=Mr(t,Rr.current);if(Wi(t,n),o=Go(null,t,r,e,o,n),t.effectTag|=1,"object"==typeof o&&null!==o&&"function"==typeof o.render&&void 0===o.$$typeof){if(t.tag=1,Jo(),Ar(r)){var i=!0;Fr(t)}else i=!1;t.memoizedState=null!==o.state&&void 0!==o.state?o.state:null;var u=r.getDerivedStateFromProps;"function"==typeof u&&io(t,r,u,e),o.updater=ao,t.stateNode=o,o._reactInternalFiber=t,so(t,r,e,n),t=Ri(null,t,r,!0,i,n)}else t.tag=0,Ti(null,t,o,n),t=t.child;return t;case 16:switch(o=t.elementType,null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),i=t.pendingProps,e=function(e){var t=e._result;switch(e._status){case 1:return t;case 2:case 0:throw t;default:switch(e._status=0,(t=(t=e._ctor)()).then(function(t){0===e._status&&(t=t.default,e._status=1,e._result=t)},function(t){0===e._status&&(e._status=2,e._result=t)}),e._status){case 1:return e._result;case 2:throw e._result}throw e._result=t,t}}(o),t.type=e,o=t.tag=function(e){if("function"==typeof e)return Vr(e)?1:0;if(null!=e){if((e=e.$$typeof)===tt)return 11;if(e===rt)return 14}return 2}(e),i=ro(e,i),u=void 0,o){case 0:u=_i(null,t,e,i,n);break;case 1:u=Oi(null,t,e,i,n);break;case 11:u=Ei(null,t,e,i,n);break;case 14:u=Si(null,t,e,ro(e.type,i),r,n);break;default:a("306",e,"")}return u;case 0:return r=t.type,o=t.pendingProps,_i(e,t,r,o=t.elementType===r?o:ro(r,o),n);case 1:return r=t.type,o=t.pendingProps,Oi(e,t,r,o=t.elementType===r?o:ro(r,o),n);case 3:return ji(t),null===(r=t.updateQueue)&&a("282"),o=null!==(o=t.memoizedState)?o.element:null,na(t,r,t.pendingProps,null,n),(r=t.memoizedState.element)===o?(wi(),t=Mi(e,t,n)):(o=t.stateNode,(o=(null===e||null===e.child)&&o.hydrate)&&(di=Er(t.stateNode.containerInfo),pi=t,o=hi=!0),o?(t.effectTag|=2,t.child=vo(t,null,r,n)):(Ti(e,t,r,n),wi()),t=t.child),t;case 5:return So(t),null===e&&vi(t),r=t.type,o=t.pendingProps,i=null!==e?e.memoizedProps:null,u=o.children,gr(r,o)?u=null:null!==i&&gr(r,i)&&(t.effectTag|=16),Ci(e,t),1!==n&&1&t.mode&&o.hidden?(t.expirationTime=t.childExpirationTime=1,t=null):(Ti(e,t,u,n),t=t.child),t;case 6:return null===e&&vi(t),null;case 13:return Ni(e,t,n);case 4:return To(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=yo(t,null,r,n):Ti(e,t,r,n),t.child;case 11:return r=t.type,o=t.pendingProps,Ei(e,t,r,o=t.elementType===r?o:ro(r,o),n);case 7:return Ti(e,t,t.pendingProps,n),t.child;case 8:case 12:return Ti(e,t,t.pendingProps.children,n),t.child;case 10:e:{if(r=t.type._context,o=t.pendingProps,u=t.memoizedProps,Fi(t,i=o.value),null!==u){var l=u.value;if(0===(i=Jt(l,i)?0:0|("function"==typeof r._calculateChangedBits?r._calculateChangedBits(l,i):1073741823))){if(u.children===o.children&&!jr.current){t=Mi(e,t,n);break e}}else for(null!==(l=t.child)&&(l.return=t);null!==l;){var c=l.contextDependencies;if(null!==c){u=l.child;for(var s=c.first;null!==s;){if(s.context===r&&0!=(s.observedBits&i)){1===l.tag&&((s=Xi(n)).tag=qi,Ji(l,s)),l.expirationTime<n&&(l.expirationTime=n),null!==(s=l.alternate)&&s.expirationTime<n&&(s.expirationTime=n),s=n;for(var f=l.return;null!==f;){var p=f.alternate;if(f.childExpirationTime<s)f.childExpirationTime=s,null!==p&&p.childExpirationTime<s&&(p.childExpirationTime=s);else{if(!(null!==p&&p.childExpirationTime<s))break;p.childExpirationTime=s}f=f.return}c.expirationTime<n&&(c.expirationTime=n);break}s=s.next}}else u=10===l.tag&&l.type===t.type?null:l.child;if(null!==u)u.return=l;else for(u=l;null!==u;){if(u===t){u=null;break}if(null!==(l=u.sibling)){l.return=u.return,u=l;break}u=u.return}l=u}}Ti(e,t,o.children,n),t=t.child}return t;case 9:return o=t.type,r=(i=t.pendingProps).children,Wi(t,n),r=r(o=Hi(o,i.unstable_observedBits)),t.effectTag|=1,Ti(e,t,r,n),t.child;case 14:return i=ro(o=t.type,t.pendingProps),Si(e,t,o,i=ro(o.type,i),r,n);case 15:return Pi(e,t,t.type,t.pendingProps,r,n);case 17:return r=t.type,o=t.pendingProps,o=t.elementType===r?o:ro(r,o),null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),t.tag=1,Ar(r)?(e=!0,Fr(t)):e=!1,Wi(t,n),lo(t,r,o),so(t,r,o,n),Ri(null,t,r,!0,e,n)}a("156")}var Ii={current:null},Ui=null,Di=null,Li=null;function Fi(e,t){var n=e.type._context;_r(Ii,n._currentValue),n._currentValue=t}function zi(e){var t=Ii.current;Cr(Ii),e.type._context._currentValue=t}function Wi(e,t){Ui=e,Li=Di=null;var n=e.contextDependencies;null!==n&&n.expirationTime>=t&&(ki=!0),e.contextDependencies=null}function Hi(e,t){return Li!==e&&!1!==t&&0!==t&&("number"==typeof t&&1073741823!==t||(Li=e,t=1073741823),t={context:e,observedBits:t,next:null},null===Di?(null===Ui&&a("308"),Di=t,Ui.contextDependencies={first:t,expirationTime:0}):Di=Di.next=t),e._currentValue}var $i=0,Bi=1,qi=2,Vi=3,Yi=!1;function Qi(e){return{baseState:e,firstUpdate:null,lastUpdate:null,firstCapturedUpdate:null,lastCapturedUpdate:null,firstEffect:null,lastEffect:null,firstCapturedEffect:null,lastCapturedEffect:null}}function Ki(e){return{baseState:e.baseState,firstUpdate:e.firstUpdate,lastUpdate:e.lastUpdate,firstCapturedUpdate:null,lastCapturedUpdate:null,firstEffect:null,lastEffect:null,firstCapturedEffect:null,lastCapturedEffect:null}}function Xi(e){return{expirationTime:e,tag:$i,payload:null,callback:null,next:null,nextEffect:null}}function Gi(e,t){null===e.lastUpdate?e.firstUpdate=e.lastUpdate=t:(e.lastUpdate.next=t,e.lastUpdate=t)}function Ji(e,t){var n=e.alternate;if(null===n){var r=e.updateQueue,o=null;null===r&&(r=e.updateQueue=Qi(e.memoizedState))}else r=e.updateQueue,o=n.updateQueue,null===r?null===o?(r=e.updateQueue=Qi(e.memoizedState),o=n.updateQueue=Qi(n.memoizedState)):r=e.updateQueue=Ki(o):null===o&&(o=n.updateQueue=Ki(r));null===o||r===o?Gi(r,t):null===r.lastUpdate||null===o.lastUpdate?(Gi(r,t),Gi(o,t)):(Gi(r,t),o.lastUpdate=t)}function Zi(e,t){var n=e.updateQueue;null===(n=null===n?e.updateQueue=Qi(e.memoizedState):ea(e,n)).lastCapturedUpdate?n.firstCapturedUpdate=n.lastCapturedUpdate=t:(n.lastCapturedUpdate.next=t,n.lastCapturedUpdate=t)}function ea(e,t){var n=e.alternate;return null!==n&&t===n.updateQueue&&(t=e.updateQueue=Ki(t)),t}function ta(e,t,n,r,i,a){switch(n.tag){case Bi:return"function"==typeof(e=n.payload)?e.call(a,r,i):e;case Vi:e.effectTag=-2049&e.effectTag|64;case $i:if(null==(i="function"==typeof(e=n.payload)?e.call(a,r,i):e))break;return o({},r,i);case qi:Yi=!0}return r}function na(e,t,n,r,o){Yi=!1;for(var i=(t=ea(e,t)).baseState,a=null,u=0,l=t.firstUpdate,c=i;null!==l;){var s=l.expirationTime;s<o?(null===a&&(a=l,i=c),u<s&&(u=s)):(c=ta(e,0,l,c,n,r),null!==l.callback&&(e.effectTag|=32,l.nextEffect=null,null===t.lastEffect?t.firstEffect=t.lastEffect=l:(t.lastEffect.nextEffect=l,t.lastEffect=l))),l=l.next}for(s=null,l=t.firstCapturedUpdate;null!==l;){var f=l.expirationTime;f<o?(null===s&&(s=l,null===a&&(i=c)),u<f&&(u=f)):(c=ta(e,0,l,c,n,r),null!==l.callback&&(e.effectTag|=32,l.nextEffect=null,null===t.lastCapturedEffect?t.firstCapturedEffect=t.lastCapturedEffect=l:(t.lastCapturedEffect.nextEffect=l,t.lastCapturedEffect=l))),l=l.next}null===a&&(t.lastUpdate=null),null===s?t.lastCapturedUpdate=null:e.effectTag|=32,null===a&&null===s&&(i=c),t.baseState=i,t.firstUpdate=a,t.firstCapturedUpdate=s,e.expirationTime=u,e.memoizedState=c}function ra(e,t,n){null!==t.firstCapturedUpdate&&(null!==t.lastUpdate&&(t.lastUpdate.next=t.firstCapturedUpdate,t.lastUpdate=t.lastCapturedUpdate),t.firstCapturedUpdate=t.lastCapturedUpdate=null),oa(t.firstEffect,n),t.firstEffect=t.lastEffect=null,oa(t.firstCapturedEffect,n),t.firstCapturedEffect=t.lastCapturedEffect=null}function oa(e,t){for(;null!==e;){var n=e.callback;if(null!==n){e.callback=null;var r=t;"function"!=typeof n&&a("191",n),n.call(r)}e=e.nextEffect}}function ia(e,t){return{value:e,source:t,stack:lt(t)}}function aa(e){e.effectTag|=4}var ua=void 0,la=void 0,ca=void 0,sa=void 0;ua=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},la=function(){},ca=function(e,t,n,r,i){var a=e.memoizedProps;if(a!==r){var u=t.stateNode;switch(ko(bo.current),e=null,n){case"input":a=bt(u,a),r=bt(u,r),e=[];break;case"option":a=Yn(u,a),r=Yn(u,r),e=[];break;case"select":a=o({},a,{value:void 0}),r=o({},r,{value:void 0}),e=[];break;case"textarea":a=Kn(u,a),r=Kn(u,r),e=[];break;default:"function"!=typeof a.onClick&&"function"==typeof r.onClick&&(u.onclick=hr)}fr(n,r),u=n=void 0;var l=null;for(n in a)if(!r.hasOwnProperty(n)&&a.hasOwnProperty(n)&&null!=a[n])if("style"===n){var c=a[n];for(u in c)c.hasOwnProperty(u)&&(l||(l={}),l[u]="")}else"dangerouslySetInnerHTML"!==n&&"children"!==n&&"suppressContentEditableWarning"!==n&&"suppressHydrationWarning"!==n&&"autoFocus"!==n&&(b.hasOwnProperty(n)?e||(e=[]):(e=e||[]).push(n,null));for(n in r){var s=r[n];if(c=null!=a?a[n]:void 0,r.hasOwnProperty(n)&&s!==c&&(null!=s||null!=c))if("style"===n)if(c){for(u in c)!c.hasOwnProperty(u)||s&&s.hasOwnProperty(u)||(l||(l={}),l[u]="");for(u in s)s.hasOwnProperty(u)&&c[u]!==s[u]&&(l||(l={}),l[u]=s[u])}else l||(e||(e=[]),e.push(n,l)),l=s;else"dangerouslySetInnerHTML"===n?(s=s?s.__html:void 0,c=c?c.__html:void 0,null!=s&&c!==s&&(e=e||[]).push(n,""+s)):"children"===n?c===s||"string"!=typeof s&&"number"!=typeof s||(e=e||[]).push(n,""+s):"suppressContentEditableWarning"!==n&&"suppressHydrationWarning"!==n&&(b.hasOwnProperty(n)?(null!=s&&dr(i,n),e||c===s||(e=[])):(e=e||[]).push(n,s))}l&&(e=e||[]).push("style",l),i=e,(t.updateQueue=i)&&aa(t)}},sa=function(e,t,n,r){n!==r&&aa(t)};var fa="function"==typeof WeakSet?WeakSet:Set;function pa(e,t){var n=t.source,r=t.stack;null===r&&null!==n&&(r=lt(n)),null!==n&&ut(n.type),t=t.value,null!==e&&1===e.tag&&ut(e.type);try{console.error(t)}catch(e){setTimeout(function(){throw e})}}function da(e){var t=e.ref;if(null!==t)if("function"==typeof t)try{t(null)}catch(t){Qa(e,t)}else t.current=null}function ha(e,t,n){if(null!==(n=null!==(n=n.updateQueue)?n.lastEffect:null)){var r=n=n.next;do{if((r.tag&e)!==Co){var o=r.destroy;r.destroy=void 0,void 0!==o&&o()}(r.tag&t)!==Co&&(o=r.create,r.destroy=o()),r=r.next}while(r!==n)}}function ma(e){switch("function"==typeof Hr&&Hr(e),e.tag){case 0:case 11:case 14:case 15:var t=e.updateQueue;if(null!==t&&null!==(t=t.lastEffect)){var n=t=t.next;do{var r=n.destroy;if(void 0!==r){var o=e;try{r()}catch(e){Qa(o,e)}}n=n.next}while(n!==t)}break;case 1:if(da(e),"function"==typeof(t=e.stateNode).componentWillUnmount)try{t.props=e.memoizedProps,t.state=e.memoizedState,t.componentWillUnmount()}catch(t){Qa(e,t)}break;case 5:da(e);break;case 4:ga(e)}}function ya(e){return 5===e.tag||3===e.tag||4===e.tag}function va(e){e:{for(var t=e.return;null!==t;){if(ya(t)){var n=t;break e}t=t.return}a("160"),n=void 0}var r=t=void 0;switch(n.tag){case 5:t=n.stateNode,r=!1;break;case 3:case 4:t=n.stateNode.containerInfo,r=!0;break;default:a("161")}16&n.effectTag&&(ir(t,""),n.effectTag&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||ya(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag&&18!==n.tag;){if(2&n.effectTag)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.effectTag)){n=n.stateNode;break e}}for(var o=e;;){if(5===o.tag||6===o.tag)if(n)if(r){var i=t,u=o.stateNode,l=n;8===i.nodeType?i.parentNode.insertBefore(u,l):i.insertBefore(u,l)}else t.insertBefore(o.stateNode,n);else r?(u=t,l=o.stateNode,8===u.nodeType?(i=u.parentNode).insertBefore(l,u):(i=u).appendChild(l),null!=(u=u._reactRootContainer)||null!==i.onclick||(i.onclick=hr)):t.appendChild(o.stateNode);else if(4!==o.tag&&null!==o.child){o.child.return=o,o=o.child;continue}if(o===e)break;for(;null===o.sibling;){if(null===o.return||o.return===e)return;o=o.return}o.sibling.return=o.return,o=o.sibling}}function ga(e){for(var t=e,n=!1,r=void 0,o=void 0;;){if(!n){n=t.return;e:for(;;){switch(null===n&&a("160"),n.tag){case 5:r=n.stateNode,o=!1;break e;case 3:case 4:r=n.stateNode.containerInfo,o=!0;break e}n=n.return}n=!0}if(5===t.tag||6===t.tag){e:for(var i=t,u=i;;)if(ma(u),null!==u.child&&4!==u.tag)u.child.return=u,u=u.child;else{if(u===i)break;for(;null===u.sibling;){if(null===u.return||u.return===i)break e;u=u.return}u.sibling.return=u.return,u=u.sibling}o?(i=r,u=t.stateNode,8===i.nodeType?i.parentNode.removeChild(u):i.removeChild(u)):r.removeChild(t.stateNode)}else if(4===t.tag){if(null!==t.child){r=t.stateNode.containerInfo,o=!0,t.child.return=t,t=t.child;continue}}else if(ma(t),null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return;4===(t=t.return).tag&&(n=!1)}t.sibling.return=t.return,t=t.sibling}}function ba(e,t){switch(t.tag){case 0:case 11:case 14:case 15:ha(Oo,Ro,t);break;case 1:break;case 5:var n=t.stateNode;if(null!=n){var r=t.memoizedProps;e=null!==e?e.memoizedProps:r;var o=t.type,i=t.updateQueue;t.updateQueue=null,null!==i&&function(e,t,n,r,o){e[A]=o,"input"===n&&"radio"===o.type&&null!=o.name&&xt(e,o),pr(n,r),r=pr(n,o);for(var i=0;i<t.length;i+=2){var a=t[i],u=t[i+1];"style"===a?cr(e,u):"dangerouslySetInnerHTML"===a?or(e,u):"children"===a?ir(e,u):vt(e,a,u,r)}switch(n){case"input":kt(e,o);break;case"textarea":Gn(e,o);break;case"select":t=e._wrapperState.wasMultiple,e._wrapperState.wasMultiple=!!o.multiple,null!=(n=o.value)?Qn(e,!!o.multiple,n,!1):t!==!!o.multiple&&(null!=o.defaultValue?Qn(e,!!o.multiple,o.defaultValue,!0):Qn(e,!!o.multiple,o.multiple?[]:"",!1))}}(n,i,o,e,r)}break;case 6:null===t.stateNode&&a("162"),t.stateNode.nodeValue=t.memoizedProps;break;case 3:case 12:break;case 13:if(n=t.memoizedState,r=void 0,e=t,null===n?r=!1:(r=!0,e=t.child,0===n.timedOutAt&&(n.timedOutAt=ku())),null!==e&&function(e,t){for(var n=e;;){if(5===n.tag){var r=n.stateNode;if(t)r.style.display="none";else{r=n.stateNode;var o=n.memoizedProps.style;o=null!=o&&o.hasOwnProperty("display")?o.display:null,r.style.display=lr("display",o)}}else if(6===n.tag)n.stateNode.nodeValue=t?"":n.memoizedProps;else{if(13===n.tag&&null!==n.memoizedState){(r=n.child.sibling).return=n,n=r;continue}if(null!==n.child){n.child.return=n,n=n.child;continue}}if(n===e)break;for(;null===n.sibling;){if(null===n.return||n.return===e)return;n=n.return}n.sibling.return=n.return,n=n.sibling}}(e,r),null!==(n=t.updateQueue)){t.updateQueue=null;var u=t.stateNode;null===u&&(u=t.stateNode=new fa),n.forEach(function(e){var n=function(e,t){var n=e.stateNode;null!==n&&n.delete(t),t=Ka(t=ku(),e),null!==(e=Ga(e,t))&&(Zr(e,t),0!==(t=e.expirationTime)&&Tu(e,t))}.bind(null,t,e);u.has(e)||(u.add(e),e.then(n,n))})}break;case 17:break;default:a("163")}}var wa="function"==typeof WeakMap?WeakMap:Map;function xa(e,t,n){(n=Xi(n)).tag=Vi,n.payload={element:null};var r=t.value;return n.callback=function(){Nu(r),pa(e,t)},n}function ka(e,t,n){(n=Xi(n)).tag=Vi;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var o=t.value;n.payload=function(){return r(o)}}var i=e.stateNode;return null!==i&&"function"==typeof i.componentDidCatch&&(n.callback=function(){"function"!=typeof r&&(null===La?La=new Set([this]):La.add(this));var n=t.value,o=t.stack;pa(e,t),this.componentDidCatch(n,{componentStack:null!==o?o:""})}),n}function Ta(e){switch(e.tag){case 1:Ar(e.type)&&Ir();var t=e.effectTag;return 2048&t?(e.effectTag=-2049&t|64,e):null;case 3:return Eo(),Ur(),0!=(64&(t=e.effectTag))&&a("285"),e.effectTag=-2049&t|64,e;case 5:return Po(e),null;case 13:return 2048&(t=e.effectTag)?(e.effectTag=-2049&t|64,e):null;case 18:return null;case 4:return Eo(),null;case 10:return zi(e),null;default:return null}}var Ea=Be.ReactCurrentDispatcher,Sa=Be.ReactCurrentOwner,Pa=1073741822,Ca=!1,_a=null,Oa=null,Ra=0,ja=-1,Na=!1,Ma=null,Aa=!1,Ia=null,Ua=null,Da=null,La=null;function Fa(){if(null!==_a)for(var e=_a.return;null!==e;){var t=e;switch(t.tag){case 1:var n=t.type.childContextTypes;null!=n&&Ir();break;case 3:Eo(),Ur();break;case 5:Po(t);break;case 4:Eo();break;case 10:zi(t)}e=e.return}Oa=null,Ra=0,ja=-1,Na=!1,_a=null}function za(){for(;null!==Ma;){var e=Ma.effectTag;if(16&e&&ir(Ma.stateNode,""),128&e){var t=Ma.alternate;null!==t&&(null!==(t=t.ref)&&("function"==typeof t?t(null):t.current=null))}switch(14&e){case 2:va(Ma),Ma.effectTag&=-3;break;case 6:va(Ma),Ma.effectTag&=-3,ba(Ma.alternate,Ma);break;case 4:ba(Ma.alternate,Ma);break;case 8:ga(e=Ma),e.return=null,e.child=null,e.memoizedState=null,e.updateQueue=null,null!==(e=e.alternate)&&(e.return=null,e.child=null,e.memoizedState=null,e.updateQueue=null)}Ma=Ma.nextEffect}}function Wa(){for(;null!==Ma;){if(256&Ma.effectTag)e:{var e=Ma.alternate,t=Ma;switch(t.tag){case 0:case 11:case 15:ha(_o,Co,t);break e;case 1:if(256&t.effectTag&&null!==e){var n=e.memoizedProps,r=e.memoizedState;t=(e=t.stateNode).getSnapshotBeforeUpdate(t.elementType===t.type?n:ro(t.type,n),r),e.__reactInternalSnapshotBeforeUpdate=t}break e;case 3:case 5:case 6:case 4:case 17:break e;default:a("163")}}Ma=Ma.nextEffect}}function Ha(e,t){for(;null!==Ma;){var n=Ma.effectTag;if(36&n){var r=Ma.alternate,o=Ma,i=t;switch(o.tag){case 0:case 11:case 15:ha(jo,No,o);break;case 1:var u=o.stateNode;if(4&o.effectTag)if(null===r)u.componentDidMount();else{var l=o.elementType===o.type?r.memoizedProps:ro(o.type,r.memoizedProps);u.componentDidUpdate(l,r.memoizedState,u.__reactInternalSnapshotBeforeUpdate)}null!==(r=o.updateQueue)&&ra(0,r,u);break;case 3:if(null!==(r=o.updateQueue)){if(u=null,null!==o.child)switch(o.child.tag){case 5:u=o.child.stateNode;break;case 1:u=o.child.stateNode}ra(0,r,u)}break;case 5:i=o.stateNode,null===r&&4&o.effectTag&&vr(o.type,o.memoizedProps)&&i.focus();break;case 6:case 4:case 12:case 13:case 17:break;default:a("163")}}128&n&&(null!==(o=Ma.ref)&&(i=Ma.stateNode,"function"==typeof o?o(i):o.current=i)),512&n&&(Ia=e),Ma=Ma.nextEffect}}function $a(){null!==Ua&&kr(Ua),null!==Da&&Da()}function Ba(e,t){Aa=Ca=!0,e.current===t&&a("177");var n=e.pendingCommitExpirationTime;0===n&&a("261"),e.pendingCommitExpirationTime=0;var r=t.expirationTime,o=t.childExpirationTime;for(function(e,t){if(e.didError=!1,0===t)e.earliestPendingTime=0,e.latestPendingTime=0,e.earliestSuspendedTime=0,e.latestSuspendedTime=0,e.latestPingedTime=0;else{t<e.latestPingedTime&&(e.latestPingedTime=0);var n=e.latestPendingTime;0!==n&&(n>t?e.earliestPendingTime=e.latestPendingTime=0:e.earliestPendingTime>t&&(e.earliestPendingTime=e.latestPendingTime)),0===(n=e.earliestSuspendedTime)?Zr(e,t):t<e.latestSuspendedTime?(e.earliestSuspendedTime=0,e.latestSuspendedTime=0,e.latestPingedTime=0,Zr(e,t)):t>n&&Zr(e,t)}no(0,e)}(e,o>r?o:r),Sa.current=null,r=void 0,1<t.effectTag?null!==t.lastEffect?(t.lastEffect.nextEffect=t,r=t.firstEffect):r=t:r=t.firstEffect,mr=En,yr=function(){var e=Un();if(Dn(e)){if("selectionStart"in e)var t={start:e.selectionStart,end:e.selectionEnd};else e:{var n=(t=(t=e.ownerDocument)&&t.defaultView||window).getSelection&&t.getSelection();if(n&&0!==n.rangeCount){t=n.anchorNode;var r=n.anchorOffset,o=n.focusNode;n=n.focusOffset;try{t.nodeType,o.nodeType}catch(e){t=null;break e}var i=0,a=-1,u=-1,l=0,c=0,s=e,f=null;t:for(;;){for(var p;s!==t||0!==r&&3!==s.nodeType||(a=i+r),s!==o||0!==n&&3!==s.nodeType||(u=i+n),3===s.nodeType&&(i+=s.nodeValue.length),null!==(p=s.firstChild);)f=s,s=p;for(;;){if(s===e)break t;if(f===t&&++l===r&&(a=i),f===o&&++c===n&&(u=i),null!==(p=s.nextSibling))break;f=(s=f).parentNode}s=p}t=-1===a||-1===u?null:{start:a,end:u}}else t=null}t=t||{start:0,end:0}}else t=null;return{focusedElem:e,selectionRange:t}}(),En=!1,Ma=r;null!==Ma;){o=!1;var u=void 0;try{Wa()}catch(e){o=!0,u=e}o&&(null===Ma&&a("178"),Qa(Ma,u),null!==Ma&&(Ma=Ma.nextEffect))}for(Ma=r;null!==Ma;){o=!1,u=void 0;try{za()}catch(e){o=!0,u=e}o&&(null===Ma&&a("178"),Qa(Ma,u),null!==Ma&&(Ma=Ma.nextEffect))}for(Ln(yr),yr=null,En=!!mr,mr=null,e.current=t,Ma=r;null!==Ma;){o=!1,u=void 0;try{Ha(e,n)}catch(e){o=!0,u=e}o&&(null===Ma&&a("178"),Qa(Ma,u),null!==Ma&&(Ma=Ma.nextEffect))}if(null!==r&&null!==Ia){var l=function(e,t){Da=Ua=Ia=null;var n=ou;ou=!0;do{if(512&t.effectTag){var r=!1,o=void 0;try{var i=t;ha(Ao,Co,i),ha(Co,Mo,i)}catch(e){r=!0,o=e}r&&Qa(t,o)}t=t.nextEffect}while(null!==t);ou=n,0!==(n=e.expirationTime)&&Tu(e,n),su||ou||_u(1073741823,!1)}.bind(null,e,r);Ua=i.unstable_runWithPriority(i.unstable_NormalPriority,function(){return xr(l)}),Da=l}Ca=Aa=!1,"function"==typeof Wr&&Wr(t.stateNode),n=t.expirationTime,0===(t=(t=t.childExpirationTime)>n?t:n)&&(La=null),function(e,t){e.expirationTime=t,e.finishedWork=null}(e,t)}function qa(e){for(;;){var t=e.alternate,n=e.return,r=e.sibling;if(0==(1024&e.effectTag)){_a=e;e:{var i=t,u=Ra,l=(t=e).pendingProps;switch(t.tag){case 2:case 16:break;case 15:case 0:break;case 1:Ar(t.type)&&Ir();break;case 3:Eo(),Ur(),(l=t.stateNode).pendingContext&&(l.context=l.pendingContext,l.pendingContext=null),null!==i&&null!==i.child||(bi(t),t.effectTag&=-3),la(t);break;case 5:Po(t);var c=ko(xo.current);if(u=t.type,null!==i&&null!=t.stateNode)ca(i,t,u,l,c),i.ref!==t.ref&&(t.effectTag|=128);else if(l){var s=ko(bo.current);if(bi(t)){i=(l=t).stateNode;var f=l.type,p=l.memoizedProps,d=c;switch(i[M]=l,i[A]=p,u=void 0,c=f){case"iframe":case"object":Sn("load",i);break;case"video":case"audio":for(f=0;f<te.length;f++)Sn(te[f],i);break;case"source":Sn("error",i);break;case"img":case"image":case"link":Sn("error",i),Sn("load",i);break;case"form":Sn("reset",i),Sn("submit",i);break;case"details":Sn("toggle",i);break;case"input":wt(i,p),Sn("invalid",i),dr(d,"onChange");break;case"select":i._wrapperState={wasMultiple:!!p.multiple},Sn("invalid",i),dr(d,"onChange");break;case"textarea":Xn(i,p),Sn("invalid",i),dr(d,"onChange")}for(u in fr(c,p),f=null,p)p.hasOwnProperty(u)&&(s=p[u],"children"===u?"string"==typeof s?i.textContent!==s&&(f=["children",s]):"number"==typeof s&&i.textContent!==""+s&&(f=["children",""+s]):b.hasOwnProperty(u)&&null!=s&&dr(d,u));switch(c){case"input":He(i),Tt(i,p,!0);break;case"textarea":He(i),Jn(i);break;case"select":case"option":break;default:"function"==typeof p.onClick&&(i.onclick=hr)}u=f,l.updateQueue=u,(l=null!==u)&&aa(t)}else{p=t,i=u,d=l,f=9===c.nodeType?c:c.ownerDocument,s===Zn.html&&(s=er(i)),s===Zn.html?"script"===i?((i=f.createElement("div")).innerHTML="<script><\/script>",f=i.removeChild(i.firstChild)):"string"==typeof d.is?f=f.createElement(i,{is:d.is}):(f=f.createElement(i),"select"===i&&d.multiple&&(f.multiple=!0)):f=f.createElementNS(s,i),(i=f)[M]=p,i[A]=l,ua(i,t,!1,!1),d=i;var h=c,m=pr(f=u,p=l);switch(f){case"iframe":case"object":Sn("load",d),c=p;break;case"video":case"audio":for(c=0;c<te.length;c++)Sn(te[c],d);c=p;break;case"source":Sn("error",d),c=p;break;case"img":case"image":case"link":Sn("error",d),Sn("load",d),c=p;break;case"form":Sn("reset",d),Sn("submit",d),c=p;break;case"details":Sn("toggle",d),c=p;break;case"input":wt(d,p),c=bt(d,p),Sn("invalid",d),dr(h,"onChange");break;case"option":c=Yn(d,p);break;case"select":d._wrapperState={wasMultiple:!!p.multiple},c=o({},p,{value:void 0}),Sn("invalid",d),dr(h,"onChange");break;case"textarea":Xn(d,p),c=Kn(d,p),Sn("invalid",d),dr(h,"onChange");break;default:c=p}fr(f,c),s=void 0;var y=f,v=d,g=c;for(s in g)if(g.hasOwnProperty(s)){var w=g[s];"style"===s?cr(v,w):"dangerouslySetInnerHTML"===s?null!=(w=w?w.__html:void 0)&&or(v,w):"children"===s?"string"==typeof w?("textarea"!==y||""!==w)&&ir(v,w):"number"==typeof w&&ir(v,""+w):"suppressContentEditableWarning"!==s&&"suppressHydrationWarning"!==s&&"autoFocus"!==s&&(b.hasOwnProperty(s)?null!=w&&dr(h,s):null!=w&&vt(v,s,w,m))}switch(f){case"input":He(d),Tt(d,p,!1);break;case"textarea":He(d),Jn(d);break;case"option":null!=p.value&&d.setAttribute("value",""+gt(p.value));break;case"select":(c=d).multiple=!!p.multiple,null!=(d=p.value)?Qn(c,!!p.multiple,d,!1):null!=p.defaultValue&&Qn(c,!!p.multiple,p.defaultValue,!0);break;default:"function"==typeof c.onClick&&(d.onclick=hr)}(l=vr(u,l))&&aa(t),t.stateNode=i}null!==t.ref&&(t.effectTag|=128)}else null===t.stateNode&&a("166");break;case 6:i&&null!=t.stateNode?sa(i,t,i.memoizedProps,l):("string"!=typeof l&&(null===t.stateNode&&a("166")),i=ko(xo.current),ko(bo.current),bi(t)?(u=(l=t).stateNode,i=l.memoizedProps,u[M]=l,(l=u.nodeValue!==i)&&aa(t)):(u=t,(l=(9===i.nodeType?i:i.ownerDocument).createTextNode(l))[M]=t,u.stateNode=l));break;case 11:break;case 13:if(l=t.memoizedState,0!=(64&t.effectTag)){t.expirationTime=u,_a=t;break e}l=null!==l,u=null!==i&&null!==i.memoizedState,null!==i&&!l&&u&&(null!==(i=i.child.sibling)&&(null!==(c=t.firstEffect)?(t.firstEffect=i,i.nextEffect=c):(t.firstEffect=t.lastEffect=i,i.nextEffect=null),i.effectTag=8)),(l||u)&&(t.effectTag|=4);break;case 7:case 8:case 12:break;case 4:Eo(),la(t);break;case 10:zi(t);break;case 9:case 14:break;case 17:Ar(t.type)&&Ir();break;case 18:break;default:a("156")}_a=null}if(t=e,1===Ra||1!==t.childExpirationTime){for(l=0,u=t.child;null!==u;)(i=u.expirationTime)>l&&(l=i),(c=u.childExpirationTime)>l&&(l=c),u=u.sibling;t.childExpirationTime=l}if(null!==_a)return _a;null!==n&&0==(1024&n.effectTag)&&(null===n.firstEffect&&(n.firstEffect=e.firstEffect),null!==e.lastEffect&&(null!==n.lastEffect&&(n.lastEffect.nextEffect=e.firstEffect),n.lastEffect=e.lastEffect),1<e.effectTag&&(null!==n.lastEffect?n.lastEffect.nextEffect=e:n.firstEffect=e,n.lastEffect=e))}else{if(null!==(e=Ta(e)))return e.effectTag&=1023,e;null!==n&&(n.firstEffect=n.lastEffect=null,n.effectTag|=1024)}if(null!==r)return r;if(null===n)break;e=n}return null}function Va(e){var t=Ai(e.alternate,e,Ra);return e.memoizedProps=e.pendingProps,null===t&&(t=qa(e)),Sa.current=null,t}function Ya(e,t){Ca&&a("243"),$a(),Ca=!0;var n=Ea.current;Ea.current=ci;var r=e.nextExpirationTimeToWorkOn;r===Ra&&e===Oa&&null!==_a||(Fa(),Ra=r,_a=Yr((Oa=e).current,null),e.pendingCommitExpirationTime=0);for(var o=!1;;){try{if(t)for(;null!==_a&&!Pu();)_a=Va(_a);else for(;null!==_a;)_a=Va(_a)}catch(t){if(Li=Di=Ui=null,Jo(),null===_a)o=!0,Nu(t);else{null===_a&&a("271");var i=_a,u=i.return;if(null!==u){e:{var l=e,c=u,s=i,f=t;if(u=Ra,s.effectTag|=1024,s.firstEffect=s.lastEffect=null,null!==f&&"object"==typeof f&&"function"==typeof f.then){var p=f;f=c;var d=-1,h=-1;do{if(13===f.tag){var m=f.alternate;if(null!==m&&null!==(m=m.memoizedState)){h=10*(1073741822-m.timedOutAt);break}"number"==typeof(m=f.pendingProps.maxDuration)&&(0>=m?d=0:(-1===d||m<d)&&(d=m))}f=f.return}while(null!==f);f=c;do{if((m=13===f.tag)&&(m=void 0!==f.memoizedProps.fallback&&null===f.memoizedState),m){if(null===(c=f.updateQueue)?((c=new Set).add(p),f.updateQueue=c):c.add(p),0==(1&f.mode)){f.effectTag|=64,s.effectTag&=-1957,1===s.tag&&(null===s.alternate?s.tag=17:((u=Xi(1073741823)).tag=qi,Ji(s,u))),s.expirationTime=1073741823;break e}c=u;var y=(s=l).pingCache;null===y?(y=s.pingCache=new wa,m=new Set,y.set(p,m)):void 0===(m=y.get(p))&&(m=new Set,y.set(p,m)),m.has(c)||(m.add(c),s=Xa.bind(null,s,p,c),p.then(s,s)),-1===d?l=1073741823:(-1===h&&(h=10*(1073741822-to(l,u))-5e3),l=h+d),0<=l&&ja<l&&(ja=l),f.effectTag|=2048,f.expirationTime=u;break e}f=f.return}while(null!==f);f=Error((ut(s.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display."+lt(s))}Na=!0,f=ia(f,s),l=c;do{switch(l.tag){case 3:l.effectTag|=2048,l.expirationTime=u,Zi(l,u=xa(l,f,u));break e;case 1:if(d=f,h=l.type,s=l.stateNode,0==(64&l.effectTag)&&("function"==typeof h.getDerivedStateFromError||null!==s&&"function"==typeof s.componentDidCatch&&(null===La||!La.has(s)))){l.effectTag|=2048,l.expirationTime=u,Zi(l,u=ka(l,d,u));break e}}l=l.return}while(null!==l)}_a=qa(i);continue}o=!0,Nu(t)}}break}if(Ca=!1,Ea.current=n,Li=Di=Ui=null,Jo(),o)Oa=null,e.finishedWork=null;else if(null!==_a)e.finishedWork=null;else{if(null===(n=e.current.alternate)&&a("281"),Oa=null,Na){if(o=e.latestPendingTime,i=e.latestSuspendedTime,u=e.latestPingedTime,0!==o&&o<r||0!==i&&i<r||0!==u&&u<r)return eo(e,r),void xu(e,n,r,e.expirationTime,-1);if(!e.didError&&t)return e.didError=!0,r=e.nextExpirationTimeToWorkOn=r,t=e.expirationTime=1073741823,void xu(e,n,r,t,-1)}t&&-1!==ja?(eo(e,r),(t=10*(1073741822-to(e,r)))<ja&&(ja=t),t=10*(1073741822-ku()),t=ja-t,xu(e,n,r,e.expirationTime,0>t?0:t)):(e.pendingCommitExpirationTime=r,e.finishedWork=n)}}function Qa(e,t){for(var n=e.return;null!==n;){switch(n.tag){case 1:var r=n.stateNode;if("function"==typeof n.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===La||!La.has(r)))return Ji(n,e=ka(n,e=ia(t,e),1073741823)),void Ja(n,1073741823);break;case 3:return Ji(n,e=xa(n,e=ia(t,e),1073741823)),void Ja(n,1073741823)}n=n.return}3===e.tag&&(Ji(e,n=xa(e,n=ia(t,e),1073741823)),Ja(e,1073741823))}function Ka(e,t){var n=i.unstable_getCurrentPriorityLevel(),r=void 0;if(0==(1&t.mode))r=1073741823;else if(Ca&&!Aa)r=Ra;else{switch(n){case i.unstable_ImmediatePriority:r=1073741823;break;case i.unstable_UserBlockingPriority:r=1073741822-10*(1+((1073741822-e+15)/10|0));break;case i.unstable_NormalPriority:r=1073741822-25*(1+((1073741822-e+500)/25|0));break;case i.unstable_LowPriority:case i.unstable_IdlePriority:r=1;break;default:a("313")}null!==Oa&&r===Ra&&--r}return n===i.unstable_UserBlockingPriority&&(0===uu||r<uu)&&(uu=r),r}function Xa(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),null!==Oa&&Ra===n?Oa=null:(t=e.earliestSuspendedTime,r=e.latestSuspendedTime,0!==t&&n<=t&&n>=r&&(e.didError=!1,(0===(t=e.latestPingedTime)||t>n)&&(e.latestPingedTime=n),no(n,e),0!==(n=e.expirationTime)&&Tu(e,n)))}function Ga(e,t){e.expirationTime<t&&(e.expirationTime=t);var n=e.alternate;null!==n&&n.expirationTime<t&&(n.expirationTime=t);var r=e.return,o=null;if(null===r&&3===e.tag)o=e.stateNode;else for(;null!==r;){if(n=r.alternate,r.childExpirationTime<t&&(r.childExpirationTime=t),null!==n&&n.childExpirationTime<t&&(n.childExpirationTime=t),null===r.return&&3===r.tag){o=r.stateNode;break}r=r.return}return o}function Ja(e,t){null!==(e=Ga(e,t))&&(!Ca&&0!==Ra&&t>Ra&&Fa(),Zr(e,t),Ca&&!Aa&&Oa===e||Tu(e,e.expirationTime),vu>yu&&(vu=0,a("185")))}function Za(e,t,n,r,o){return i.unstable_runWithPriority(i.unstable_ImmediatePriority,function(){return e(t,n,r,o)})}var eu=null,tu=null,nu=0,ru=void 0,ou=!1,iu=null,au=0,uu=0,lu=!1,cu=null,su=!1,fu=!1,pu=null,du=i.unstable_now(),hu=1073741822-(du/10|0),mu=hu,yu=50,vu=0,gu=null;function bu(){hu=1073741822-((i.unstable_now()-du)/10|0)}function wu(e,t){if(0!==nu){if(t<nu)return;null!==ru&&i.unstable_cancelCallback(ru)}nu=t,e=i.unstable_now()-du,ru=i.unstable_scheduleCallback(Cu,{timeout:10*(1073741822-t)-e})}function xu(e,t,n,r,o){e.expirationTime=r,0!==o||Pu()?0<o&&(e.timeoutHandle=br(function(e,t,n){e.pendingCommitExpirationTime=n,e.finishedWork=t,bu(),mu=hu,Ou(e,n)}.bind(null,e,t,n),o)):(e.pendingCommitExpirationTime=n,e.finishedWork=t)}function ku(){return ou?mu:(Eu(),0!==au&&1!==au||(bu(),mu=hu),mu)}function Tu(e,t){null===e.nextScheduledRoot?(e.expirationTime=t,null===tu?(eu=tu=e,e.nextScheduledRoot=e):(tu=tu.nextScheduledRoot=e).nextScheduledRoot=eu):t>e.expirationTime&&(e.expirationTime=t),ou||(su?fu&&(iu=e,au=1073741823,Ru(e,1073741823,!1)):1073741823===t?_u(1073741823,!1):wu(e,t))}function Eu(){var e=0,t=null;if(null!==tu)for(var n=tu,r=eu;null!==r;){var o=r.expirationTime;if(0===o){if((null===n||null===tu)&&a("244"),r===r.nextScheduledRoot){eu=tu=r.nextScheduledRoot=null;break}if(r===eu)eu=o=r.nextScheduledRoot,tu.nextScheduledRoot=o,r.nextScheduledRoot=null;else{if(r===tu){(tu=n).nextScheduledRoot=eu,r.nextScheduledRoot=null;break}n.nextScheduledRoot=r.nextScheduledRoot,r.nextScheduledRoot=null}r=n.nextScheduledRoot}else{if(o>e&&(e=o,t=r),r===tu)break;if(1073741823===e)break;n=r,r=r.nextScheduledRoot}}iu=t,au=e}var Su=!1;function Pu(){return!!Su||!!i.unstable_shouldYield()&&(Su=!0)}function Cu(){try{if(!Pu()&&null!==eu){bu();var e=eu;do{var t=e.expirationTime;0!==t&&hu<=t&&(e.nextExpirationTimeToWorkOn=hu),e=e.nextScheduledRoot}while(e!==eu)}_u(0,!0)}finally{Su=!1}}function _u(e,t){if(Eu(),t)for(bu(),mu=hu;null!==iu&&0!==au&&e<=au&&!(Su&&hu>au);)Ru(iu,au,hu>au),Eu(),bu(),mu=hu;else for(;null!==iu&&0!==au&&e<=au;)Ru(iu,au,!1),Eu();if(t&&(nu=0,ru=null),0!==au&&wu(iu,au),vu=0,gu=null,null!==pu)for(e=pu,pu=null,t=0;t<e.length;t++){var n=e[t];try{n._onComplete()}catch(e){lu||(lu=!0,cu=e)}}if(lu)throw e=cu,cu=null,lu=!1,e}function Ou(e,t){ou&&a("253"),iu=e,au=t,Ru(e,t,!1),_u(1073741823,!1)}function Ru(e,t,n){if(ou&&a("245"),ou=!0,n){var r=e.finishedWork;null!==r?ju(e,r,t):(e.finishedWork=null,-1!==(r=e.timeoutHandle)&&(e.timeoutHandle=-1,wr(r)),Ya(e,n),null!==(r=e.finishedWork)&&(Pu()?e.finishedWork=r:ju(e,r,t)))}else null!==(r=e.finishedWork)?ju(e,r,t):(e.finishedWork=null,-1!==(r=e.timeoutHandle)&&(e.timeoutHandle=-1,wr(r)),Ya(e,n),null!==(r=e.finishedWork)&&ju(e,r,t));ou=!1}function ju(e,t,n){var r=e.firstBatch;if(null!==r&&r._expirationTime>=n&&(null===pu?pu=[r]:pu.push(r),r._defer))return e.finishedWork=t,void(e.expirationTime=0);e.finishedWork=null,e===gu?vu++:(gu=e,vu=0),i.unstable_runWithPriority(i.unstable_ImmediatePriority,function(){Ba(e,t)})}function Nu(e){null===iu&&a("246"),iu.expirationTime=0,lu||(lu=!0,cu=e)}function Mu(e,t){var n=su;su=!0;try{return e(t)}finally{(su=n)||ou||_u(1073741823,!1)}}function Au(e,t){if(su&&!fu){fu=!0;try{return e(t)}finally{fu=!1}}return e(t)}function Iu(e,t,n){su||ou||0===uu||(_u(uu,!1),uu=0);var r=su;su=!0;try{return i.unstable_runWithPriority(i.unstable_UserBlockingPriority,function(){return e(t,n)})}finally{(su=r)||ou||_u(1073741823,!1)}}function Uu(e,t,n,r,o){var i=t.current;e:if(n){t:{2===tn(n=n._reactInternalFiber)&&1===n.tag||a("170");var u=n;do{switch(u.tag){case 3:u=u.stateNode.context;break t;case 1:if(Ar(u.type)){u=u.stateNode.__reactInternalMemoizedMergedChildContext;break t}}u=u.return}while(null!==u);a("171"),u=void 0}if(1===n.tag){var l=n.type;if(Ar(l)){n=Lr(n,l,u);break e}}n=u}else n=Or;return null===t.context?t.context=n:t.pendingContext=n,t=o,(o=Xi(r)).payload={element:e},null!==(t=void 0===t?null:t)&&(o.callback=t),$a(),Ji(i,o),Ja(i,r),r}function Du(e,t,n,r){var o=t.current;return Uu(e,t,n,o=Ka(ku(),o),r)}function Lu(e){if(!(e=e.current).child)return null;switch(e.child.tag){case 5:default:return e.child.stateNode}}function Fu(e){var t=1073741822-25*(1+((1073741822-ku()+500)/25|0));t>=Pa&&(t=Pa-1),this._expirationTime=Pa=t,this._root=e,this._callbacks=this._next=null,this._hasChildren=this._didComplete=!1,this._children=null,this._defer=!0}function zu(){this._callbacks=null,this._didCommit=!1,this._onCommit=this._onCommit.bind(this)}function Wu(e,t,n){e={current:t=qr(3,null,null,t?3:0),containerInfo:e,pendingChildren:null,pingCache:null,earliestPendingTime:0,latestPendingTime:0,earliestSuspendedTime:0,latestSuspendedTime:0,latestPingedTime:0,didError:!1,pendingCommitExpirationTime:0,finishedWork:null,timeoutHandle:-1,context:null,pendingContext:null,hydrate:n,nextExpirationTimeToWorkOn:0,expirationTime:0,firstBatch:null,nextScheduledRoot:null},this._internalRoot=t.stateNode=e}function Hu(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function $u(e,t,n,r,o){var i=n._reactRootContainer;if(i){if("function"==typeof o){var a=o;o=function(){var e=Lu(i._internalRoot);a.call(e)}}null!=e?i.legacy_renderSubtreeIntoContainer(e,t,o):i.render(t,o)}else{if(i=n._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var n;n=e.lastChild;)e.removeChild(n);return new Wu(e,!1,t)}(n,r),"function"==typeof o){var u=o;o=function(){var e=Lu(i._internalRoot);u.call(e)}}Au(function(){null!=e?i.legacy_renderSubtreeIntoContainer(e,t,o):i.render(t,o)})}return Lu(i._internalRoot)}function Bu(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;return Hu(t)||a("200"),function(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:Qe,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}(e,t,null,n)}Pe=function(e,t,n){switch(t){case"input":if(kt(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var o=L(r);o||a("90"),$e(r),kt(r,o)}}}break;case"textarea":Gn(e,n);break;case"select":null!=(t=n.value)&&Qn(e,!!n.multiple,t,!1)}},Fu.prototype.render=function(e){this._defer||a("250"),this._hasChildren=!0,this._children=e;var t=this._root._internalRoot,n=this._expirationTime,r=new zu;return Uu(e,t,null,n,r._onCommit),r},Fu.prototype.then=function(e){if(this._didComplete)e();else{var t=this._callbacks;null===t&&(t=this._callbacks=[]),t.push(e)}},Fu.prototype.commit=function(){var e=this._root._internalRoot,t=e.firstBatch;if(this._defer&&null!==t||a("251"),this._hasChildren){var n=this._expirationTime;if(t!==this){this._hasChildren&&(n=this._expirationTime=t._expirationTime,this.render(this._children));for(var r=null,o=t;o!==this;)r=o,o=o._next;null===r&&a("251"),r._next=o._next,this._next=t,e.firstBatch=this}this._defer=!1,Ou(e,n),t=this._next,this._next=null,null!==(t=e.firstBatch=t)&&t._hasChildren&&t.render(t._children)}else this._next=null,this._defer=!1},Fu.prototype._onComplete=function(){if(!this._didComplete){this._didComplete=!0;var e=this._callbacks;if(null!==e)for(var t=0;t<e.length;t++)(0,e[t])()}},zu.prototype.then=function(e){if(this._didCommit)e();else{var t=this._callbacks;null===t&&(t=this._callbacks=[]),t.push(e)}},zu.prototype._onCommit=function(){if(!this._didCommit){this._didCommit=!0;var e=this._callbacks;if(null!==e)for(var t=0;t<e.length;t++){var n=e[t];"function"!=typeof n&&a("191",n),n()}}},Wu.prototype.render=function(e,t){var n=this._internalRoot,r=new zu;return null!==(t=void 0===t?null:t)&&r.then(t),Du(e,n,null,r._onCommit),r},Wu.prototype.unmount=function(e){var t=this._internalRoot,n=new zu;return null!==(e=void 0===e?null:e)&&n.then(e),Du(null,t,null,n._onCommit),n},Wu.prototype.legacy_renderSubtreeIntoContainer=function(e,t,n){var r=this._internalRoot,o=new zu;return null!==(n=void 0===n?null:n)&&o.then(n),Du(t,r,e,o._onCommit),o},Wu.prototype.createBatch=function(){var e=new Fu(this),t=e._expirationTime,n=this._internalRoot,r=n.firstBatch;if(null===r)n.firstBatch=e,e._next=null;else{for(n=null;null!==r&&r._expirationTime>=t;)n=r,r=r._next;e._next=r,null!==n&&(n._next=e)}return e},Ne=Mu,Me=Iu,Ae=function(){ou||0===uu||(_u(uu,!1),uu=0)};var qu={createPortal:Bu,findDOMNode:function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternalFiber;return void 0===t&&("function"==typeof e.render?a("188"):a("268",Object.keys(e))),e=null===(e=rn(t))?null:e.stateNode},hydrate:function(e,t,n){return Hu(t)||a("200"),$u(null,e,t,!0,n)},render:function(e,t,n){return Hu(t)||a("200"),$u(null,e,t,!1,n)},unstable_renderSubtreeIntoContainer:function(e,t,n,r){return Hu(n)||a("200"),(null==e||void 0===e._reactInternalFiber)&&a("38"),$u(e,t,n,!1,r)},unmountComponentAtNode:function(e){return Hu(e)||a("40"),!!e._reactRootContainer&&(Au(function(){$u(null,null,e,!1,function(){e._reactRootContainer=null})}),!0)},unstable_createPortal:function(){return Bu.apply(void 0,arguments)},unstable_batchedUpdates:Mu,unstable_interactiveUpdates:Iu,flushSync:function(e,t){ou&&a("187");var n=su;su=!0;try{return Za(e,t)}finally{su=n,_u(1073741823,!1)}},unstable_createRoot:function(e,t){return Hu(e)||a("299","unstable_createRoot"),new Wu(e,!0,null!=t&&!0===t.hydrate)},unstable_flushControlled:function(e){var t=su;su=!0;try{Za(e)}finally{(su=t)||ou||_u(1073741823,!1)}},__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{Events:[U,D,L,O.injectEventPluginsByName,g,B,function(e){P(e,$)},Re,je,_n,j]}};!function(e){var t=e.findFiberByHostInstance;(function(e){if("undefined"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)return!1;var t=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(t.isDisabled||!t.supportsFiber)return!0;try{var n=t.inject(e);Wr=$r(function(e){return t.onCommitFiberRoot(n,e)}),Hr=$r(function(e){return t.onCommitFiberUnmount(n,e)})}catch(e){}})(o({},e,{overrideProps:null,currentDispatcherRef:Be.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=rn(e))?null:e.stateNode},findFiberByHostInstance:function(e){return t?t(e):null}}))}({findFiberByHostInstance:I,bundleType:0,version:"16.8.4",rendererPackageName:"react-dom"});var Vu={default:qu},Yu=Vu&&qu||Vu;e.exports=Yu.default||Yu},function(e,t,n){"use strict";e.exports=n(30)},function(e,t,n){"use strict";(function(e){
/** @license React v0.13.4
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
Object.defineProperty(t,"__esModule",{value:!0});var n=null,r=!1,o=3,i=-1,a=-1,u=!1,l=!1;function c(){if(!u){var e=n.expirationTime;l?T():l=!0,k(p,e)}}function s(){var e=n,t=n.next;if(n===t)n=null;else{var r=n.previous;n=r.next=t,t.previous=r}e.next=e.previous=null,r=e.callback,t=e.expirationTime,e=e.priorityLevel;var i=o,u=a;o=e,a=t;try{var l=r()}finally{o=i,a=u}if("function"==typeof l)if(l={callback:l,priorityLevel:e,expirationTime:t,next:null,previous:null},null===n)n=l.next=l.previous=l;else{r=null,e=n;do{if(e.expirationTime>=t){r=e;break}e=e.next}while(e!==n);null===r?r=n:r===n&&(n=l,c()),(t=r.previous).next=r.previous=l,l.next=r,l.previous=t}}function f(){if(-1===i&&null!==n&&1===n.priorityLevel){u=!0;try{do{s()}while(null!==n&&1===n.priorityLevel)}finally{u=!1,null!==n?c():l=!1}}}function p(e){u=!0;var o=r;r=e;try{if(e)for(;null!==n;){var i=t.unstable_now();if(!(n.expirationTime<=i))break;do{s()}while(null!==n&&n.expirationTime<=i)}else if(null!==n)do{s()}while(null!==n&&!E())}finally{u=!1,r=o,null!==n?c():l=!1,f()}}var d,h,m=Date,y="function"==typeof setTimeout?setTimeout:void 0,v="function"==typeof clearTimeout?clearTimeout:void 0,g="function"==typeof requestAnimationFrame?requestAnimationFrame:void 0,b="function"==typeof cancelAnimationFrame?cancelAnimationFrame:void 0;function w(e){d=g(function(t){v(h),e(t)}),h=y(function(){b(d),e(t.unstable_now())},100)}if("object"==typeof performance&&"function"==typeof performance.now){var x=performance;t.unstable_now=function(){return x.now()}}else t.unstable_now=function(){return m.now()};var k,T,E,S=null;if("undefined"!=typeof window?S=window:void 0!==e&&(S=e),S&&S._schedMock){var P=S._schedMock;k=P[0],T=P[1],E=P[2],t.unstable_now=P[3]}else if("undefined"==typeof window||"function"!=typeof MessageChannel){var C=null,_=function(e){if(null!==C)try{C(e)}finally{C=null}};k=function(e){null!==C?setTimeout(k,0,e):(C=e,setTimeout(_,0,!1))},T=function(){C=null},E=function(){return!1}}else{"undefined"!=typeof console&&("function"!=typeof g&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills"),"function"!=typeof b&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills"));var O=null,R=!1,j=-1,N=!1,M=!1,A=0,I=33,U=33;E=function(){return A<=t.unstable_now()};var D=new MessageChannel,L=D.port2;D.port1.onmessage=function(){R=!1;var e=O,n=j;O=null,j=-1;var r=t.unstable_now(),o=!1;if(0>=A-r){if(!(-1!==n&&n<=r))return N||(N=!0,w(F)),O=e,void(j=n);o=!0}if(null!==e){M=!0;try{e(o)}finally{M=!1}}};var F=function(e){if(null!==O){w(F);var t=e-A+U;t<U&&I<U?(8>t&&(t=8),U=t<I?I:t):I=t,A=e+U,R||(R=!0,L.postMessage(void 0))}else N=!1};k=function(e,t){O=e,j=t,M||0>t?L.postMessage(void 0):N||(N=!0,w(F))},T=function(){O=null,R=!1,j=-1}}t.unstable_ImmediatePriority=1,t.unstable_UserBlockingPriority=2,t.unstable_NormalPriority=3,t.unstable_IdlePriority=5,t.unstable_LowPriority=4,t.unstable_runWithPriority=function(e,n){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var r=o,a=i;o=e,i=t.unstable_now();try{return n()}finally{o=r,i=a,f()}},t.unstable_next=function(e){switch(o){case 1:case 2:case 3:var n=3;break;default:n=o}var r=o,a=i;o=n,i=t.unstable_now();try{return e()}finally{o=r,i=a,f()}},t.unstable_scheduleCallback=function(e,r){var a=-1!==i?i:t.unstable_now();if("object"==typeof r&&null!==r&&"number"==typeof r.timeout)r=a+r.timeout;else switch(o){case 1:r=a+-1;break;case 2:r=a+250;break;case 5:r=a+1073741823;break;case 4:r=a+1e4;break;default:r=a+5e3}if(e={callback:e,priorityLevel:o,expirationTime:r,next:null,previous:null},null===n)n=e.next=e.previous=e,c();else{a=null;var u=n;do{if(u.expirationTime>r){a=u;break}u=u.next}while(u!==n);null===a?a=n:a===n&&(n=e,c()),(r=a.previous).next=a.previous=e,e.next=a,e.previous=r}return e},t.unstable_cancelCallback=function(e){var t=e.next;if(null!==t){if(t===e)n=null;else{e===n&&(n=t);var r=e.previous;r.next=t,t.previous=r}e.next=e.previous=null}},t.unstable_wrapCallback=function(e){var n=o;return function(){var r=o,a=i;o=n,i=t.unstable_now();try{return e.apply(this,arguments)}finally{o=r,i=a,f()}}},t.unstable_getCurrentPriorityLevel=function(){return o},t.unstable_shouldYield=function(){return!r&&(null!==n&&n.expirationTime<a||E())},t.unstable_continueExecution=function(){null!==n&&c()},t.unstable_pauseExecution=function(){},t.unstable_getFirstCallbackNode=function(){return n}}).call(this,n(19))},function(e,t,n){"use strict";var r=n(32);function o(){}function i(){}i.resetWarningCache=o,e.exports=function(){function e(e,t,n,o,i,a){if(a!==r){var u=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw u.name="Invariant Violation",u}}function t(){return e}e.isRequired=e;var n={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,elementType:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t,checkPropTypes:i,resetWarningCache:o};return n.PropTypes=n,n}},function(e,t,n){"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(e,t){e.exports=Array.isArray||function(e){return"[object Array]"==Object.prototype.toString.call(e)}},function(e,t,n){"use strict";
/** @license React v16.8.4
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */Object.defineProperty(t,"__esModule",{value:!0});var r="function"==typeof Symbol&&Symbol.for,o=r?Symbol.for("react.element"):60103,i=r?Symbol.for("react.portal"):60106,a=r?Symbol.for("react.fragment"):60107,u=r?Symbol.for("react.strict_mode"):60108,l=r?Symbol.for("react.profiler"):60114,c=r?Symbol.for("react.provider"):60109,s=r?Symbol.for("react.context"):60110,f=r?Symbol.for("react.async_mode"):60111,p=r?Symbol.for("react.concurrent_mode"):60111,d=r?Symbol.for("react.forward_ref"):60112,h=r?Symbol.for("react.suspense"):60113,m=r?Symbol.for("react.memo"):60115,y=r?Symbol.for("react.lazy"):60116;function v(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case o:switch(e=e.type){case f:case p:case a:case l:case u:case h:return e;default:switch(e=e&&e.$$typeof){case s:case d:case c:return e;default:return t}}case y:case m:case i:return t}}}function g(e){return v(e)===p}t.typeOf=v,t.AsyncMode=f,t.ConcurrentMode=p,t.ContextConsumer=s,t.ContextProvider=c,t.Element=o,t.ForwardRef=d,t.Fragment=a,t.Lazy=y,t.Memo=m,t.Portal=i,t.Profiler=l,t.StrictMode=u,t.Suspense=h,t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===a||e===p||e===l||e===u||e===h||"object"==typeof e&&null!==e&&(e.$$typeof===y||e.$$typeof===m||e.$$typeof===c||e.$$typeof===s||e.$$typeof===d)},t.isAsyncMode=function(e){return g(e)||v(e)===f},t.isConcurrentMode=g,t.isContextConsumer=function(e){return v(e)===s},t.isContextProvider=function(e){return v(e)===c},t.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===o},t.isForwardRef=function(e){return v(e)===d},t.isFragment=function(e){return v(e)===a},t.isLazy=function(e){return v(e)===y},t.isMemo=function(e){return v(e)===m},t.isPortal=function(e){return v(e)===i},t.isProfiler=function(e){return v(e)===l},t.isStrictMode=function(e){return v(e)===u},t.isSuspense=function(e){return v(e)===h}},function(e,t,n){"use strict";n.r(t);var r=n(24),o=n(4),i=n.n(o),a=n(1),u=n.n(a),l=n(0),c=n.n(l),s=n(5),f=n(11);function p(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var d=function(e){function t(){var n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,i=Array(o),a=0;a<o;a++)i[a]=arguments[a];return n=r=p(this,e.call.apply(e,[this].concat(i))),r.history=Object(s.b)(r.props),p(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.componentWillMount=function(){i()(!this.props.history,"<HashRouter> ignores the history prop. To use a custom history, use `import { Router }` instead of `import { HashRouter as Router }`.")},t.prototype.render=function(){return u.a.createElement(f.a,{history:this.history,children:this.props.children})},t}(u.a.Component);d.propTypes={basename:c.a.string,getUserConfirmation:c.a.func,hashType:c.a.oneOf(["hashbang","noslash","slash"]),children:c.a.node};var h=d,m=n(9),y=n(12);function v(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var g=function(e){function t(){var n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,i=Array(o),a=0;a<o;a++)i[a]=arguments[a];return n=r=v(this,e.call.apply(e,[this].concat(i))),r.history=Object(s.d)(r.props),v(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.componentWillMount=function(){i()(!this.props.history,"<MemoryRouter> ignores the history prop. To use a custom history, use `import { Router }` instead of `import { MemoryRouter as Router }`.")},t.prototype.render=function(){return u.a.createElement(y.a,{history:this.history,children:this.props.children})},t}(u.a.Component);g.propTypes={initialEntries:c.a.array,initialIndex:c.a.number,getUserConfirmation:c.a.func,keyLength:c.a.number,children:c.a.node};var b=g,w=n(13),x=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},k="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};var T=function(e){var t=e.to,n=e.exact,r=e.strict,o=e.location,i=e.activeClassName,a=e.className,l=e.activeStyle,c=e.style,s=e.isActive,f=e["aria-current"],p=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(e,["to","exact","strict","location","activeClassName","className","activeStyle","style","isActive","aria-current"]),d="object"===(void 0===t?"undefined":k(t))?t.pathname:t,h=d&&d.replace(/([.+*?=^!:${}()[\]|\/\\])/g,"\\$1");return u.a.createElement(w.a,{path:h,exact:n,strict:r,location:o,children:function(e){var n=e.location,r=e.match,o=!!(s?s(r,n):r);return u.a.createElement(m.a,x({to:t,className:o?[a,i].filter(function(e){return e}).join(" "):a,style:o?x({},c,l):c,"aria-current":o&&f||null},p))}})};T.propTypes={to:m.a.propTypes.to,exact:c.a.bool,strict:c.a.bool,location:c.a.object,activeClassName:c.a.string,className:c.a.string,activeStyle:c.a.object,style:c.a.object,isActive:c.a.func,"aria-current":c.a.oneOf(["page","step","location","date","time","true"])},T.defaultProps={activeClassName:"active","aria-current":"page"};var E=T,S=n(2),P=n.n(S);var C=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,e.apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.enable=function(e){this.unblock&&this.unblock(),this.unblock=this.context.router.history.block(e)},t.prototype.disable=function(){this.unblock&&(this.unblock(),this.unblock=null)},t.prototype.componentWillMount=function(){P()(this.context.router,"You should not use <Prompt> outside a <Router>"),this.props.when&&this.enable(this.props.message)},t.prototype.componentWillReceiveProps=function(e){e.when?this.props.when&&this.props.message===e.message||this.enable(e.message):this.disable()},t.prototype.componentWillUnmount=function(){this.disable()},t.prototype.render=function(){return null},t}(u.a.Component);C.propTypes={when:c.a.bool,message:c.a.oneOfType([c.a.func,c.a.string]).isRequired},C.defaultProps={when:!0},C.contextTypes={router:c.a.shape({history:c.a.shape({block:c.a.func.isRequired}).isRequired}).isRequired};var _=C,O=n(15),R=n.n(O),j={},N=0,M=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"/",t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return"/"===e?e:function(e){var t=e,n=j[t]||(j[t]={});if(n[e])return n[e];var r=R.a.compile(e);return N<1e4&&(n[e]=r,N++),r}(e)(t,{pretty:!0})},A=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};var I=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,e.apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.isStatic=function(){return this.context.router&&this.context.router.staticContext},t.prototype.componentWillMount=function(){P()(this.context.router,"You should not use <Redirect> outside a <Router>"),this.isStatic()&&this.perform()},t.prototype.componentDidMount=function(){this.isStatic()||this.perform()},t.prototype.componentDidUpdate=function(e){var t=Object(s.c)(e.to),n=Object(s.c)(this.props.to);Object(s.f)(t,n)?i()(!1,"You tried to redirect to the same route you're currently on: \""+n.pathname+n.search+'"'):this.perform()},t.prototype.computeTo=function(e){var t=e.computedMatch,n=e.to;return t?"string"==typeof n?M(n,t.params):A({},n,{pathname:M(n.pathname,t.params)}):n},t.prototype.perform=function(){var e=this.context.router.history,t=this.props.push,n=this.computeTo(this.props);t?e.push(n):e.replace(n)},t.prototype.render=function(){return null},t}(u.a.Component);I.propTypes={computedMatch:c.a.object,push:c.a.bool,from:c.a.string,to:c.a.oneOfType([c.a.string,c.a.object]).isRequired},I.defaultProps={push:!1},I.contextTypes={router:c.a.shape({history:c.a.shape({push:c.a.func.isRequired,replace:c.a.func.isRequired}).isRequired,staticContext:c.a.object}).isRequired};var U=I,D=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};function L(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var F=function(e){return"/"===e.charAt(0)?e:"/"+e},z=function(e,t){return e?D({},t,{pathname:F(e)+t.pathname}):t},W=function(e,t){if(!e)return t;var n=F(e);return 0!==t.pathname.indexOf(n)?t:D({},t,{pathname:t.pathname.substr(n.length)})},H=function(e){return"string"==typeof e?e:Object(s.e)(e)},$=function(e){return function(){P()(!1,"You cannot %s with <StaticRouter>",e)}},B=function(){},q=function(e){function t(){var n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,i=Array(o),a=0;a<o;a++)i[a]=arguments[a];return n=r=L(this,e.call.apply(e,[this].concat(i))),r.createHref=function(e){return F(r.props.basename+H(e))},r.handlePush=function(e){var t=r.props,n=t.basename,o=t.context;o.action="PUSH",o.location=z(n,Object(s.c)(e)),o.url=H(o.location)},r.handleReplace=function(e){var t=r.props,n=t.basename,o=t.context;o.action="REPLACE",o.location=z(n,Object(s.c)(e)),o.url=H(o.location)},r.handleListen=function(){return B},r.handleBlock=function(){return B},L(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.getChildContext=function(){return{router:{staticContext:this.props.context}}},t.prototype.componentWillMount=function(){i()(!this.props.history,"<StaticRouter> ignores the history prop. To use a custom history, use `import { Router }` instead of `import { StaticRouter as Router }`.")},t.prototype.render=function(){var e=this.props,t=e.basename,n=(e.context,e.location),r=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(e,["basename","context","location"]),o={createHref:this.createHref,action:"POP",location:W(t,Object(s.c)(n)),push:this.handlePush,replace:this.handleReplace,go:$("go"),goBack:$("goBack"),goForward:$("goForward"),listen:this.handleListen,block:this.handleBlock};return u.a.createElement(y.a,D({},r,{history:o}))},t}(u.a.Component);q.propTypes={basename:c.a.string,context:c.a.object.isRequired,location:c.a.oneOfType([c.a.string,c.a.object])},q.defaultProps={basename:"",location:"/"},q.childContextTypes={router:c.a.object.isRequired};var V=q,Y=n(25),Q=M,K=n(7).a,X=n(46),G=n.n(X),J=n(16),Z=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};var ee=function(e){var t=function(t){var n=t.wrappedComponentRef,r=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(t,["wrappedComponentRef"]);return u.a.createElement(J.a,{children:function(t){return u.a.createElement(e,Z({},r,t,{ref:n}))}})};return t.displayName="withRouter("+(e.displayName||e.name)+")",t.WrappedComponent=e,t.propTypes={wrappedComponentRef:c.a.func},G()(t,e)};n.d(t,"BrowserRouter",function(){return r.a}),n.d(t,"HashRouter",function(){return h}),n.d(t,"Link",function(){return m.a}),n.d(t,"MemoryRouter",function(){return b}),n.d(t,"NavLink",function(){return E}),n.d(t,"Prompt",function(){return _}),n.d(t,"Redirect",function(){return U}),n.d(t,"Route",function(){return w.a}),n.d(t,"Router",function(){return f.a}),n.d(t,"StaticRouter",function(){return V}),n.d(t,"Switch",function(){return Y.a}),n.d(t,"generatePath",function(){return Q}),n.d(t,"matchPath",function(){return K}),n.d(t,"withRouter",function(){return ee})},,,,,,,,,,,function(e,t,n){"use strict";var r={childContextTypes:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},o={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},i=Object.defineProperty,a=Object.getOwnPropertyNames,u=Object.getOwnPropertySymbols,l=Object.getOwnPropertyDescriptor,c=Object.getPrototypeOf,s=c&&c(Object);e.exports=function e(t,n,f){if("string"!=typeof n){if(s){var p=c(n);p&&p!==s&&e(t,p,f)}var d=a(n);u&&(d=d.concat(u(n)));for(var h=0;h<d.length;++h){var m=d[h];if(!(r[m]||o[m]||f&&f[m])){var y=l(n,m);try{i(t,m,y)}catch(e){}}}return t}return t}},,,,function(e,t,n){n(1),n(23),n(22),n(35),e.exports=n(8)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9pbnZhcmlhbnQvYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaGlzdG9yeS9ub2RlX21vZHVsZXMvd2FybmluZy9icm93c2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy93YXJuaW5nL3dhcm5pbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Jlc29sdmUtcGF0aG5hbWUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3ZhbHVlLWVxdWFsL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9oaXN0b3J5L2VzL1BhdGhVdGlscy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaGlzdG9yeS9lcy9Mb2NhdGlvblV0aWxzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9oaXN0b3J5L2VzL2NyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9oaXN0b3J5L2VzL0RPTVV0aWxzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9oaXN0b3J5L2VzL2NyZWF0ZUJyb3dzZXJIaXN0b3J5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9oaXN0b3J5L2VzL2NyZWF0ZUhhc2hIaXN0b3J5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9oaXN0b3J5L2VzL2NyZWF0ZU1lbW9yeUhpc3RvcnkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2hpc3RvcnkvZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9lcy9tYXRjaFBhdGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlZHV4L2VzL3JlZHV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXItZG9tL2VzL0xpbmsuanMiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL2hhcm1vbnktbW9kdWxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXItZG9tL2VzL1JvdXRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL2VzL1JvdXRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyLWRvbS9lcy9Sb3V0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtaXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9ub2RlX21vZHVsZXMvcGF0aC10by1yZWdleHAvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9lcy9Sb3V0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3ltYm9sLW9ic2VydmFibGUvZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzL2Rpc3QvaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3MuY2pzLmpzIiwid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL29iamVjdC1hc3NpZ24vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N5bWJvbC1vYnNlcnZhYmxlL2VzL3BvbnlmaWxsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9jb21wb25lbnRzL0NvbnRleHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2NvbXBvbmVudHMvUHJvdmlkZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvY29tcG9uZW50cy9jb25uZWN0QWR2YW5jZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL3V0aWxzL3NoYWxsb3dFcXVhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvY29ubmVjdC93cmFwTWFwVG9Qcm9wcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvY29ubmVjdC9tYXBEaXNwYXRjaFRvUHJvcHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2Nvbm5lY3QvbWFwU3RhdGVUb1Byb3BzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9jb25uZWN0L21lcmdlUHJvcHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2Nvbm5lY3Qvc2VsZWN0b3JGYWN0b3J5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9jb25uZWN0L2Nvbm5lY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXItZG9tL2VzL0Jyb3dzZXJSb3V0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9lcy9Td2l0Y2guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci1kb20vZXMvU3dpdGNoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC9janMvcmVhY3QucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9janMvcmVhY3QtZG9tLnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zY2hlZHVsZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NjaGVkdWxlci9janMvc2NoZWR1bGVyLnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2ZhY3RvcnlXaXRoVGhyb3dpbmdTaGltcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9saWIvUmVhY3RQcm9wVHlwZXNTZWNyZXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9ub2RlX21vZHVsZXMvaXNhcnJheS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtaXMvY2pzL3JlYWN0LWlzLnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXItZG9tL2VzL0hhc2hSb3V0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9lcy9NZW1vcnlSb3V0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci1kb20vZXMvTWVtb3J5Um91dGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXItZG9tL2VzL05hdkxpbmsuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9lcy9Qcm9tcHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci1kb20vZXMvUHJvbXB0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvZXMvZ2VuZXJhdGVQYXRoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvZXMvUmVkaXJlY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci1kb20vZXMvUmVkaXJlY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9lcy9TdGF0aWNSb3V0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci1kb20vZXMvU3RhdGljUm91dGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXItZG9tL2VzL2dlbmVyYXRlUGF0aC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyLWRvbS9lcy9tYXRjaFBhdGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9lcy93aXRoUm91dGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXItZG9tL2VzL3dpdGhSb3V0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci1kb20vZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9ub2RlX21vZHVsZXMvaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3MvZGlzdC9ob2lzdC1ub24tcmVhY3Qtc3RhdGljcy5janMuanMiXSwibmFtZXMiOlsiaW5zdGFsbGVkTW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImV4cG9ydHMiLCJtb2R1bGUiLCJpIiwibCIsIm1vZHVsZXMiLCJjYWxsIiwibSIsImMiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJyIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJ2YWx1ZSIsInQiLCJtb2RlIiwiX19lc01vZHVsZSIsIm5zIiwiY3JlYXRlIiwia2V5IiwiYmluZCIsIm4iLCJvYmplY3QiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInMiLCJjb25kaXRpb24iLCJmb3JtYXQiLCJhIiwiYiIsImUiLCJmIiwiZXJyb3IiLCJ1bmRlZmluZWQiLCJFcnJvciIsImFyZ3MiLCJhcmdJbmRleCIsInJlcGxhY2UiLCJmcmFtZXNUb1BvcCIsIndhcm5pbmciLCJpc0Fic29sdXRlIiwicGF0aG5hbWUiLCJjaGFyQXQiLCJzcGxpY2VPbmUiLCJsaXN0IiwiaW5kZXgiLCJrIiwibGVuZ3RoIiwicG9wIiwicmVzb2x2ZV9wYXRobmFtZSIsInRvIiwiZnJvbSIsImFyZ3VtZW50cyIsInRvUGFydHMiLCJzcGxpdCIsImZyb21QYXJ0cyIsImlzVG9BYnMiLCJpc0Zyb21BYnMiLCJtdXN0RW5kQWJzIiwiY29uY2F0IiwiaGFzVHJhaWxpbmdTbGFzaCIsImxhc3QiLCJ1cCIsInBhcnQiLCJ1bnNoaWZ0IiwicmVzdWx0Iiwiam9pbiIsInN1YnN0ciIsIl90eXBlb2YiLCJpdGVyYXRvciIsIm9iaiIsImNvbnN0cnVjdG9yIiwidmFsdWVfZXF1YWwiLCJ2YWx1ZUVxdWFsIiwiQXJyYXkiLCJpc0FycmF5IiwiZXZlcnkiLCJpdGVtIiwiYVR5cGUiLCJhVmFsdWUiLCJ2YWx1ZU9mIiwiYlZhbHVlIiwiYUtleXMiLCJrZXlzIiwiYktleXMiLCJhZGRMZWFkaW5nU2xhc2giLCJwYXRoIiwic3RyaXBMZWFkaW5nU2xhc2giLCJoYXNCYXNlbmFtZSIsInByZWZpeCIsIlJlZ0V4cCIsInRlc3QiLCJzdHJpcEJhc2VuYW1lIiwic3RyaXBUcmFpbGluZ1NsYXNoIiwic2xpY2UiLCJjcmVhdGVQYXRoIiwibG9jYXRpb24iLCJzZWFyY2giLCJoYXNoIiwiX2V4dGVuZHMiLCJhc3NpZ24iLCJ0YXJnZXQiLCJzb3VyY2UiLCJMb2NhdGlvblV0aWxzX2NyZWF0ZUxvY2F0aW9uIiwic3RhdGUiLCJjdXJyZW50TG9jYXRpb24iLCJoYXNoSW5kZXgiLCJpbmRleE9mIiwic2VhcmNoSW5kZXgiLCJwYXJzZVBhdGgiLCJkZWNvZGVVUkkiLCJVUklFcnJvciIsIkxvY2F0aW9uVXRpbHNfbG9jYXRpb25zQXJlRXF1YWwiLCJlc19jcmVhdGVUcmFuc2l0aW9uTWFuYWdlciIsInByb21wdCIsImxpc3RlbmVycyIsInNldFByb21wdCIsIm5leHRQcm9tcHQiLCJicm93c2VyX2RlZmF1bHQiLCJjb25maXJtVHJhbnNpdGlvblRvIiwiYWN0aW9uIiwiZ2V0VXNlckNvbmZpcm1hdGlvbiIsImNhbGxiYWNrIiwiYXBwZW5kTGlzdGVuZXIiLCJmbiIsImlzQWN0aXZlIiwibGlzdGVuZXIiLCJhcHBseSIsInB1c2giLCJmaWx0ZXIiLCJub3RpZnlMaXN0ZW5lcnMiLCJfbGVuIiwiX2tleSIsImZvckVhY2giLCJjYW5Vc2VET00iLCJ3aW5kb3ciLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJhZGRFdmVudExpc3RlbmVyIiwibm9kZSIsImV2ZW50IiwiYXR0YWNoRXZlbnQiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiZGV0YWNoRXZlbnQiLCJnZXRDb25maXJtYXRpb24iLCJtZXNzYWdlIiwiY29uZmlybSIsImNyZWF0ZUJyb3dzZXJIaXN0b3J5X3R5cGVvZiIsImNyZWF0ZUJyb3dzZXJIaXN0b3J5X2V4dGVuZHMiLCJnZXRIaXN0b3J5U3RhdGUiLCJoaXN0b3J5IiwiZXNfY3JlYXRlQnJvd3Nlckhpc3RvcnkiLCJwcm9wcyIsImludmFyaWFudF9icm93c2VyX2RlZmF1bHQiLCJ1YSIsImdsb2JhbEhpc3RvcnkiLCJjYW5Vc2VIaXN0b3J5IiwibmF2aWdhdG9yIiwidXNlckFnZW50IiwibmVlZHNIYXNoQ2hhbmdlTGlzdGVuZXIiLCJfcHJvcHMkZm9yY2VSZWZyZXNoIiwiZm9yY2VSZWZyZXNoIiwiX3Byb3BzJGdldFVzZXJDb25maXJtIiwiX3Byb3BzJGtleUxlbmd0aCIsImtleUxlbmd0aCIsImJhc2VuYW1lIiwiZ2V0RE9NTG9jYXRpb24iLCJoaXN0b3J5U3RhdGUiLCJfcmVmIiwiX3dpbmRvdyRsb2NhdGlvbiIsImNyZWF0ZUtleSIsIk1hdGgiLCJyYW5kb20iLCJ0b1N0cmluZyIsInRyYW5zaXRpb25NYW5hZ2VyIiwic2V0U3RhdGUiLCJuZXh0U3RhdGUiLCJoYW5kbGVQb3BTdGF0ZSIsImlzRXh0cmFuZW91c1BvcHN0YXRlRXZlbnQiLCJoYW5kbGVQb3AiLCJoYW5kbGVIYXNoQ2hhbmdlIiwiZm9yY2VOZXh0UG9wIiwib2siLCJyZXZlcnRQb3AiLCJmcm9tTG9jYXRpb24iLCJ0b0xvY2F0aW9uIiwidG9JbmRleCIsImFsbEtleXMiLCJmcm9tSW5kZXgiLCJkZWx0YSIsImdvIiwiaW5pdGlhbExvY2F0aW9uIiwiY3JlYXRlSHJlZiIsImxpc3RlbmVyQ291bnQiLCJjaGVja0RPTUxpc3RlbmVycyIsImlzQmxvY2tlZCIsImhyZWYiLCJwdXNoU3RhdGUiLCJwcmV2SW5kZXgiLCJuZXh0S2V5cyIsInJlcGxhY2VTdGF0ZSIsImdvQmFjayIsImdvRm9yd2FyZCIsImJsb2NrIiwidW5ibG9jayIsImxpc3RlbiIsInVubGlzdGVuIiwiY3JlYXRlSGFzaEhpc3RvcnlfZXh0ZW5kcyIsIkhhc2hQYXRoQ29kZXJzIiwiaGFzaGJhbmciLCJlbmNvZGVQYXRoIiwiZGVjb2RlUGF0aCIsIm5vc2xhc2giLCJzbGFzaCIsImdldEhhc2hQYXRoIiwic3Vic3RyaW5nIiwicmVwbGFjZUhhc2hQYXRoIiwiZXNfY3JlYXRlSGFzaEhpc3RvcnkiLCJjYW5Hb1dpdGhvdXRSZWxvYWQiLCJfcHJvcHMkaGFzaFR5cGUiLCJoYXNoVHlwZSIsIl9IYXNoUGF0aENvZGVycyRoYXNoVCIsImlnbm9yZVBhdGgiLCJlbmNvZGVkUGF0aCIsInByZXZMb2NhdGlvbiIsImFsbFBhdGhzIiwibGFzdEluZGV4T2YiLCJwdXNoSGFzaFBhdGgiLCJuZXh0UGF0aHMiLCJjcmVhdGVNZW1vcnlIaXN0b3J5X3R5cGVvZiIsImNyZWF0ZU1lbW9yeUhpc3RvcnlfZXh0ZW5kcyIsImNsYW1wIiwibG93ZXJCb3VuZCIsInVwcGVyQm91bmQiLCJtaW4iLCJtYXgiLCJlc19jcmVhdGVNZW1vcnlIaXN0b3J5IiwiX3Byb3BzJGluaXRpYWxFbnRyaWVzIiwiaW5pdGlhbEVudHJpZXMiLCJfcHJvcHMkaW5pdGlhbEluZGV4IiwiaW5pdGlhbEluZGV4IiwiZW50cmllcyIsIm1hcCIsImVudHJ5IiwibmV4dEluZGV4IiwibmV4dEVudHJpZXMiLCJzcGxpY2UiLCJjYW5HbyIsIl9fd2VicGFja19leHBvcnRzX18iLCJwYXRoX3RvX3JlZ2V4cF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fIiwicGF0aF90b19yZWdleHBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX19kZWZhdWx0IiwicGF0dGVybkNhY2hlIiwiY2FjaGVDb3VudCIsIm9wdGlvbnMiLCJwYXJlbnQiLCJfb3B0aW9ucyIsIl9vcHRpb25zJGV4YWN0IiwiZXhhY3QiLCJfb3B0aW9ucyRzdHJpY3QiLCJzdHJpY3QiLCJfb3B0aW9ucyRzZW5zaXRpdmUiLCJzZW5zaXRpdmUiLCJfY29tcGlsZVBhdGgiLCJwYXR0ZXJuIiwiY2FjaGVLZXkiLCJlbmQiLCJjYWNoZSIsImNvbXBpbGVkUGF0dGVybiIsInJlIiwiY29tcGlsZVBhdGgiLCJtYXRjaCIsImV4ZWMiLCJ1cmwiLCJ2YWx1ZXMiLCJpc0V4YWN0IiwicGFyYW1zIiwicmVkdWNlIiwibWVtbyIsImNyZWF0ZVN0b3JlIiwiY29tYmluZVJlZHVjZXJzIiwiYmluZEFjdGlvbkNyZWF0b3JzIiwiYXBwbHlNaWRkbGV3YXJlIiwiY29tcG9zZSIsIkFjdGlvblR5cGVzIiwic3ltYm9sX29ic2VydmFibGVfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyIsInJhbmRvbVN0cmluZyIsIklOSVQiLCJSRVBMQUNFIiwiUFJPQkVfVU5LTk9XTl9BQ1RJT04iLCJpc1BsYWluT2JqZWN0IiwicHJvdG8iLCJnZXRQcm90b3R5cGVPZiIsInJlZHVjZXIiLCJwcmVsb2FkZWRTdGF0ZSIsImVuaGFuY2VyIiwiX3JlZjIiLCJjdXJyZW50UmVkdWNlciIsImN1cnJlbnRTdGF0ZSIsImN1cnJlbnRMaXN0ZW5lcnMiLCJuZXh0TGlzdGVuZXJzIiwiaXNEaXNwYXRjaGluZyIsImVuc3VyZUNhbk11dGF0ZU5leHRMaXN0ZW5lcnMiLCJnZXRTdGF0ZSIsInN1YnNjcmliZSIsImlzU3Vic2NyaWJlZCIsImRpc3BhdGNoIiwidHlwZSIsInJlcGxhY2VSZWR1Y2VyIiwibmV4dFJlZHVjZXIiLCJvdXRlclN1YnNjcmliZSIsIm9ic2VydmVyIiwiVHlwZUVycm9yIiwib2JzZXJ2ZVN0YXRlIiwibmV4dCIsInVuc3Vic2NyaWJlIiwidGhpcyIsImdldFVuZGVmaW5lZFN0YXRlRXJyb3JNZXNzYWdlIiwiYWN0aW9uVHlwZSIsIlN0cmluZyIsInJlZHVjZXJzIiwicmVkdWNlcktleXMiLCJmaW5hbFJlZHVjZXJzIiwic2hhcGVBc3NlcnRpb25FcnJvciIsImZpbmFsUmVkdWNlcktleXMiLCJhc3NlcnRSZWR1Y2VyU2hhcGUiLCJoYXNDaGFuZ2VkIiwiX2kiLCJwcmV2aW91c1N0YXRlRm9yS2V5IiwibmV4dFN0YXRlRm9yS2V5IiwiZXJyb3JNZXNzYWdlIiwiYmluZEFjdGlvbkNyZWF0b3IiLCJhY3Rpb25DcmVhdG9yIiwiYWN0aW9uQ3JlYXRvcnMiLCJib3VuZEFjdGlvbkNyZWF0b3JzIiwiX2RlZmluZVByb3BlcnR5IiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJmdW5jcyIsImFyZyIsIm1pZGRsZXdhcmVzIiwic3RvcmUiLCJfZGlzcGF0Y2giLCJtaWRkbGV3YXJlQVBJIiwiY2hhaW4iLCJtaWRkbGV3YXJlIiwib3duS2V5cyIsImdldE93blByb3BlcnR5U3ltYm9scyIsInN5bSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIl9vYmplY3RTcHJlYWQiLCJyZWFjdF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fIiwicmVhY3RfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX19kZWZhdWx0IiwicHJvcF90eXBlc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fIiwicHJvcF90eXBlc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fX2RlZmF1bHQiLCJpbnZhcmlhbnRfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXyIsImludmFyaWFudF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fX2RlZmF1bHQiLCJoaXN0b3J5X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX18iLCJfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsInNlbGYiLCJSZWZlcmVuY2VFcnJvciIsImlzTW9kaWZpZWRFdmVudCIsIm1ldGFLZXkiLCJhbHRLZXkiLCJjdHJsS2V5Iiwic2hpZnRLZXkiLCJMaW5rIiwiX1JlYWN0JENvbXBvbmVudCIsIl90ZW1wIiwiX3RoaXMiLCJpbnN0YW5jZSIsIkNvbnN0cnVjdG9yIiwiX2NsYXNzQ2FsbENoZWNrIiwiaGFuZGxlQ2xpY2siLCJvbkNsaWNrIiwiZGVmYXVsdFByZXZlbnRlZCIsImJ1dHRvbiIsInByZXZlbnREZWZhdWx0IiwiY29udGV4dCIsInJvdXRlciIsIl90aGlzJHByb3BzIiwic3ViQ2xhc3MiLCJzdXBlckNsYXNzIiwic2V0UHJvdG90eXBlT2YiLCJfX3Byb3RvX18iLCJfaW5oZXJpdHMiLCJyZW5kZXIiLCJfcHJvcHMiLCJpbm5lclJlZiIsIl9vYmplY3RXaXRob3V0UHJvcGVydGllcyIsInJlZiIsIkNvbXBvbmVudCIsInByb3BUeXBlcyIsImZ1bmMiLCJzdHJpbmciLCJib29sIiwib25lT2ZUeXBlIiwiaXNSZXF1aXJlZCIsImRlZmF1bHRQcm9wcyIsImNvbnRleHRUeXBlcyIsInNoYXBlIiwib3JpZ2luYWxNb2R1bGUiLCJ3ZWJwYWNrUG9seWZpbGwiLCJjaGlsZHJlbiIsInJlYWN0X3JvdXRlcl9lc19Sb3V0ZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyIsIndhcm5pbmdfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyIsIndhcm5pbmdfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX19kZWZhdWx0IiwiaW52YXJpYW50X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18iLCJpbnZhcmlhbnRfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX19kZWZhdWx0IiwicmVhY3RfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXyIsInJlYWN0X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19fZGVmYXVsdCIsInByb3BfdHlwZXNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfXyIsInByb3BfdHlwZXNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfX19kZWZhdWx0IiwiUm91dGVyIiwiY29tcHV0ZU1hdGNoIiwiZ2V0Q2hpbGRDb250ZXh0Iiwicm91dGUiLCJjb21wb25lbnRXaWxsTW91bnQiLCJfdGhpczIiLCJDaGlsZHJlbiIsImNvdW50IiwiY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyIsIm5leHRQcm9wcyIsImNvbXBvbmVudFdpbGxVbm1vdW50Iiwib25seSIsImNoaWxkQ29udGV4dFR5cGVzIiwicmVhY3Rfcm91dGVyX2VzX1JvdXRlX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18iLCJpc2FycmF5IiwicGF0aFRvUmVnZXhwIiwicGFyc2UiLCJjb21waWxlIiwic3RyIiwidG9rZW5zVG9GdW5jdGlvbiIsInRva2Vuc1RvUmVnRXhwIiwiUEFUSF9SRUdFWFAiLCJyZXMiLCJ0b2tlbnMiLCJkZWZhdWx0RGVsaW1pdGVyIiwiZGVsaW1pdGVyIiwiZXNjYXBlZCIsIm9mZnNldCIsImNhcHR1cmUiLCJncm91cCIsIm1vZGlmaWVyIiwiYXN0ZXJpc2siLCJwYXJ0aWFsIiwicmVwZWF0Iiwib3B0aW9uYWwiLCJlc2NhcGVHcm91cCIsImVzY2FwZVN0cmluZyIsImVuY29kZVVSSUNvbXBvbmVudFByZXR0eSIsImVuY29kZVVSSSIsImNoYXJDb2RlQXQiLCJ0b1VwcGVyQ2FzZSIsIm1hdGNoZXMiLCJvcHRzIiwiZGF0YSIsImVuY29kZSIsInByZXR0eSIsImVuY29kZVVSSUNvbXBvbmVudCIsInRva2VuIiwic2VnbWVudCIsIkpTT04iLCJzdHJpbmdpZnkiLCJqIiwiYXR0YWNoS2V5cyIsImZsYWdzIiwiZW5kc1dpdGhEZWxpbWl0ZXIiLCJncm91cHMiLCJyZWdleHBUb1JlZ2V4cCIsInBhcnRzIiwiYXJyYXlUb1JlZ2V4cCIsInN0cmluZ1RvUmVnZXhwIiwiX21hdGNoUGF0aF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fIiwiaXNFbXB0eUNoaWxkcmVuIiwiUm91dGUiLCJjb21wdXRlZE1hdGNoIiwiY29tcG9uZW50IiwibmV4dENvbnRleHQiLCJfY29udGV4dCRyb3V0ZXIiLCJzdGF0aWNDb250ZXh0IiwiZ2xvYmFsIiwicm9vdCIsIl9wb255ZmlsbF9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fIiwiUmVhY3RJcyIsIlJFQUNUX1NUQVRJQ1MiLCJjb250ZXh0VHlwZSIsImRpc3BsYXlOYW1lIiwiZ2V0RGVmYXVsdFByb3BzIiwiZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yIiwiZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzIiwibWl4aW5zIiwiS05PV05fU1RBVElDUyIsImNhbGxlciIsImNhbGxlZSIsImFyaXR5IiwiTUVNT19TVEFUSUNTIiwiJCR0eXBlb2YiLCJjb21wYXJlIiwiVFlQRV9TVEFUSUNTIiwiZ2V0U3RhdGljcyIsImlzTWVtbyIsIkZvcndhcmRSZWYiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwib2JqZWN0UHJvdG90eXBlIiwiaG9pc3ROb25SZWFjdFN0YXRpY3MiLCJ0YXJnZXRDb21wb25lbnQiLCJzb3VyY2VDb21wb25lbnQiLCJibGFja2xpc3QiLCJpbmhlcml0ZWRDb21wb25lbnQiLCJ0YXJnZXRTdGF0aWNzIiwic291cmNlU3RhdGljcyIsImRlc2NyaXB0b3IiLCJnIiwiRnVuY3Rpb24iLCJwcm9wSXNFbnVtZXJhYmxlIiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJ0ZXN0MSIsInRlc3QyIiwiZnJvbUNoYXJDb2RlIiwidGVzdDMiLCJsZXR0ZXIiLCJlcnIiLCJzaG91bGRVc2VOYXRpdmUiLCJzeW1ib2xzIiwidmFsIiwidG9PYmplY3QiLCJzeW1ib2xPYnNlcnZhYmxlUG9ueWZpbGwiLCJvYnNlcnZhYmxlIiwiY2hlY2tEQ0UiLCJfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18iLCJjb25zb2xlIiwiX2luaGVyaXRzTG9vc2UiLCJSZWFjdFJlZHV4Q29udGV4dCIsInJlYWN0X2RlZmF1bHQiLCJjcmVhdGVDb250ZXh0IiwiUHJvdmlkZXJfUHJvdmlkZXIiLCJfQ29tcG9uZW50IiwiUHJvdmlkZXIiLCJzdG9yZVN0YXRlIiwiX3Byb3RvIiwiY29tcG9uZW50RGlkTW91bnQiLCJfaXNNb3VudGVkIiwiY29tcG9uZW50RGlkVXBkYXRlIiwicHJldlByb3BzIiwibmV3U3RvcmVTdGF0ZSIsInByb3ZpZGVyU3RhdGUiLCJwb3N0TW91bnRTdG9yZVN0YXRlIiwiQ29udGV4dCIsInJlYWN0IiwicHJvcF90eXBlc19kZWZhdWx0IiwiYW55IiwiY29tcG9uZW50c19Qcm92aWRlciIsIl9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIiwiZXhjbHVkZWQiLCJzb3VyY2VLZXlzIiwiY29ubmVjdEFkdmFuY2VkIiwic2VsZWN0b3JGYWN0b3J5IiwiX3JlZjIkZ2V0RGlzcGxheU5hbWUiLCJnZXREaXNwbGF5TmFtZSIsIl9yZWYyJG1ldGhvZE5hbWUiLCJtZXRob2ROYW1lIiwiX3JlZjIkcmVuZGVyQ291bnRQcm9wIiwicmVuZGVyQ291bnRQcm9wIiwiX3JlZjIkc2hvdWxkSGFuZGxlU3RhIiwic2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzIiwiX3JlZjIkc3RvcmVLZXkiLCJzdG9yZUtleSIsIl9yZWYyJHdpdGhSZWYiLCJ3aXRoUmVmIiwiX3JlZjIkZm9yd2FyZFJlZiIsImZvcndhcmRSZWYiLCJfcmVmMiRjb250ZXh0IiwiY29ubmVjdE9wdGlvbnMiLCJjdXN0b21TdG9yZVdhcm5pbmdNZXNzYWdlIiwiV3JhcHBlZENvbXBvbmVudCIsIndyYXBwZWRDb21wb25lbnROYW1lIiwic2VsZWN0b3JGYWN0b3J5T3B0aW9ucyIsInB1cmUiLCJPdXRlckJhc2VDb21wb25lbnQiLCJDb25uZWN0IiwiX091dGVyQmFzZUNvbXBvbmVudCIsImxhc3RQcm9wcyIsImxhc3RTdGF0ZSIsImxhc3REZXJpdmVkUHJvcHMiLCJsYXN0U3RvcmUiLCJsYXN0U2VsZWN0b3JGYWN0b3J5T3B0aW9ucyIsInNvdXJjZVNlbGVjdG9yIiwibGFzdENoaWxkUHJvcHMiLCJsYXN0Rm9yd2FyZFJlZiIsImxhc3RDaGlsZEVsZW1lbnQiLCJsYXN0Q29tcG9uZW50Iiwid3JhcHBlclByb3BzIiwic2VsZWN0RGVyaXZlZFByb3BzIiwic2VsZWN0Q2hpbGRFbGVtZW50IiwiY2hpbGRQcm9wcyIsImluZGlyZWN0UmVuZGVyV3JhcHBlZENvbXBvbmVudCIsIl9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQiLCJyZW5kZXJXcmFwcGVkQ29tcG9uZW50IiwiZm9yd2FyZGVkUmVmIiwiZGVyaXZlZFByb3BzIiwiQ29udGV4dFRvVXNlIiwiQ29uc3VtZXIiLCJyZWFjdF9pcyIsImZvcndhcmRlZCIsImhvaXN0X25vbl9yZWFjdF9zdGF0aWNzX2Nqc19kZWZhdWx0IiwiaGFzT3duIiwiaXMiLCJ4IiwieSIsInNoYWxsb3dFcXVhbCIsIm9iakEiLCJvYmpCIiwia2V5c0EiLCJrZXlzQiIsIndyYXBNYXBUb1Byb3BzQ29uc3RhbnQiLCJnZXRDb25zdGFudCIsImNvbnN0YW50IiwiY29uc3RhbnRTZWxlY3RvciIsImRlcGVuZHNPbk93blByb3BzIiwiZ2V0RGVwZW5kc09uT3duUHJvcHMiLCJtYXBUb1Byb3BzIiwiQm9vbGVhbiIsIndyYXBNYXBUb1Byb3BzRnVuYyIsInByb3h5Iiwic3RhdGVPckRpc3BhdGNoIiwib3duUHJvcHMiLCJjb25uZWN0X21hcERpc3BhdGNoVG9Qcm9wcyIsIm1hcERpc3BhdGNoVG9Qcm9wcyIsInJlZHV4IiwiY29ubmVjdF9tYXBTdGF0ZVRvUHJvcHMiLCJtYXBTdGF0ZVRvUHJvcHMiLCJkZWZhdWx0TWVyZ2VQcm9wcyIsInN0YXRlUHJvcHMiLCJkaXNwYXRjaFByb3BzIiwiY29ubmVjdF9tZXJnZVByb3BzIiwibWVyZ2VQcm9wcyIsIm1lcmdlZFByb3BzIiwiYXJlTWVyZ2VkUHJvcHNFcXVhbCIsImhhc1J1bk9uY2UiLCJuZXh0TWVyZ2VkUHJvcHMiLCJ3cmFwTWVyZ2VQcm9wc0Z1bmMiLCJpbXB1cmVGaW5hbFByb3BzU2VsZWN0b3JGYWN0b3J5IiwicHVyZUZpbmFsUHJvcHNTZWxlY3RvckZhY3RvcnkiLCJhcmVTdGF0ZXNFcXVhbCIsImFyZU93blByb3BzRXF1YWwiLCJhcmVTdGF0ZVByb3BzRXF1YWwiLCJoYXNSdW5BdExlYXN0T25jZSIsImhhbmRsZVN1YnNlcXVlbnRDYWxscyIsIm5leHRPd25Qcm9wcyIsIm5leHRTdGF0ZVByb3BzIiwic3RhdGVQcm9wc0NoYW5nZWQiLCJwcm9wc0NoYW5nZWQiLCJzdGF0ZUNoYW5nZWQiLCJmaW5hbFByb3BzU2VsZWN0b3JGYWN0b3J5IiwiaW5pdE1hcFN0YXRlVG9Qcm9wcyIsImluaXRNYXBEaXNwYXRjaFRvUHJvcHMiLCJpbml0TWVyZ2VQcm9wcyIsImZhY3RvcmllcyIsInN0cmljdEVxdWFsIiwiX3JlZiRjb25uZWN0SE9DIiwiY29ubmVjdEhPQyIsIl9yZWYkbWFwU3RhdGVUb1Byb3BzRiIsIm1hcFN0YXRlVG9Qcm9wc0ZhY3RvcmllcyIsIl9yZWYkbWFwRGlzcGF0Y2hUb1BybyIsIm1hcERpc3BhdGNoVG9Qcm9wc0ZhY3RvcmllcyIsIl9yZWYkbWVyZ2VQcm9wc0ZhY3RvciIsIm1lcmdlUHJvcHNGYWN0b3JpZXMiLCJfcmVmJHNlbGVjdG9yRmFjdG9yeSIsImNvbm5lY3RfY29ubmVjdCIsIl9yZWYzIiwiX3JlZjMkcHVyZSIsIl9yZWYzJGFyZVN0YXRlc0VxdWFsIiwiX3JlZjMkYXJlT3duUHJvcHNFcXVhIiwiX3JlZjMkYXJlU3RhdGVQcm9wc0VxIiwiX3JlZjMkYXJlTWVyZ2VkUHJvcHNFIiwiZXh0cmFPcHRpb25zIiwicmVhY3RfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXyIsInJlYWN0X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19fZGVmYXVsdCIsInByb3BfdHlwZXNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXyIsInByb3BfdHlwZXNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX19kZWZhdWx0IiwiX1JvdXRlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fIiwiQnJvd3NlclJvdXRlciIsIm51bWJlciIsIlN3aXRjaF9Td2l0Y2giLCJTd2l0Y2giLCJ3YXJuaW5nX2RlZmF1bHQiLCJjaGlsZCIsImVsZW1lbnQiLCJpc1ZhbGlkRWxlbWVudCIsIl9lbGVtZW50JHByb3BzIiwicGF0aFByb3AiLCJtYXRjaFBhdGgiLCJjbG9uZUVsZW1lbnQiLCJlc19Td2l0Y2giLCJmb3IiLCJxIiwidSIsInYiLCJ3IiwieiIsImFhIiwiYmEiLCJBIiwiQiIsImgiLCJjYSIsIkMiLCJpc01vdW50ZWQiLCJlbnF1ZXVlRm9yY2VVcGRhdGUiLCJlbnF1ZXVlUmVwbGFjZVN0YXRlIiwiZW5xdWV1ZVNldFN0YXRlIiwiRCIsIkUiLCJyZWZzIiwidXBkYXRlciIsIkYiLCJHIiwiaXNSZWFjdENvbXBvbmVudCIsImZvcmNlVXBkYXRlIiwiSCIsImlzUHVyZVJlYWN0Q29tcG9uZW50IiwiSSIsImN1cnJlbnQiLCJKIiwiSyIsIkwiLCJfX3NlbGYiLCJfX3NvdXJjZSIsIk0iLCJfb3duZXIiLCJOIiwiTyIsIlAiLCJRIiwia2V5UHJlZml4IiwiUiIsIlUiLCJTIiwiVCIsImRvbmUiLCI9IiwiOiIsImVzY2FwZSIsImVhIiwiZmEiLCJWIiwiZGEiLCJXIiwiWCIsInRvQXJyYXkiLCJjcmVhdGVSZWYiLCJQdXJlQ29tcG9uZW50IiwiX2NhbGN1bGF0ZUNoYW5nZWRCaXRzIiwiX2N1cnJlbnRWYWx1ZSIsIl9jdXJyZW50VmFsdWUyIiwiX3RocmVhZENvdW50IiwiX2NvbnRleHQiLCJsYXp5IiwiX2N0b3IiLCJfc3RhdHVzIiwiX3Jlc3VsdCIsInVzZUNhbGxiYWNrIiwidXNlQ29udGV4dCIsInVzZUVmZmVjdCIsInVzZUltcGVyYXRpdmVIYW5kbGUiLCJ1c2VEZWJ1Z1ZhbHVlIiwidXNlTGF5b3V0RWZmZWN0IiwidXNlTWVtbyIsInVzZVJlZHVjZXIiLCJ1c2VSZWYiLCJ1c2VTdGF0ZSIsIkZyYWdtZW50IiwiU3RyaWN0TW9kZSIsIlN1c3BlbnNlIiwiY3JlYXRlRmFjdG9yeSIsInZlcnNpb24iLCJ1bnN0YWJsZV9Db25jdXJyZW50TW9kZSIsInVuc3RhYmxlX1Byb2ZpbGVyIiwiX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQiLCJSZWFjdEN1cnJlbnREaXNwYXRjaGVyIiwiUmVhY3RDdXJyZW50T3duZXIiLCJZIiwiZGVmYXVsdCIsIloiLCJoYSIsImlhIiwib25FcnJvciIsImphIiwibGEiLCJtYSIsIm5hIiwib2EiLCJleHRyYWN0RXZlbnRzIiwiZXZlbnRUeXBlcyIsInBhIiwicGhhc2VkUmVnaXN0cmF0aW9uTmFtZXMiLCJxYSIsInJlZ2lzdHJhdGlvbk5hbWUiLCJyYSIsInNhIiwiZGVwZW5kZW5jaWVzIiwidGEiLCJ2YSIsIndhIiwiY3VycmVudFRhcmdldCIsImthIiwieGEiLCJ5YSIsInphIiwiQWEiLCJfZGlzcGF0Y2hMaXN0ZW5lcnMiLCJfZGlzcGF0Y2hJbnN0YW5jZXMiLCJpc1Byb3BhZ2F0aW9uU3RvcHBlZCIsImlzUGVyc2lzdGVudCIsInJlbGVhc2UiLCJCYSIsImluamVjdEV2ZW50UGx1Z2luT3JkZXIiLCJpbmplY3RFdmVudFBsdWdpbnNCeU5hbWUiLCJDYSIsInN0YXRlTm9kZSIsImRpc2FibGVkIiwiRGEiLCJFYSIsIkZhIiwiR2EiLCJIYSIsInBhcmVudE5vZGUiLCJ0YWciLCJJYSIsIkphIiwiS2EiLCJMYSIsInJldHVybiIsIk1hIiwiZGlzcGF0Y2hDb25maWciLCJOYSIsIl90YXJnZXRJbnN0IiwiT2EiLCJQYSIsIlFhIiwiUmEiLCJTYSIsInRvTG93ZXJDYXNlIiwiVGEiLCJhbmltYXRpb25lbmQiLCJhbmltYXRpb25pdGVyYXRpb24iLCJhbmltYXRpb25zdGFydCIsInRyYW5zaXRpb25lbmQiLCJVYSIsIlZhIiwiV2EiLCJzdHlsZSIsImFuaW1hdGlvbiIsInRyYW5zaXRpb24iLCJYYSIsIllhIiwiWmEiLCIkYSIsImFiIiwiYmIiLCJjYiIsImRiIiwiZWIiLCJ0ZXh0Q29udGVudCIsImZiIiwiZ2IiLCJuYXRpdmVFdmVudCIsIkludGVyZmFjZSIsImlzRGVmYXVsdFByZXZlbnRlZCIsInJldHVyblZhbHVlIiwiaWIiLCJldmVudFBvb2wiLCJqYiIsImRlc3RydWN0b3IiLCJoYiIsImdldFBvb2xlZCIsInN0b3BQcm9wYWdhdGlvbiIsImNhbmNlbEJ1YmJsZSIsInBlcnNpc3QiLCJldmVudFBoYXNlIiwiYnViYmxlcyIsImNhbmNlbGFibGUiLCJ0aW1lU3RhbXAiLCJEYXRlIiwibm93IiwiaXNUcnVzdGVkIiwiZXh0ZW5kIiwia2IiLCJsYiIsIm1iIiwibmIiLCJvYiIsImRvY3VtZW50TW9kZSIsInBiIiwicWIiLCJyYiIsInNiIiwiYmVmb3JlSW5wdXQiLCJidWJibGVkIiwiY2FwdHVyZWQiLCJjb21wb3NpdGlvbkVuZCIsImNvbXBvc2l0aW9uU3RhcnQiLCJjb21wb3NpdGlvblVwZGF0ZSIsInRiIiwidWIiLCJrZXlDb2RlIiwidmIiLCJkZXRhaWwiLCJ3YiIsInpiIiwibG9jYWxlIiwid2hpY2giLCJ4YiIsImNoYXIiLCJ5YiIsIkFiIiwiQmIiLCJDYiIsIkRiIiwiRWIiLCJGYiIsIkdiIiwiSGIiLCJJYiIsIkpiIiwiS2IiLCJMYiIsImNvbG9yIiwiZGF0ZSIsImRhdGV0aW1lIiwiZGF0ZXRpbWUtbG9jYWwiLCJlbWFpbCIsIm1vbnRoIiwicGFzc3dvcmQiLCJyYW5nZSIsInRlbCIsInRleHQiLCJ0aW1lIiwid2VlayIsIk1iIiwibm9kZU5hbWUiLCJOYiIsInNyY0VsZW1lbnQiLCJjb3JyZXNwb25kaW5nVXNlRWxlbWVudCIsIm5vZGVUeXBlIiwiT2IiLCJzZXRBdHRyaWJ1dGUiLCJQYiIsIlJiIiwiX3ZhbHVlVHJhY2tlciIsInNldCIsImdldFZhbHVlIiwic2V0VmFsdWUiLCJzdG9wVHJhY2tpbmciLCJRYiIsIlNiIiwiY2hlY2tlZCIsIlRiIiwiVWIiLCJWYiIsIldiIiwiWGIiLCJZYiIsIlpiIiwiJGIiLCJhYyIsImJjIiwiY2MiLCJkYyIsImVjIiwiZmMiLCJnYyIsImhjIiwiaWMiLCJqYyIsIl9kZWJ1Z093bmVyIiwiX2RlYnVnU291cmNlIiwiZmlsZU5hbWUiLCJsaW5lTnVtYmVyIiwia2MiLCJsYyIsIm1jIiwibmMiLCJhY2NlcHRzQm9vbGVhbnMiLCJhdHRyaWJ1dGVOYW1lIiwiYXR0cmlidXRlTmFtZXNwYWNlIiwibXVzdFVzZVByb3BlcnR5IiwicHJvcGVydHlOYW1lIiwicmMiLCJzYyIsInRjIiwicGMiLCJpc05hTiIsInFjIiwib2MiLCJyZW1vdmVBdHRyaWJ1dGUiLCJzZXRBdHRyaWJ1dGVOUyIsInVjIiwidmMiLCJkZWZhdWx0Q2hlY2tlZCIsImRlZmF1bHRWYWx1ZSIsIl93cmFwcGVyU3RhdGUiLCJpbml0aWFsQ2hlY2tlZCIsIndjIiwiaW5pdGlhbFZhbHVlIiwiY29udHJvbGxlZCIsInhjIiwieWMiLCJ6YyIsIkFjIiwib3duZXJEb2N1bWVudCIsImFjdGl2ZUVsZW1lbnQiLCJCYyIsImNoYW5nZSIsIkNjIiwiRGMiLCJFYyIsIkZjIiwiR2MiLCJIYyIsIkljIiwiSmMiLCJLYyIsIkxjIiwiTWMiLCJOYyIsIk9jIiwiUGMiLCJfaXNJbnB1dEV2ZW50U3VwcG9ydGVkIiwiUWMiLCJ2aWV3IiwiUmMiLCJBbHQiLCJDb250cm9sIiwiTWV0YSIsIlNoaWZ0IiwiU2MiLCJnZXRNb2RpZmllclN0YXRlIiwiVGMiLCJVYyIsIlZjIiwiV2MiLCJYYyIsIlljIiwic2NyZWVuWCIsInNjcmVlblkiLCJjbGllbnRYIiwiY2xpZW50WSIsInBhZ2VYIiwicGFnZVkiLCJidXR0b25zIiwicmVsYXRlZFRhcmdldCIsImZyb21FbGVtZW50IiwidG9FbGVtZW50IiwibW92ZW1lbnRYIiwibW92ZW1lbnRZIiwiWmMiLCJwb2ludGVySWQiLCJ3aWR0aCIsImhlaWdodCIsInByZXNzdXJlIiwidGFuZ2VudGlhbFByZXNzdXJlIiwidGlsdFgiLCJ0aWx0WSIsInR3aXN0IiwicG9pbnRlclR5cGUiLCJpc1ByaW1hcnkiLCIkYyIsIm1vdXNlRW50ZXIiLCJtb3VzZUxlYXZlIiwicG9pbnRlckVudGVyIiwicG9pbnRlckxlYXZlIiwiYWQiLCJkZWZhdWx0VmlldyIsInBhcmVudFdpbmRvdyIsImFsdGVybmF0ZSIsImJkIiwiY2QiLCJkZCIsImVkIiwiZWZmZWN0VGFnIiwiZmQiLCJoZCIsInNpYmxpbmciLCJnZCIsImlkIiwiYW5pbWF0aW9uTmFtZSIsImVsYXBzZWRUaW1lIiwicHNldWRvRWxlbWVudCIsImpkIiwiY2xpcGJvYXJkRGF0YSIsImtkIiwibGQiLCJjaGFyQ29kZSIsIm1kIiwiRXNjIiwiU3BhY2ViYXIiLCJMZWZ0IiwiVXAiLCJSaWdodCIsIkRvd24iLCJEZWwiLCJXaW4iLCJNZW51IiwiQXBwcyIsIlNjcm9sbCIsIk1velByaW50YWJsZUtleSIsIm5kIiwiOCIsIjkiLCIxMiIsIjEzIiwiMTYiLCIxNyIsIjE4IiwiMTkiLCIyMCIsIjI3IiwiMzIiLCIzMyIsIjM0IiwiMzUiLCIzNiIsIjM3IiwiMzgiLCIzOSIsIjQwIiwiNDUiLCI0NiIsIjExMiIsIjExMyIsIjExNCIsIjExNSIsIjExNiIsIjExNyIsIjExOCIsIjExOSIsIjEyMCIsIjEyMSIsIjEyMiIsIjEyMyIsIjE0NCIsIjE0NSIsIjIyNCIsIm9kIiwicGQiLCJkYXRhVHJhbnNmZXIiLCJxZCIsInRvdWNoZXMiLCJ0YXJnZXRUb3VjaGVzIiwiY2hhbmdlZFRvdWNoZXMiLCJyZCIsInNkIiwiZGVsdGFYIiwid2hlZWxEZWx0YVgiLCJkZWx0YVkiLCJ3aGVlbERlbHRhWSIsIndoZWVsRGVsdGEiLCJkZWx0YVoiLCJkZWx0YU1vZGUiLCJ0ZCIsInVkIiwidmQiLCJ3ZCIsImlzSW50ZXJhY3RpdmUiLCJ4ZCIsImlzSW50ZXJhY3RpdmVUb3BMZXZlbEV2ZW50VHlwZSIsInlkIiwiemQiLCJBZCIsInRhcmdldEluc3QiLCJhbmNlc3RvcnMiLCJjb250YWluZXJJbmZvIiwidG9wTGV2ZWxUeXBlIiwiQmQiLCJDZCIsIkRkIiwiRWQiLCJGZCIsIkdkIiwiSGQiLCJJZCIsIkpkIiwiYm9keSIsIktkIiwiZmlyc3RDaGlsZCIsIkxkIiwibmV4dFNpYmxpbmciLCJOZCIsIkhUTUxJRnJhbWVFbGVtZW50IiwiY29udGVudERvY3VtZW50IiwiT2QiLCJjb250ZW50RWRpdGFibGUiLCJRZCIsImZvY3VzZWRFbGVtIiwic2VsZWN0aW9uUmFuZ2UiLCJNZCIsImNvbnRhaW5zIiwiY29tcGFyZURvY3VtZW50UG9zaXRpb24iLCJkb2N1bWVudEVsZW1lbnQiLCJzdGFydCIsInNlbGVjdGlvblN0YXJ0Iiwic2VsZWN0aW9uRW5kIiwiZ2V0U2VsZWN0aW9uIiwicmFuZ2VDb3VudCIsImFuY2hvck5vZGUiLCJhbmNob3JPZmZzZXQiLCJmb2N1c05vZGUiLCJmb2N1c09mZnNldCIsImNyZWF0ZVJhbmdlIiwic2V0U3RhcnQiLCJyZW1vdmVBbGxSYW5nZXMiLCJhZGRSYW5nZSIsInNldEVuZCIsImxlZnQiLCJzY3JvbGxMZWZ0IiwidG9wIiwic2Nyb2xsVG9wIiwiZm9jdXMiLCJSZCIsIlNkIiwic2VsZWN0IiwiVGQiLCJVZCIsIlZkIiwiV2QiLCJYZCIsIllkIiwib25TZWxlY3QiLCIkZCIsIlpkIiwiYWUiLCJzZWxlY3RlZCIsImRlZmF1bHRTZWxlY3RlZCIsImJlIiwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwiLCJjZSIsImRlIiwiZWUiLCJTaW1wbGVFdmVudFBsdWdpbiIsIkVudGVyTGVhdmVFdmVudFBsdWdpbiIsIkNoYW5nZUV2ZW50UGx1Z2luIiwiU2VsZWN0RXZlbnRQbHVnaW4iLCJCZWZvcmVJbnB1dEV2ZW50UGx1Z2luIiwiZmUiLCJodG1sIiwibWF0aG1sIiwic3ZnIiwiZ2UiLCJoZSIsImllIiwiamUiLCJuYW1lc3BhY2VVUkkiLCJpbm5lckhUTUwiLCJyZW1vdmVDaGlsZCIsImFwcGVuZENoaWxkIiwiTVNBcHAiLCJleGVjVW5zYWZlTG9jYWxGdW5jdGlvbiIsImtlIiwibGFzdENoaWxkIiwibm9kZVZhbHVlIiwibGUiLCJhbmltYXRpb25JdGVyYXRpb25Db3VudCIsImJvcmRlckltYWdlT3V0c2V0IiwiYm9yZGVySW1hZ2VTbGljZSIsImJvcmRlckltYWdlV2lkdGgiLCJib3hGbGV4IiwiYm94RmxleEdyb3VwIiwiYm94T3JkaW5hbEdyb3VwIiwiY29sdW1uQ291bnQiLCJjb2x1bW5zIiwiZmxleCIsImZsZXhHcm93IiwiZmxleFBvc2l0aXZlIiwiZmxleFNocmluayIsImZsZXhOZWdhdGl2ZSIsImZsZXhPcmRlciIsImdyaWRBcmVhIiwiZ3JpZFJvdyIsImdyaWRSb3dFbmQiLCJncmlkUm93U3BhbiIsImdyaWRSb3dTdGFydCIsImdyaWRDb2x1bW4iLCJncmlkQ29sdW1uRW5kIiwiZ3JpZENvbHVtblNwYW4iLCJncmlkQ29sdW1uU3RhcnQiLCJmb250V2VpZ2h0IiwibGluZUNsYW1wIiwibGluZUhlaWdodCIsIm9wYWNpdHkiLCJvcmRlciIsIm9ycGhhbnMiLCJ0YWJTaXplIiwid2lkb3dzIiwiekluZGV4Iiwiem9vbSIsImZpbGxPcGFjaXR5IiwiZmxvb2RPcGFjaXR5Iiwic3RvcE9wYWNpdHkiLCJzdHJva2VEYXNoYXJyYXkiLCJzdHJva2VEYXNob2Zmc2V0Iiwic3Ryb2tlTWl0ZXJsaW1pdCIsInN0cm9rZU9wYWNpdHkiLCJzdHJva2VXaWR0aCIsIm1lIiwibmUiLCJ0cmltIiwib2UiLCJzZXRQcm9wZXJ0eSIsInBlIiwibWVudWl0ZW0iLCJhcmVhIiwiYmFzZSIsImJyIiwiY29sIiwiZW1iZWQiLCJociIsImltZyIsImlucHV0Iiwia2V5Z2VuIiwibGluayIsIm1ldGEiLCJwYXJhbSIsInRyYWNrIiwid2JyIiwicWUiLCJzZSIsImJsdXIiLCJ0ZSIsInVlIiwidmUiLCJ3ZSIsImF1dG9Gb2N1cyIsInhlIiwiX19odG1sIiwieWUiLCJzZXRUaW1lb3V0IiwiemUiLCJjbGVhclRpbWVvdXQiLCJBZSIsInVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2siLCJCZSIsInVuc3RhYmxlX2NhbmNlbENhbGxiYWNrIiwiRGUiLCJFZSIsIlNldCIsIkZlIiwiR2UiLCJIZSIsIkllIiwiSmUiLCJfX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0IiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQiLCJLZSIsIkxlIiwiTWUiLCJOZSIsIk9lIiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQiLCJQZSIsIlFlIiwiUmUiLCJTZSIsIlVlIiwiZWxlbWVudFR5cGUiLCJwZW5kaW5nUHJvcHMiLCJjb250ZXh0RGVwZW5kZW5jaWVzIiwibWVtb2l6ZWRTdGF0ZSIsInVwZGF0ZVF1ZXVlIiwibWVtb2l6ZWRQcm9wcyIsImxhc3RFZmZlY3QiLCJmaXJzdEVmZmVjdCIsIm5leHRFZmZlY3QiLCJjaGlsZEV4cGlyYXRpb25UaW1lIiwiZXhwaXJhdGlvblRpbWUiLCJWZSIsIlhlIiwiWWUiLCJaZSIsIiRlIiwiYWYiLCJiZiIsInBlbmRpbmdDaGlsZHJlbiIsImltcGxlbWVudGF0aW9uIiwiY2YiLCJkaWRFcnJvciIsImVhcmxpZXN0UGVuZGluZ1RpbWUiLCJsYXRlc3RQZW5kaW5nVGltZSIsImRmIiwiZmYiLCJsYXRlc3RQaW5nZWRUaW1lIiwiZWFybGllc3RTdXNwZW5kZWRUaW1lIiwibGF0ZXN0U3VzcGVuZGVkVGltZSIsImdmIiwibmV4dEV4cGlyYXRpb25UaW1lVG9Xb3JrT24iLCJqZiIsImtmIiwiYmFzZVN0YXRlIiwidGYiLCJfcmVhY3RJbnRlcm5hbEZpYmVyIiwibGYiLCJuZiIsIm1mIiwicGF5bG9hZCIsIm9mIiwicGYiLCJxZiIsInJmIiwic2YiLCJ1ZiIsInNob3VsZENvbXBvbmVudFVwZGF0ZSIsInZmIiwid2YiLCJVTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyIsInhmIiwieWYiLCJnZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSIsIlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQiLCJ6ZiIsIkFmIiwiX3N0cmluZ1JlZiIsIkJmIiwiQ2YiLCJNYXAiLCJkZWxldGUiLCJEZiIsIkVmIiwiRmYiLCJHZiIsIkhmIiwiSWYiLCJKZiIsInRhZ05hbWUiLCJLZiIsIkxmIiwiTWYiLCJOZiIsIk9mIiwiUGYiLCJRZiIsIlJmIiwiU2YiLCJUZiIsIlVmIiwiVmYiLCJXZiIsIlhmIiwiWWYiLCJaZiIsIiRmIiwiYWciLCJiZyIsImNnIiwiZGciLCJlZyIsImZnIiwiZ2ciLCJoZyIsImlnIiwiamciLCJrZyIsImxnIiwibWciLCJxdWV1ZSIsImJhc2VVcGRhdGUiLCJuZyIsIm9nIiwicGciLCJxZyIsImVhZ2VyUmVkdWNlciIsImVhZ2VyU3RhdGUiLCJyZyIsImRlc3Ryb3kiLCJkZXBzIiwic2ciLCJ0ZyIsInVnIiwidmciLCJ3ZyIsInJlYWRDb250ZXh0IiwieGciLCJ5ZyIsInpnIiwiQWciLCJCZyIsIkNnIiwiRGciLCJFZyIsIkZnIiwiR2ciLCJIZyIsIklnIiwiSmciLCJLZyIsIkxnIiwiTWciLCJOZyIsIk9nIiwiUGciLCJVTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSIsImNvbXBvbmVudFdpbGxVcGRhdGUiLCJRZyIsIlJnIiwicGVuZGluZ0NvbnRleHQiLCJTZyIsInRpbWVkT3V0QXQiLCJmYWxsYmFjayIsIlRnIiwiVWciLCJ0aGVuIiwiaGYiLCJXZSIsImh5ZHJhdGUiLCJoaWRkZW4iLCJmaXJzdCIsIm9ic2VydmVkQml0cyIsInVuc3RhYmxlX29ic2VydmVkQml0cyIsIlZnIiwiV2ciLCJYZyIsIllnIiwiWmciLCIkZyIsImFoIiwiYmgiLCJmaXJzdFVwZGF0ZSIsImxhc3RVcGRhdGUiLCJmaXJzdENhcHR1cmVkVXBkYXRlIiwibGFzdENhcHR1cmVkVXBkYXRlIiwiZmlyc3RDYXB0dXJlZEVmZmVjdCIsImxhc3RDYXB0dXJlZEVmZmVjdCIsImNoIiwiZGgiLCJlaCIsImZoIiwiZ2giLCJoaCIsImloIiwiamgiLCJzdGFjayIsImtoIiwibGgiLCJtaCIsIm5oIiwib2giLCJvbmNsaWNrIiwicGgiLCJXZWFrU2V0IiwicWgiLCJyaCIsInNoIiwidGgiLCJ2aCIsIndoIiwieGgiLCJ5aCIsImluc2VydEJlZm9yZSIsIl9yZWFjdFJvb3RDb250YWluZXIiLCJ6aCIsIndhc011bHRpcGxlIiwibXVsdGlwbGUiLCJDZSIsImRpc3BsYXkiLCJ1aCIsImhpIiwiWGgiLCJoYXMiLCJhZGQiLCJCaCIsIldlYWtNYXAiLCJDaCIsIkRoIiwiRWgiLCJjb21wb25lbnREaWRDYXRjaCIsIkZoIiwiY29tcG9uZW50U3RhY2siLCJHaCIsIkhoIiwiSWgiLCJKaCIsIktoIiwiTGgiLCJNaCIsIk5oIiwiT2giLCJQaCIsIlFoIiwiUmgiLCJTaCIsIlRoIiwiVWgiLCJfX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEJlZm9yZVVwZGF0ZSIsIlZoIiwiWmgiLCJwZW5kaW5nQ29tbWl0RXhwaXJhdGlvblRpbWUiLCJlZiIsIlBkIiwiWWgiLCJ1bnN0YWJsZV9ydW5XaXRoUHJpb3JpdHkiLCJ1bnN0YWJsZV9Ob3JtYWxQcmlvcml0eSIsImZpbmlzaGVkV29yayIsIiRoIiwiYWkiLCJjcmVhdGVFbGVtZW50TlMiLCJjcmVhdGVUZXh0Tm9kZSIsImJpIiwiY2kiLCJkaSIsIm1heER1cmF0aW9uIiwicGluZ0NhY2hlIiwiZWkiLCJmaSIsInVuc3RhYmxlX2dldEN1cnJlbnRQcmlvcml0eUxldmVsIiwidW5zdGFibGVfSW1tZWRpYXRlUHJpb3JpdHkiLCJ1bnN0YWJsZV9Vc2VyQmxvY2tpbmdQcmlvcml0eSIsInVuc3RhYmxlX0xvd1ByaW9yaXR5IiwidW5zdGFibGVfSWRsZVByaW9yaXR5IiwiZ2kiLCJpaSIsImppIiwia2kiLCJsaSIsIm1pIiwibmkiLCJvaSIsInBpIiwicWkiLCJyaSIsInNpIiwidGkiLCJ1bnN0YWJsZV9ub3ciLCJ1aSIsInZpIiwid2kiLCJ4aSIsInlpIiwiemkiLCJ0aW1lb3V0IiwidGltZW91dEhhbmRsZSIsIkJpIiwiQ2kiLCJuZXh0U2NoZWR1bGVkUm9vdCIsIkRpIiwiRWkiLCJ1bnN0YWJsZV9zaG91bGRZaWVsZCIsIl9vbkNvbXBsZXRlIiwiRmkiLCJmaXJzdEJhdGNoIiwiX2V4cGlyYXRpb25UaW1lIiwiX2RlZmVyIiwiR2kiLCJIaSIsIklpIiwiSmkiLCJLaSIsIkxpIiwiTmkiLCJfcm9vdCIsIl9jYWxsYmFja3MiLCJfbmV4dCIsIl9oYXNDaGlsZHJlbiIsIl9kaWRDb21wbGV0ZSIsIl9jaGlsZHJlbiIsIk9pIiwiX2RpZENvbW1pdCIsIl9vbkNvbW1pdCIsIlBpIiwiX2ludGVybmFsUm9vdCIsIlFpIiwiU2kiLCJsZWdhY3lfcmVuZGVyU3VidHJlZUludG9Db250YWluZXIiLCJoYXNBdHRyaWJ1dGUiLCJSaSIsIlRpIiwiTWkiLCJxdWVyeVNlbGVjdG9yQWxsIiwiZm9ybSIsImNvbW1pdCIsInVubW91bnQiLCJjcmVhdGVCYXRjaCIsIlZpIiwiY3JlYXRlUG9ydGFsIiwiZmluZERPTU5vZGUiLCJ1bnN0YWJsZV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lciIsInVubW91bnRDb21wb25lbnRBdE5vZGUiLCJ1bnN0YWJsZV9jcmVhdGVQb3J0YWwiLCJ1bnN0YWJsZV9iYXRjaGVkVXBkYXRlcyIsInVuc3RhYmxlX2ludGVyYWN0aXZlVXBkYXRlcyIsImZsdXNoU3luYyIsInVuc3RhYmxlX2NyZWF0ZVJvb3QiLCJ1bnN0YWJsZV9mbHVzaENvbnRyb2xsZWQiLCJFdmVudHMiLCJmaW5kRmliZXJCeUhvc3RJbnN0YW5jZSIsImlzRGlzYWJsZWQiLCJzdXBwb3J0c0ZpYmVyIiwiaW5qZWN0Iiwib25Db21taXRGaWJlclJvb3QiLCJvbkNvbW1pdEZpYmVyVW5tb3VudCIsIlRlIiwib3ZlcnJpZGVQcm9wcyIsImN1cnJlbnREaXNwYXRjaGVyUmVmIiwiZmluZEhvc3RJbnN0YW5jZUJ5RmliZXIiLCJidW5kbGVUeXBlIiwicmVuZGVyZXJQYWNrYWdlTmFtZSIsIldpIiwiWGkiLCJwcmV2aW91cyIsInByaW9yaXR5TGV2ZWwiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJjYW5jZWxBbmltYXRpb25GcmFtZSIsInBlcmZvcm1hbmNlIiwiX3NjaGVkTW9jayIsIk1lc3NhZ2VDaGFubmVsIiwicG9ydDIiLCJwb3J0MSIsIm9ubWVzc2FnZSIsInBvc3RNZXNzYWdlIiwidW5zdGFibGVfbmV4dCIsInVuc3RhYmxlX3dyYXBDYWxsYmFjayIsInVuc3RhYmxlX2NvbnRpbnVlRXhlY3V0aW9uIiwidW5zdGFibGVfcGF1c2VFeGVjdXRpb24iLCJ1bnN0YWJsZV9nZXRGaXJzdENhbGxiYWNrTm9kZSIsIlJlYWN0UHJvcFR5cGVzU2VjcmV0IiwiZW1wdHlGdW5jdGlvbiIsImVtcHR5RnVuY3Rpb25XaXRoUmVzZXQiLCJyZXNldFdhcm5pbmdDYWNoZSIsInNoaW0iLCJwcm9wTmFtZSIsImNvbXBvbmVudE5hbWUiLCJwcm9wRnVsbE5hbWUiLCJzZWNyZXQiLCJnZXRTaGltIiwiUmVhY3RQcm9wVHlwZXMiLCJhcnJheSIsInN5bWJvbCIsImFycmF5T2YiLCJpbnN0YW5jZU9mIiwib2JqZWN0T2YiLCJvbmVPZiIsImNoZWNrUHJvcFR5cGVzIiwiUHJvcFR5cGVzIiwiYXJyIiwidHlwZU9mIiwiQXN5bmNNb2RlIiwiQ29uY3VycmVudE1vZGUiLCJDb250ZXh0Q29uc3VtZXIiLCJDb250ZXh0UHJvdmlkZXIiLCJFbGVtZW50IiwiTGF6eSIsIk1lbW8iLCJQb3J0YWwiLCJQcm9maWxlciIsImlzVmFsaWRFbGVtZW50VHlwZSIsImlzQXN5bmNNb2RlIiwiaXNDb25jdXJyZW50TW9kZSIsImlzQ29udGV4dENvbnN1bWVyIiwiaXNDb250ZXh0UHJvdmlkZXIiLCJpc0VsZW1lbnQiLCJpc0ZvcndhcmRSZWYiLCJpc0ZyYWdtZW50IiwiaXNMYXp5IiwiaXNQb3J0YWwiLCJpc1Byb2ZpbGVyIiwiaXNTdHJpY3RNb2RlIiwiaXNTdXNwZW5zZSIsIkhhc2hSb3V0ZXJfSGFzaFJvdXRlciIsIkhhc2hSb3V0ZXIiLCJlcyIsImVzX0hhc2hSb3V0ZXIiLCJNZW1vcnlSb3V0ZXJfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsIk1lbW9yeVJvdXRlcl9NZW1vcnlSb3V0ZXIiLCJNZW1vcnlSb3V0ZXIiLCJNZW1vcnlSb3V0ZXJfY2xhc3NDYWxsQ2hlY2siLCJNZW1vcnlSb3V0ZXJfaW5oZXJpdHMiLCJlc19Sb3V0ZXIiLCJyZWFjdF9yb3V0ZXJfZG9tX2VzX01lbW9yeVJvdXRlciIsIk5hdkxpbmtfTmF2TGluayIsImFjdGl2ZUNsYXNzTmFtZSIsImNsYXNzTmFtZSIsImFjdGl2ZVN0eWxlIiwiZ2V0SXNBY3RpdmUiLCJhcmlhQ3VycmVudCIsInJlc3QiLCJlc2NhcGVkUGF0aCIsImFyaWEtY3VycmVudCIsImVzX05hdkxpbmsiLCJQcm9tcHRfUHJvbXB0IiwiUHJvbXB0IiwiUHJvbXB0X2NsYXNzQ2FsbENoZWNrIiwiUHJvbXB0X3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJQcm9tcHRfaW5oZXJpdHMiLCJlbmFibGUiLCJkaXNhYmxlIiwid2hlbiIsInJlYWN0X3JvdXRlcl9kb21fZXNfUHJvbXB0IiwiZXNfZ2VuZXJhdGVQYXRoIiwiY29tcGlsZWRHZW5lcmF0b3IiLCJwYXRoX3RvX3JlZ2V4cF9kZWZhdWx0IiwiZ2VuZXJhdGVQYXRoX2NvbXBpbGVHZW5lcmF0b3IiLCJnZW5lcmF0b3IiLCJSZWRpcmVjdF9leHRlbmRzIiwiUmVkaXJlY3RfUmVkaXJlY3QiLCJSZWRpcmVjdCIsIlJlZGlyZWN0X2NsYXNzQ2FsbENoZWNrIiwiUmVkaXJlY3RfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsIlJlZGlyZWN0X2luaGVyaXRzIiwiaXNTdGF0aWMiLCJwZXJmb3JtIiwicHJldlRvIiwibmV4dFRvIiwiY29tcHV0ZVRvIiwicmVhY3Rfcm91dGVyX2RvbV9lc19SZWRpcmVjdCIsIlN0YXRpY1JvdXRlcl9leHRlbmRzIiwiU3RhdGljUm91dGVyX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJhZGRCYXNlbmFtZSIsIlN0YXRpY1JvdXRlcl9jcmVhdGVVUkwiLCJTdGF0aWNSb3V0ZXJfc3RhdGljSGFuZGxlciIsIm5vb3AiLCJTdGF0aWNSb3V0ZXJfU3RhdGljUm91dGVyIiwiU3RhdGljUm91dGVyIiwiU3RhdGljUm91dGVyX2NsYXNzQ2FsbENoZWNrIiwiaGFuZGxlUHVzaCIsImhhbmRsZVJlcGxhY2UiLCJfdGhpcyRwcm9wczIiLCJoYW5kbGVMaXN0ZW4iLCJoYW5kbGVCbG9jayIsIlN0YXRpY1JvdXRlcl9pbmhlcml0cyIsIlN0YXRpY1JvdXRlcl9vYmplY3RXaXRob3V0UHJvcGVydGllcyIsInJlYWN0X3JvdXRlcl9kb21fZXNfU3RhdGljUm91dGVyIiwicmVhY3Rfcm91dGVyX2RvbV9lc19nZW5lcmF0ZVBhdGgiLCJlc19tYXRjaFBhdGgiLCJ3aXRoUm91dGVyX2V4dGVuZHMiLCJyZWFjdF9yb3V0ZXJfZG9tX2VzX3dpdGhSb3V0ZXIiLCJ3cmFwcGVkQ29tcG9uZW50UmVmIiwicmVtYWluaW5nUHJvcHMiLCJ3aXRoUm91dGVyX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIiwiZXNfUm91dGUiLCJyb3V0ZUNvbXBvbmVudFByb3BzIl0sIm1hcHBpbmdzIjoiYUFDQSxJQUFBQSxFQUFBLEdBR0EsU0FBQUMsRUFBQUMsR0FHQSxHQUFBRixFQUFBRSxHQUNBLE9BQUFGLEVBQUFFLEdBQUFDLFFBR0EsSUFBQUMsRUFBQUosRUFBQUUsR0FBQSxDQUNBRyxFQUFBSCxFQUNBSSxHQUFBLEVBQ0FILFFBQUEsSUFVQSxPQU5BSSxFQUFBTCxHQUFBTSxLQUFBSixFQUFBRCxRQUFBQyxJQUFBRCxRQUFBRixHQUdBRyxFQUFBRSxHQUFBLEVBR0FGLEVBQUFELFFBS0FGLEVBQUFRLEVBQUFGLEVBR0FOLEVBQUFTLEVBQUFWLEVBR0FDLEVBQUFVLEVBQUEsU0FBQVIsRUFBQVMsRUFBQUMsR0FDQVosRUFBQWEsRUFBQVgsRUFBQVMsSUFDQUcsT0FBQUMsZUFBQWIsRUFBQVMsRUFBQSxDQUEwQ0ssWUFBQSxFQUFBQyxJQUFBTCxLQUsxQ1osRUFBQWtCLEVBQUEsU0FBQWhCLEdBQ0Esb0JBQUFpQixlQUFBQyxhQUNBTixPQUFBQyxlQUFBYixFQUFBaUIsT0FBQUMsWUFBQSxDQUF3REMsTUFBQSxXQUV4RFAsT0FBQUMsZUFBQWIsRUFBQSxjQUFpRG1CLE9BQUEsS0FRakRyQixFQUFBc0IsRUFBQSxTQUFBRCxFQUFBRSxHQUVBLEdBREEsRUFBQUEsSUFBQUYsRUFBQXJCLEVBQUFxQixJQUNBLEVBQUFFLEVBQUEsT0FBQUYsRUFDQSxLQUFBRSxHQUFBLGlCQUFBRixRQUFBRyxXQUFBLE9BQUFILEVBQ0EsSUFBQUksRUFBQVgsT0FBQVksT0FBQSxNQUdBLEdBRkExQixFQUFBa0IsRUFBQU8sR0FDQVgsT0FBQUMsZUFBQVUsRUFBQSxXQUF5Q1QsWUFBQSxFQUFBSyxVQUN6QyxFQUFBRSxHQUFBLGlCQUFBRixFQUFBLFFBQUFNLEtBQUFOLEVBQUFyQixFQUFBVSxFQUFBZSxFQUFB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QUFBQSIsImZpbGUiOiJ2ZXJkb3IuMGRkNjhjOTA3NTBjNzc5NmI3YjAuanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gNTApO1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB2YXIgUmVhY3RJcyA9IHJlcXVpcmUoJ3JlYWN0LWlzJyk7XG5cbiAgLy8gQnkgZXhwbGljaXRseSB1c2luZyBgcHJvcC10eXBlc2AgeW91IGFyZSBvcHRpbmcgaW50byBuZXcgZGV2ZWxvcG1lbnQgYmVoYXZpb3IuXG4gIC8vIGh0dHA6Ly9mYi5tZS9wcm9wLXR5cGVzLWluLXByb2RcbiAgdmFyIHRocm93T25EaXJlY3RBY2Nlc3MgPSB0cnVlO1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZmFjdG9yeVdpdGhUeXBlQ2hlY2tlcnMnKShSZWFjdElzLmlzRWxlbWVudCwgdGhyb3dPbkRpcmVjdEFjY2Vzcyk7XG59IGVsc2Uge1xuICAvLyBCeSBleHBsaWNpdGx5IHVzaW5nIGBwcm9wLXR5cGVzYCB5b3UgYXJlIG9wdGluZyBpbnRvIG5ldyBwcm9kdWN0aW9uIGJlaGF2aW9yLlxuICAvLyBodHRwOi8vZmIubWUvcHJvcC10eXBlcy1pbi1wcm9kXG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9mYWN0b3J5V2l0aFRocm93aW5nU2hpbXMnKSgpO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBVc2UgaW52YXJpYW50KCkgdG8gYXNzZXJ0IHN0YXRlIHdoaWNoIHlvdXIgcHJvZ3JhbSBhc3N1bWVzIHRvIGJlIHRydWUuXG4gKlxuICogUHJvdmlkZSBzcHJpbnRmLXN0eWxlIGZvcm1hdCAob25seSAlcyBpcyBzdXBwb3J0ZWQpIGFuZCBhcmd1bWVudHNcbiAqIHRvIHByb3ZpZGUgaW5mb3JtYXRpb24gYWJvdXQgd2hhdCBicm9rZSBhbmQgd2hhdCB5b3Ugd2VyZVxuICogZXhwZWN0aW5nLlxuICpcbiAqIFRoZSBpbnZhcmlhbnQgbWVzc2FnZSB3aWxsIGJlIHN0cmlwcGVkIGluIHByb2R1Y3Rpb24sIGJ1dCB0aGUgaW52YXJpYW50XG4gKiB3aWxsIHJlbWFpbiB0byBlbnN1cmUgbG9naWMgZG9lcyBub3QgZGlmZmVyIGluIHByb2R1Y3Rpb24uXG4gKi9cblxudmFyIGludmFyaWFudCA9IGZ1bmN0aW9uKGNvbmRpdGlvbiwgZm9ybWF0LCBhLCBiLCBjLCBkLCBlLCBmKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgaWYgKGZvcm1hdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludmFyaWFudCByZXF1aXJlcyBhbiBlcnJvciBtZXNzYWdlIGFyZ3VtZW50Jyk7XG4gICAgfVxuICB9XG5cbiAgaWYgKCFjb25kaXRpb24pIHtcbiAgICB2YXIgZXJyb3I7XG4gICAgaWYgKGZvcm1hdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBlcnJvciA9IG5ldyBFcnJvcihcbiAgICAgICAgJ01pbmlmaWVkIGV4Y2VwdGlvbiBvY2N1cnJlZDsgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50ICcgK1xuICAgICAgICAnZm9yIHRoZSBmdWxsIGVycm9yIG1lc3NhZ2UgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy4nXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgYXJncyA9IFthLCBiLCBjLCBkLCBlLCBmXTtcbiAgICAgIHZhciBhcmdJbmRleCA9IDA7XG4gICAgICBlcnJvciA9IG5ldyBFcnJvcihcbiAgICAgICAgZm9ybWF0LnJlcGxhY2UoLyVzL2csIGZ1bmN0aW9uKCkgeyByZXR1cm4gYXJnc1thcmdJbmRleCsrXTsgfSlcbiAgICAgICk7XG4gICAgICBlcnJvci5uYW1lID0gJ0ludmFyaWFudCBWaW9sYXRpb24nO1xuICAgIH1cblxuICAgIGVycm9yLmZyYW1lc1RvUG9wID0gMTsgLy8gd2UgZG9uJ3QgY2FyZSBhYm91dCBpbnZhcmlhbnQncyBvd24gZnJhbWVcbiAgICB0aHJvdyBlcnJvcjtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBpbnZhcmlhbnQ7XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDE0LTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogU2ltaWxhciB0byBpbnZhcmlhbnQgYnV0IG9ubHkgbG9ncyBhIHdhcm5pbmcgaWYgdGhlIGNvbmRpdGlvbiBpcyBub3QgbWV0LlxuICogVGhpcyBjYW4gYmUgdXNlZCB0byBsb2cgaXNzdWVzIGluIGRldmVsb3BtZW50IGVudmlyb25tZW50cyBpbiBjcml0aWNhbFxuICogcGF0aHMuIFJlbW92aW5nIHRoZSBsb2dnaW5nIGNvZGUgZm9yIHByb2R1Y3Rpb24gZW52aXJvbm1lbnRzIHdpbGwga2VlcCB0aGVcbiAqIHNhbWUgbG9naWMgYW5kIGZvbGxvdyB0aGUgc2FtZSBjb2RlIHBhdGhzLlxuICovXG5cbnZhciB3YXJuaW5nID0gZnVuY3Rpb24oKSB7fTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgd2FybmluZyA9IGZ1bmN0aW9uKGNvbmRpdGlvbiwgZm9ybWF0LCBhcmdzKSB7XG4gICAgdmFyIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgYXJncyA9IG5ldyBBcnJheShsZW4gPiAyID8gbGVuIC0gMiA6IDApO1xuICAgIGZvciAodmFyIGtleSA9IDI7IGtleSA8IGxlbjsga2V5KyspIHtcbiAgICAgIGFyZ3Nba2V5IC0gMl0gPSBhcmd1bWVudHNba2V5XTtcbiAgICB9XG4gICAgaWYgKGZvcm1hdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICdgd2FybmluZyhjb25kaXRpb24sIGZvcm1hdCwgLi4uYXJncylgIHJlcXVpcmVzIGEgd2FybmluZyAnICtcbiAgICAgICAgJ21lc3NhZ2UgYXJndW1lbnQnXG4gICAgICApO1xuICAgIH1cblxuICAgIGlmIChmb3JtYXQubGVuZ3RoIDwgMTAgfHwgKC9eW3NcXFddKiQvKS50ZXN0KGZvcm1hdCkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ1RoZSB3YXJuaW5nIGZvcm1hdCBzaG91bGQgYmUgYWJsZSB0byB1bmlxdWVseSBpZGVudGlmeSB0aGlzICcgK1xuICAgICAgICAnd2FybmluZy4gUGxlYXNlLCB1c2UgYSBtb3JlIGRlc2NyaXB0aXZlIGZvcm1hdCB0aGFuOiAnICsgZm9ybWF0XG4gICAgICApO1xuICAgIH1cblxuICAgIGlmICghY29uZGl0aW9uKSB7XG4gICAgICB2YXIgYXJnSW5kZXggPSAwO1xuICAgICAgdmFyIG1lc3NhZ2UgPSAnV2FybmluZzogJyArXG4gICAgICAgIGZvcm1hdC5yZXBsYWNlKC8lcy9nLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICByZXR1cm4gYXJnc1thcmdJbmRleCsrXTtcbiAgICAgICAgfSk7XG4gICAgICBpZiAodHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IobWVzc2FnZSk7XG4gICAgICB9XG4gICAgICB0cnkge1xuICAgICAgICAvLyBUaGlzIGVycm9yIHdhcyB0aHJvd24gYXMgYSBjb252ZW5pZW5jZSBzbyB0aGF0IHlvdSBjYW4gdXNlIHRoaXMgc3RhY2tcbiAgICAgICAgLy8gdG8gZmluZCB0aGUgY2FsbHNpdGUgdGhhdCBjYXVzZWQgdGhpcyB3YXJuaW5nIHRvIGZpcmUuXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgICAgIH0gY2F0Y2goeCkge31cbiAgICB9XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gd2FybmluZztcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE0LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFNpbWlsYXIgdG8gaW52YXJpYW50IGJ1dCBvbmx5IGxvZ3MgYSB3YXJuaW5nIGlmIHRoZSBjb25kaXRpb24gaXMgbm90IG1ldC5cbiAqIFRoaXMgY2FuIGJlIHVzZWQgdG8gbG9nIGlzc3VlcyBpbiBkZXZlbG9wbWVudCBlbnZpcm9ubWVudHMgaW4gY3JpdGljYWxcbiAqIHBhdGhzLiBSZW1vdmluZyB0aGUgbG9nZ2luZyBjb2RlIGZvciBwcm9kdWN0aW9uIGVudmlyb25tZW50cyB3aWxsIGtlZXAgdGhlXG4gKiBzYW1lIGxvZ2ljIGFuZCBmb2xsb3cgdGhlIHNhbWUgY29kZSBwYXRocy5cbiAqL1xuXG52YXIgX19ERVZfXyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbic7XG5cbnZhciB3YXJuaW5nID0gZnVuY3Rpb24oKSB7fTtcblxuaWYgKF9fREVWX18pIHtcbiAgdmFyIHByaW50V2FybmluZyA9IGZ1bmN0aW9uIHByaW50V2FybmluZyhmb3JtYXQsIGFyZ3MpIHtcbiAgICB2YXIgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICBhcmdzID0gbmV3IEFycmF5KGxlbiA+IDEgPyBsZW4gLSAxIDogMCk7XG4gICAgZm9yICh2YXIga2V5ID0gMTsga2V5IDwgbGVuOyBrZXkrKykge1xuICAgICAgYXJnc1trZXkgLSAxXSA9IGFyZ3VtZW50c1trZXldO1xuICAgIH1cbiAgICB2YXIgYXJnSW5kZXggPSAwO1xuICAgIHZhciBtZXNzYWdlID0gJ1dhcm5pbmc6ICcgK1xuICAgICAgZm9ybWF0LnJlcGxhY2UoLyVzL2csIGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gYXJnc1thcmdJbmRleCsrXTtcbiAgICAgIH0pO1xuICAgIGlmICh0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IobWVzc2FnZSk7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAvLyAtLS0gV2VsY29tZSB0byBkZWJ1Z2dpbmcgUmVhY3QgLS0tXG4gICAgICAvLyBUaGlzIGVycm9yIHdhcyB0aHJvd24gYXMgYSBjb252ZW5pZW5jZSBzbyB0aGF0IHlvdSBjYW4gdXNlIHRoaXMgc3RhY2tcbiAgICAgIC8vIHRvIGZpbmQgdGhlIGNhbGxzaXRlIHRoYXQgY2F1c2VkIHRoaXMgd2FybmluZyB0byBmaXJlLlxuICAgICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UpO1xuICAgIH0gY2F0Y2ggKHgpIHt9XG4gIH1cblxuICB3YXJuaW5nID0gZnVuY3Rpb24oY29uZGl0aW9uLCBmb3JtYXQsIGFyZ3MpIHtcbiAgICB2YXIgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICBhcmdzID0gbmV3IEFycmF5KGxlbiA+IDIgPyBsZW4gLSAyIDogMCk7XG4gICAgZm9yICh2YXIga2V5ID0gMjsga2V5IDwgbGVuOyBrZXkrKykge1xuICAgICAgYXJnc1trZXkgLSAyXSA9IGFyZ3VtZW50c1trZXldO1xuICAgIH1cbiAgICBpZiAoZm9ybWF0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAnYHdhcm5pbmcoY29uZGl0aW9uLCBmb3JtYXQsIC4uLmFyZ3MpYCByZXF1aXJlcyBhIHdhcm5pbmcgJyArXG4gICAgICAgICAgJ21lc3NhZ2UgYXJndW1lbnQnXG4gICAgICApO1xuICAgIH1cbiAgICBpZiAoIWNvbmRpdGlvbikge1xuICAgICAgcHJpbnRXYXJuaW5nLmFwcGx5KG51bGwsIFtmb3JtYXRdLmNvbmNhdChhcmdzKSk7XG4gICAgfVxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHdhcm5pbmc7XG4iLCJmdW5jdGlvbiBpc0Fic29sdXRlKHBhdGhuYW1lKSB7XG4gIHJldHVybiBwYXRobmFtZS5jaGFyQXQoMCkgPT09ICcvJztcbn1cblxuLy8gQWJvdXQgMS41eCBmYXN0ZXIgdGhhbiB0aGUgdHdvLWFyZyB2ZXJzaW9uIG9mIEFycmF5I3NwbGljZSgpXG5mdW5jdGlvbiBzcGxpY2VPbmUobGlzdCwgaW5kZXgpIHtcbiAgZm9yICh2YXIgaSA9IGluZGV4LCBrID0gaSArIDEsIG4gPSBsaXN0Lmxlbmd0aDsgayA8IG47IGkgKz0gMSwgayArPSAxKSB7XG4gICAgbGlzdFtpXSA9IGxpc3Rba107XG4gIH1cblxuICBsaXN0LnBvcCgpO1xufVxuXG4vLyBUaGlzIGltcGxlbWVudGF0aW9uIGlzIGJhc2VkIGhlYXZpbHkgb24gbm9kZSdzIHVybC5wYXJzZVxuZnVuY3Rpb24gcmVzb2x2ZVBhdGhuYW1lKHRvKSB7XG4gIHZhciBmcm9tID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiAnJztcblxuICB2YXIgdG9QYXJ0cyA9IHRvICYmIHRvLnNwbGl0KCcvJykgfHwgW107XG4gIHZhciBmcm9tUGFydHMgPSBmcm9tICYmIGZyb20uc3BsaXQoJy8nKSB8fCBbXTtcblxuICB2YXIgaXNUb0FicyA9IHRvICYmIGlzQWJzb2x1dGUodG8pO1xuICB2YXIgaXNGcm9tQWJzID0gZnJvbSAmJiBpc0Fic29sdXRlKGZyb20pO1xuICB2YXIgbXVzdEVuZEFicyA9IGlzVG9BYnMgfHwgaXNGcm9tQWJzO1xuXG4gIGlmICh0byAmJiBpc0Fic29sdXRlKHRvKSkge1xuICAgIC8vIHRvIGlzIGFic29sdXRlXG4gICAgZnJvbVBhcnRzID0gdG9QYXJ0cztcbiAgfSBlbHNlIGlmICh0b1BhcnRzLmxlbmd0aCkge1xuICAgIC8vIHRvIGlzIHJlbGF0aXZlLCBkcm9wIHRoZSBmaWxlbmFtZVxuICAgIGZyb21QYXJ0cy5wb3AoKTtcbiAgICBmcm9tUGFydHMgPSBmcm9tUGFydHMuY29uY2F0KHRvUGFydHMpO1xuICB9XG5cbiAgaWYgKCFmcm9tUGFydHMubGVuZ3RoKSByZXR1cm4gJy8nO1xuXG4gIHZhciBoYXNUcmFpbGluZ1NsYXNoID0gdm9pZCAwO1xuICBpZiAoZnJvbVBhcnRzLmxlbmd0aCkge1xuICAgIHZhciBsYXN0ID0gZnJvbVBhcnRzW2Zyb21QYXJ0cy5sZW5ndGggLSAxXTtcbiAgICBoYXNUcmFpbGluZ1NsYXNoID0gbGFzdCA9PT0gJy4nIHx8IGxhc3QgPT09ICcuLicgfHwgbGFzdCA9PT0gJyc7XG4gIH0gZWxzZSB7XG4gICAgaGFzVHJhaWxpbmdTbGFzaCA9IGZhbHNlO1xuICB9XG5cbiAgdmFyIHVwID0gMDtcbiAgZm9yICh2YXIgaSA9IGZyb21QYXJ0cy5sZW5ndGg7IGkgPj0gMDsgaS0tKSB7XG4gICAgdmFyIHBhcnQgPSBmcm9tUGFydHNbaV07XG5cbiAgICBpZiAocGFydCA9PT0gJy4nKSB7XG4gICAgICBzcGxpY2VPbmUoZnJvbVBhcnRzLCBpKTtcbiAgICB9IGVsc2UgaWYgKHBhcnQgPT09ICcuLicpIHtcbiAgICAgIHNwbGljZU9uZShmcm9tUGFydHMsIGkpO1xuICAgICAgdXArKztcbiAgICB9IGVsc2UgaWYgKHVwKSB7XG4gICAgICBzcGxpY2VPbmUoZnJvbVBhcnRzLCBpKTtcbiAgICAgIHVwLS07XG4gICAgfVxuICB9XG5cbiAgaWYgKCFtdXN0RW5kQWJzKSBmb3IgKDsgdXAtLTsgdXApIHtcbiAgICBmcm9tUGFydHMudW5zaGlmdCgnLi4nKTtcbiAgfWlmIChtdXN0RW5kQWJzICYmIGZyb21QYXJ0c1swXSAhPT0gJycgJiYgKCFmcm9tUGFydHNbMF0gfHwgIWlzQWJzb2x1dGUoZnJvbVBhcnRzWzBdKSkpIGZyb21QYXJ0cy51bnNoaWZ0KCcnKTtcblxuICB2YXIgcmVzdWx0ID0gZnJvbVBhcnRzLmpvaW4oJy8nKTtcblxuICBpZiAoaGFzVHJhaWxpbmdTbGFzaCAmJiByZXN1bHQuc3Vic3RyKC0xKSAhPT0gJy8nKSByZXN1bHQgKz0gJy8nO1xuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHJlc29sdmVQYXRobmFtZTsiLCJ2YXIgX3R5cGVvZiA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07XG5cbmZ1bmN0aW9uIHZhbHVlRXF1YWwoYSwgYikge1xuICBpZiAoYSA9PT0gYikgcmV0dXJuIHRydWU7XG5cbiAgaWYgKGEgPT0gbnVsbCB8fCBiID09IG51bGwpIHJldHVybiBmYWxzZTtcblxuICBpZiAoQXJyYXkuaXNBcnJheShhKSkge1xuICAgIHJldHVybiBBcnJheS5pc0FycmF5KGIpICYmIGEubGVuZ3RoID09PSBiLmxlbmd0aCAmJiBhLmV2ZXJ5KGZ1bmN0aW9uIChpdGVtLCBpbmRleCkge1xuICAgICAgcmV0dXJuIHZhbHVlRXF1YWwoaXRlbSwgYltpbmRleF0pO1xuICAgIH0pO1xuICB9XG5cbiAgdmFyIGFUeXBlID0gdHlwZW9mIGEgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKGEpO1xuICB2YXIgYlR5cGUgPSB0eXBlb2YgYiA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YoYik7XG5cbiAgaWYgKGFUeXBlICE9PSBiVHlwZSkgcmV0dXJuIGZhbHNlO1xuXG4gIGlmIChhVHlwZSA9PT0gJ29iamVjdCcpIHtcbiAgICB2YXIgYVZhbHVlID0gYS52YWx1ZU9mKCk7XG4gICAgdmFyIGJWYWx1ZSA9IGIudmFsdWVPZigpO1xuXG4gICAgaWYgKGFWYWx1ZSAhPT0gYSB8fCBiVmFsdWUgIT09IGIpIHJldHVybiB2YWx1ZUVxdWFsKGFWYWx1ZSwgYlZhbHVlKTtcblxuICAgIHZhciBhS2V5cyA9IE9iamVjdC5rZXlzKGEpO1xuICAgIHZhciBiS2V5cyA9IE9iamVjdC5rZXlzKGIpO1xuXG4gICAgaWYgKGFLZXlzLmxlbmd0aCAhPT0gYktleXMubGVuZ3RoKSByZXR1cm4gZmFsc2U7XG5cbiAgICByZXR1cm4gYUtleXMuZXZlcnkoZnVuY3Rpb24gKGtleSkge1xuICAgICAgcmV0dXJuIHZhbHVlRXF1YWwoYVtrZXldLCBiW2tleV0pO1xuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5leHBvcnQgZGVmYXVsdCB2YWx1ZUVxdWFsOyIsImV4cG9ydCB2YXIgYWRkTGVhZGluZ1NsYXNoID0gZnVuY3Rpb24gYWRkTGVhZGluZ1NsYXNoKHBhdGgpIHtcbiAgcmV0dXJuIHBhdGguY2hhckF0KDApID09PSAnLycgPyBwYXRoIDogJy8nICsgcGF0aDtcbn07XG5cbmV4cG9ydCB2YXIgc3RyaXBMZWFkaW5nU2xhc2ggPSBmdW5jdGlvbiBzdHJpcExlYWRpbmdTbGFzaChwYXRoKSB7XG4gIHJldHVybiBwYXRoLmNoYXJBdCgwKSA9PT0gJy8nID8gcGF0aC5zdWJzdHIoMSkgOiBwYXRoO1xufTtcblxuZXhwb3J0IHZhciBoYXNCYXNlbmFtZSA9IGZ1bmN0aW9uIGhhc0Jhc2VuYW1lKHBhdGgsIHByZWZpeCkge1xuICByZXR1cm4gbmV3IFJlZ0V4cCgnXicgKyBwcmVmaXggKyAnKFxcXFwvfFxcXFw/fCN8JCknLCAnaScpLnRlc3QocGF0aCk7XG59O1xuXG5leHBvcnQgdmFyIHN0cmlwQmFzZW5hbWUgPSBmdW5jdGlvbiBzdHJpcEJhc2VuYW1lKHBhdGgsIHByZWZpeCkge1xuICByZXR1cm4gaGFzQmFzZW5hbWUocGF0aCwgcHJlZml4KSA/IHBhdGguc3Vic3RyKHByZWZpeC5sZW5ndGgpIDogcGF0aDtcbn07XG5cbmV4cG9ydCB2YXIgc3RyaXBUcmFpbGluZ1NsYXNoID0gZnVuY3Rpb24gc3RyaXBUcmFpbGluZ1NsYXNoKHBhdGgpIHtcbiAgcmV0dXJuIHBhdGguY2hhckF0KHBhdGgubGVuZ3RoIC0gMSkgPT09ICcvJyA/IHBhdGguc2xpY2UoMCwgLTEpIDogcGF0aDtcbn07XG5cbmV4cG9ydCB2YXIgcGFyc2VQYXRoID0gZnVuY3Rpb24gcGFyc2VQYXRoKHBhdGgpIHtcbiAgdmFyIHBhdGhuYW1lID0gcGF0aCB8fCAnLyc7XG4gIHZhciBzZWFyY2ggPSAnJztcbiAgdmFyIGhhc2ggPSAnJztcblxuICB2YXIgaGFzaEluZGV4ID0gcGF0aG5hbWUuaW5kZXhPZignIycpO1xuICBpZiAoaGFzaEluZGV4ICE9PSAtMSkge1xuICAgIGhhc2ggPSBwYXRobmFtZS5zdWJzdHIoaGFzaEluZGV4KTtcbiAgICBwYXRobmFtZSA9IHBhdGhuYW1lLnN1YnN0cigwLCBoYXNoSW5kZXgpO1xuICB9XG5cbiAgdmFyIHNlYXJjaEluZGV4ID0gcGF0aG5hbWUuaW5kZXhPZignPycpO1xuICBpZiAoc2VhcmNoSW5kZXggIT09IC0xKSB7XG4gICAgc2VhcmNoID0gcGF0aG5hbWUuc3Vic3RyKHNlYXJjaEluZGV4KTtcbiAgICBwYXRobmFtZSA9IHBhdGhuYW1lLnN1YnN0cigwLCBzZWFyY2hJbmRleCk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHBhdGhuYW1lOiBwYXRobmFtZSxcbiAgICBzZWFyY2g6IHNlYXJjaCA9PT0gJz8nID8gJycgOiBzZWFyY2gsXG4gICAgaGFzaDogaGFzaCA9PT0gJyMnID8gJycgOiBoYXNoXG4gIH07XG59O1xuXG5leHBvcnQgdmFyIGNyZWF0ZVBhdGggPSBmdW5jdGlvbiBjcmVhdGVQYXRoKGxvY2F0aW9uKSB7XG4gIHZhciBwYXRobmFtZSA9IGxvY2F0aW9uLnBhdGhuYW1lLFxuICAgICAgc2VhcmNoID0gbG9jYXRpb24uc2VhcmNoLFxuICAgICAgaGFzaCA9IGxvY2F0aW9uLmhhc2g7XG5cblxuICB2YXIgcGF0aCA9IHBhdGhuYW1lIHx8ICcvJztcblxuICBpZiAoc2VhcmNoICYmIHNlYXJjaCAhPT0gJz8nKSBwYXRoICs9IHNlYXJjaC5jaGFyQXQoMCkgPT09ICc/JyA/IHNlYXJjaCA6ICc/JyArIHNlYXJjaDtcblxuICBpZiAoaGFzaCAmJiBoYXNoICE9PSAnIycpIHBhdGggKz0gaGFzaC5jaGFyQXQoMCkgPT09ICcjJyA/IGhhc2ggOiAnIycgKyBoYXNoO1xuXG4gIHJldHVybiBwYXRoO1xufTsiLCJ2YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG5pbXBvcnQgcmVzb2x2ZVBhdGhuYW1lIGZyb20gJ3Jlc29sdmUtcGF0aG5hbWUnO1xuaW1wb3J0IHZhbHVlRXF1YWwgZnJvbSAndmFsdWUtZXF1YWwnO1xuaW1wb3J0IHsgcGFyc2VQYXRoIH0gZnJvbSAnLi9QYXRoVXRpbHMnO1xuXG5leHBvcnQgdmFyIGNyZWF0ZUxvY2F0aW9uID0gZnVuY3Rpb24gY3JlYXRlTG9jYXRpb24ocGF0aCwgc3RhdGUsIGtleSwgY3VycmVudExvY2F0aW9uKSB7XG4gIHZhciBsb2NhdGlvbiA9IHZvaWQgMDtcbiAgaWYgKHR5cGVvZiBwYXRoID09PSAnc3RyaW5nJykge1xuICAgIC8vIFR3by1hcmcgZm9ybTogcHVzaChwYXRoLCBzdGF0ZSlcbiAgICBsb2NhdGlvbiA9IHBhcnNlUGF0aChwYXRoKTtcbiAgICBsb2NhdGlvbi5zdGF0ZSA9IHN0YXRlO1xuICB9IGVsc2Uge1xuICAgIC8vIE9uZS1hcmcgZm9ybTogcHVzaChsb2NhdGlvbilcbiAgICBsb2NhdGlvbiA9IF9leHRlbmRzKHt9LCBwYXRoKTtcblxuICAgIGlmIChsb2NhdGlvbi5wYXRobmFtZSA9PT0gdW5kZWZpbmVkKSBsb2NhdGlvbi5wYXRobmFtZSA9ICcnO1xuXG4gICAgaWYgKGxvY2F0aW9uLnNlYXJjaCkge1xuICAgICAgaWYgKGxvY2F0aW9uLnNlYXJjaC5jaGFyQXQoMCkgIT09ICc/JykgbG9jYXRpb24uc2VhcmNoID0gJz8nICsgbG9jYXRpb24uc2VhcmNoO1xuICAgIH0gZWxzZSB7XG4gICAgICBsb2NhdGlvbi5zZWFyY2ggPSAnJztcbiAgICB9XG5cbiAgICBpZiAobG9jYXRpb24uaGFzaCkge1xuICAgICAgaWYgKGxvY2F0aW9uLmhhc2guY2hhckF0KDApICE9PSAnIycpIGxvY2F0aW9uLmhhc2ggPSAnIycgKyBsb2NhdGlvbi5oYXNoO1xuICAgIH0gZWxzZSB7XG4gICAgICBsb2NhdGlvbi5oYXNoID0gJyc7XG4gICAgfVxuXG4gICAgaWYgKHN0YXRlICE9PSB1bmRlZmluZWQgJiYgbG9jYXRpb24uc3RhdGUgPT09IHVuZGVmaW5lZCkgbG9jYXRpb24uc3RhdGUgPSBzdGF0ZTtcbiAgfVxuXG4gIHRyeSB7XG4gICAgbG9jYXRpb24ucGF0aG5hbWUgPSBkZWNvZGVVUkkobG9jYXRpb24ucGF0aG5hbWUpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgaWYgKGUgaW5zdGFuY2VvZiBVUklFcnJvcikge1xuICAgICAgdGhyb3cgbmV3IFVSSUVycm9yKCdQYXRobmFtZSBcIicgKyBsb2NhdGlvbi5wYXRobmFtZSArICdcIiBjb3VsZCBub3QgYmUgZGVjb2RlZC4gJyArICdUaGlzIGlzIGxpa2VseSBjYXVzZWQgYnkgYW4gaW52YWxpZCBwZXJjZW50LWVuY29kaW5nLicpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBlO1xuICAgIH1cbiAgfVxuXG4gIGlmIChrZXkpIGxvY2F0aW9uLmtleSA9IGtleTtcblxuICBpZiAoY3VycmVudExvY2F0aW9uKSB7XG4gICAgLy8gUmVzb2x2ZSBpbmNvbXBsZXRlL3JlbGF0aXZlIHBhdGhuYW1lIHJlbGF0aXZlIHRvIGN1cnJlbnQgbG9jYXRpb24uXG4gICAgaWYgKCFsb2NhdGlvbi5wYXRobmFtZSkge1xuICAgICAgbG9jYXRpb24ucGF0aG5hbWUgPSBjdXJyZW50TG9jYXRpb24ucGF0aG5hbWU7XG4gICAgfSBlbHNlIGlmIChsb2NhdGlvbi5wYXRobmFtZS5jaGFyQXQoMCkgIT09ICcvJykge1xuICAgICAgbG9jYXRpb24ucGF0aG5hbWUgPSByZXNvbHZlUGF0aG5hbWUobG9jYXRpb24ucGF0aG5hbWUsIGN1cnJlbnRMb2NhdGlvbi5wYXRobmFtZSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIFdoZW4gdGhlcmUgaXMgbm8gcHJpb3IgbG9jYXRpb24gYW5kIHBhdGhuYW1lIGlzIGVtcHR5LCBzZXQgaXQgdG8gL1xuICAgIGlmICghbG9jYXRpb24ucGF0aG5hbWUpIHtcbiAgICAgIGxvY2F0aW9uLnBhdGhuYW1lID0gJy8nO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBsb2NhdGlvbjtcbn07XG5cbmV4cG9ydCB2YXIgbG9jYXRpb25zQXJlRXF1YWwgPSBmdW5jdGlvbiBsb2NhdGlvbnNBcmVFcXVhbChhLCBiKSB7XG4gIHJldHVybiBhLnBhdGhuYW1lID09PSBiLnBhdGhuYW1lICYmIGEuc2VhcmNoID09PSBiLnNlYXJjaCAmJiBhLmhhc2ggPT09IGIuaGFzaCAmJiBhLmtleSA9PT0gYi5rZXkgJiYgdmFsdWVFcXVhbChhLnN0YXRlLCBiLnN0YXRlKTtcbn07IiwiaW1wb3J0IHdhcm5pbmcgZnJvbSAnd2FybmluZyc7XG5cbnZhciBjcmVhdGVUcmFuc2l0aW9uTWFuYWdlciA9IGZ1bmN0aW9uIGNyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyKCkge1xuICB2YXIgcHJvbXB0ID0gbnVsbDtcblxuICB2YXIgc2V0UHJvbXB0ID0gZnVuY3Rpb24gc2V0UHJvbXB0KG5leHRQcm9tcHQpIHtcbiAgICB3YXJuaW5nKHByb21wdCA9PSBudWxsLCAnQSBoaXN0b3J5IHN1cHBvcnRzIG9ubHkgb25lIHByb21wdCBhdCBhIHRpbWUnKTtcblxuICAgIHByb21wdCA9IG5leHRQcm9tcHQ7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKHByb21wdCA9PT0gbmV4dFByb21wdCkgcHJvbXB0ID0gbnVsbDtcbiAgICB9O1xuICB9O1xuXG4gIHZhciBjb25maXJtVHJhbnNpdGlvblRvID0gZnVuY3Rpb24gY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBjYWxsYmFjaykge1xuICAgIC8vIFRPRE86IElmIGFub3RoZXIgdHJhbnNpdGlvbiBzdGFydHMgd2hpbGUgd2UncmUgc3RpbGwgY29uZmlybWluZ1xuICAgIC8vIHRoZSBwcmV2aW91cyBvbmUsIHdlIG1heSBlbmQgdXAgaW4gYSB3ZWlyZCBzdGF0ZS4gRmlndXJlIG91dCB0aGVcbiAgICAvLyBiZXN0IHdheSB0byBoYW5kbGUgdGhpcy5cbiAgICBpZiAocHJvbXB0ICE9IG51bGwpIHtcbiAgICAgIHZhciByZXN1bHQgPSB0eXBlb2YgcHJvbXB0ID09PSAnZnVuY3Rpb24nID8gcHJvbXB0KGxvY2F0aW9uLCBhY3Rpb24pIDogcHJvbXB0O1xuXG4gICAgICBpZiAodHlwZW9mIHJlc3VsdCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBnZXRVc2VyQ29uZmlybWF0aW9uID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgZ2V0VXNlckNvbmZpcm1hdGlvbihyZXN1bHQsIGNhbGxiYWNrKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB3YXJuaW5nKGZhbHNlLCAnQSBoaXN0b3J5IG5lZWRzIGEgZ2V0VXNlckNvbmZpcm1hdGlvbiBmdW5jdGlvbiBpbiBvcmRlciB0byB1c2UgYSBwcm9tcHQgbWVzc2FnZScpO1xuXG4gICAgICAgICAgY2FsbGJhY2sodHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIFJldHVybiBmYWxzZSBmcm9tIGEgdHJhbnNpdGlvbiBob29rIHRvIGNhbmNlbCB0aGUgdHJhbnNpdGlvbi5cbiAgICAgICAgY2FsbGJhY2socmVzdWx0ICE9PSBmYWxzZSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGNhbGxiYWNrKHRydWUpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgbGlzdGVuZXJzID0gW107XG5cbiAgdmFyIGFwcGVuZExpc3RlbmVyID0gZnVuY3Rpb24gYXBwZW5kTGlzdGVuZXIoZm4pIHtcbiAgICB2YXIgaXNBY3RpdmUgPSB0cnVlO1xuXG4gICAgdmFyIGxpc3RlbmVyID0gZnVuY3Rpb24gbGlzdGVuZXIoKSB7XG4gICAgICBpZiAoaXNBY3RpdmUpIGZuLmFwcGx5KHVuZGVmaW5lZCwgYXJndW1lbnRzKTtcbiAgICB9O1xuXG4gICAgbGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlzQWN0aXZlID0gZmFsc2U7XG4gICAgICBsaXN0ZW5lcnMgPSBsaXN0ZW5lcnMuZmlsdGVyKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICAgIHJldHVybiBpdGVtICE9PSBsaXN0ZW5lcjtcbiAgICAgIH0pO1xuICAgIH07XG4gIH07XG5cbiAgdmFyIG5vdGlmeUxpc3RlbmVycyA9IGZ1bmN0aW9uIG5vdGlmeUxpc3RlbmVycygpIHtcbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBsaXN0ZW5lcnMuZm9yRWFjaChmdW5jdGlvbiAobGlzdGVuZXIpIHtcbiAgICAgIHJldHVybiBsaXN0ZW5lci5hcHBseSh1bmRlZmluZWQsIGFyZ3MpO1xuICAgIH0pO1xuICB9O1xuXG4gIHJldHVybiB7XG4gICAgc2V0UHJvbXB0OiBzZXRQcm9tcHQsXG4gICAgY29uZmlybVRyYW5zaXRpb25UbzogY29uZmlybVRyYW5zaXRpb25UbyxcbiAgICBhcHBlbmRMaXN0ZW5lcjogYXBwZW5kTGlzdGVuZXIsXG4gICAgbm90aWZ5TGlzdGVuZXJzOiBub3RpZnlMaXN0ZW5lcnNcbiAgfTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyOyIsImV4cG9ydCB2YXIgY2FuVXNlRE9NID0gISEodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LmRvY3VtZW50ICYmIHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KTtcblxuZXhwb3J0IHZhciBhZGRFdmVudExpc3RlbmVyID0gZnVuY3Rpb24gYWRkRXZlbnRMaXN0ZW5lcihub2RlLCBldmVudCwgbGlzdGVuZXIpIHtcbiAgcmV0dXJuIG5vZGUuYWRkRXZlbnRMaXN0ZW5lciA/IG5vZGUuYWRkRXZlbnRMaXN0ZW5lcihldmVudCwgbGlzdGVuZXIsIGZhbHNlKSA6IG5vZGUuYXR0YWNoRXZlbnQoJ29uJyArIGV2ZW50LCBsaXN0ZW5lcik7XG59O1xuXG5leHBvcnQgdmFyIHJlbW92ZUV2ZW50TGlzdGVuZXIgPSBmdW5jdGlvbiByZW1vdmVFdmVudExpc3RlbmVyKG5vZGUsIGV2ZW50LCBsaXN0ZW5lcikge1xuICByZXR1cm4gbm9kZS5yZW1vdmVFdmVudExpc3RlbmVyID8gbm9kZS5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50LCBsaXN0ZW5lciwgZmFsc2UpIDogbm9kZS5kZXRhY2hFdmVudCgnb24nICsgZXZlbnQsIGxpc3RlbmVyKTtcbn07XG5cbmV4cG9ydCB2YXIgZ2V0Q29uZmlybWF0aW9uID0gZnVuY3Rpb24gZ2V0Q29uZmlybWF0aW9uKG1lc3NhZ2UsIGNhbGxiYWNrKSB7XG4gIHJldHVybiBjYWxsYmFjayh3aW5kb3cuY29uZmlybShtZXNzYWdlKSk7XG59OyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWFsZXJ0XG5cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIHRoZSBIVE1MNSBoaXN0b3J5IEFQSSBpcyBzdXBwb3J0ZWQuIFRha2VuIGZyb20gTW9kZXJuaXpyLlxuICpcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9Nb2Rlcm5penIvTW9kZXJuaXpyL2Jsb2IvbWFzdGVyL0xJQ0VOU0VcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9Nb2Rlcm5penIvTW9kZXJuaXpyL2Jsb2IvbWFzdGVyL2ZlYXR1cmUtZGV0ZWN0cy9oaXN0b3J5LmpzXG4gKiBjaGFuZ2VkIHRvIGF2b2lkIGZhbHNlIG5lZ2F0aXZlcyBmb3IgV2luZG93cyBQaG9uZXM6IGh0dHBzOi8vZ2l0aHViLmNvbS9yZWFjdGpzL3JlYWN0LXJvdXRlci9pc3N1ZXMvNTg2XG4gKi9cbmV4cG9ydCB2YXIgc3VwcG9ydHNIaXN0b3J5ID0gZnVuY3Rpb24gc3VwcG9ydHNIaXN0b3J5KCkge1xuICB2YXIgdWEgPSB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudDtcblxuICBpZiAoKHVhLmluZGV4T2YoJ0FuZHJvaWQgMi4nKSAhPT0gLTEgfHwgdWEuaW5kZXhPZignQW5kcm9pZCA0LjAnKSAhPT0gLTEpICYmIHVhLmluZGV4T2YoJ01vYmlsZSBTYWZhcmknKSAhPT0gLTEgJiYgdWEuaW5kZXhPZignQ2hyb21lJykgPT09IC0xICYmIHVhLmluZGV4T2YoJ1dpbmRvd3MgUGhvbmUnKSA9PT0gLTEpIHJldHVybiBmYWxzZTtcblxuICByZXR1cm4gd2luZG93Lmhpc3RvcnkgJiYgJ3B1c2hTdGF0ZScgaW4gd2luZG93Lmhpc3Rvcnk7XG59O1xuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiBicm93c2VyIGZpcmVzIHBvcHN0YXRlIG9uIGhhc2ggY2hhbmdlLlxuICogSUUxMCBhbmQgSUUxMSBkbyBub3QuXG4gKi9cbmV4cG9ydCB2YXIgc3VwcG9ydHNQb3BTdGF0ZU9uSGFzaENoYW5nZSA9IGZ1bmN0aW9uIHN1cHBvcnRzUG9wU3RhdGVPbkhhc2hDaGFuZ2UoKSB7XG4gIHJldHVybiB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCdUcmlkZW50JykgPT09IC0xO1xufTtcblxuLyoqXG4gKiBSZXR1cm5zIGZhbHNlIGlmIHVzaW5nIGdvKG4pIHdpdGggaGFzaCBoaXN0b3J5IGNhdXNlcyBhIGZ1bGwgcGFnZSByZWxvYWQuXG4gKi9cbmV4cG9ydCB2YXIgc3VwcG9ydHNHb1dpdGhvdXRSZWxvYWRVc2luZ0hhc2ggPSBmdW5jdGlvbiBzdXBwb3J0c0dvV2l0aG91dFJlbG9hZFVzaW5nSGFzaCgpIHtcbiAgcmV0dXJuIHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoJ0ZpcmVmb3gnKSA9PT0gLTE7XG59O1xuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiBhIGdpdmVuIHBvcHN0YXRlIGV2ZW50IGlzIGFuIGV4dHJhbmVvdXMgV2ViS2l0IGV2ZW50LlxuICogQWNjb3VudHMgZm9yIHRoZSBmYWN0IHRoYXQgQ2hyb21lIG9uIGlPUyBmaXJlcyByZWFsIHBvcHN0YXRlIGV2ZW50c1xuICogY29udGFpbmluZyB1bmRlZmluZWQgc3RhdGUgd2hlbiBwcmVzc2luZyB0aGUgYmFjayBidXR0b24uXG4gKi9cbmV4cG9ydCB2YXIgaXNFeHRyYW5lb3VzUG9wc3RhdGVFdmVudCA9IGZ1bmN0aW9uIGlzRXh0cmFuZW91c1BvcHN0YXRlRXZlbnQoZXZlbnQpIHtcbiAgcmV0dXJuIGV2ZW50LnN0YXRlID09PSB1bmRlZmluZWQgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCdDcmlPUycpID09PSAtMTtcbn07IiwidmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG5pbXBvcnQgd2FybmluZyBmcm9tICd3YXJuaW5nJztcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSAnaW52YXJpYW50JztcbmltcG9ydCB7IGNyZWF0ZUxvY2F0aW9uIH0gZnJvbSAnLi9Mb2NhdGlvblV0aWxzJztcbmltcG9ydCB7IGFkZExlYWRpbmdTbGFzaCwgc3RyaXBUcmFpbGluZ1NsYXNoLCBoYXNCYXNlbmFtZSwgc3RyaXBCYXNlbmFtZSwgY3JlYXRlUGF0aCB9IGZyb20gJy4vUGF0aFV0aWxzJztcbmltcG9ydCBjcmVhdGVUcmFuc2l0aW9uTWFuYWdlciBmcm9tICcuL2NyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyJztcbmltcG9ydCB7IGNhblVzZURPTSwgYWRkRXZlbnRMaXN0ZW5lciwgcmVtb3ZlRXZlbnRMaXN0ZW5lciwgZ2V0Q29uZmlybWF0aW9uLCBzdXBwb3J0c0hpc3RvcnksIHN1cHBvcnRzUG9wU3RhdGVPbkhhc2hDaGFuZ2UsIGlzRXh0cmFuZW91c1BvcHN0YXRlRXZlbnQgfSBmcm9tICcuL0RPTVV0aWxzJztcblxudmFyIFBvcFN0YXRlRXZlbnQgPSAncG9wc3RhdGUnO1xudmFyIEhhc2hDaGFuZ2VFdmVudCA9ICdoYXNoY2hhbmdlJztcblxudmFyIGdldEhpc3RvcnlTdGF0ZSA9IGZ1bmN0aW9uIGdldEhpc3RvcnlTdGF0ZSgpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gd2luZG93Lmhpc3Rvcnkuc3RhdGUgfHwge307XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICAvLyBJRSAxMSBzb21ldGltZXMgdGhyb3dzIHdoZW4gYWNjZXNzaW5nIHdpbmRvdy5oaXN0b3J5LnN0YXRlXG4gICAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9SZWFjdFRyYWluaW5nL2hpc3RvcnkvcHVsbC8yODlcbiAgICByZXR1cm4ge307XG4gIH1cbn07XG5cbi8qKlxuICogQ3JlYXRlcyBhIGhpc3Rvcnkgb2JqZWN0IHRoYXQgdXNlcyB0aGUgSFRNTDUgaGlzdG9yeSBBUEkgaW5jbHVkaW5nXG4gKiBwdXNoU3RhdGUsIHJlcGxhY2VTdGF0ZSwgYW5kIHRoZSBwb3BzdGF0ZSBldmVudC5cbiAqL1xudmFyIGNyZWF0ZUJyb3dzZXJIaXN0b3J5ID0gZnVuY3Rpb24gY3JlYXRlQnJvd3Nlckhpc3RvcnkoKSB7XG4gIHZhciBwcm9wcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG5cbiAgaW52YXJpYW50KGNhblVzZURPTSwgJ0Jyb3dzZXIgaGlzdG9yeSBuZWVkcyBhIERPTScpO1xuXG4gIHZhciBnbG9iYWxIaXN0b3J5ID0gd2luZG93Lmhpc3Rvcnk7XG4gIHZhciBjYW5Vc2VIaXN0b3J5ID0gc3VwcG9ydHNIaXN0b3J5KCk7XG4gIHZhciBuZWVkc0hhc2hDaGFuZ2VMaXN0ZW5lciA9ICFzdXBwb3J0c1BvcFN0YXRlT25IYXNoQ2hhbmdlKCk7XG5cbiAgdmFyIF9wcm9wcyRmb3JjZVJlZnJlc2ggPSBwcm9wcy5mb3JjZVJlZnJlc2gsXG4gICAgICBmb3JjZVJlZnJlc2ggPSBfcHJvcHMkZm9yY2VSZWZyZXNoID09PSB1bmRlZmluZWQgPyBmYWxzZSA6IF9wcm9wcyRmb3JjZVJlZnJlc2gsXG4gICAgICBfcHJvcHMkZ2V0VXNlckNvbmZpcm0gPSBwcm9wcy5nZXRVc2VyQ29uZmlybWF0aW9uLFxuICAgICAgZ2V0VXNlckNvbmZpcm1hdGlvbiA9IF9wcm9wcyRnZXRVc2VyQ29uZmlybSA9PT0gdW5kZWZpbmVkID8gZ2V0Q29uZmlybWF0aW9uIDogX3Byb3BzJGdldFVzZXJDb25maXJtLFxuICAgICAgX3Byb3BzJGtleUxlbmd0aCA9IHByb3BzLmtleUxlbmd0aCxcbiAgICAgIGtleUxlbmd0aCA9IF9wcm9wcyRrZXlMZW5ndGggPT09IHVuZGVmaW5lZCA/IDYgOiBfcHJvcHMka2V5TGVuZ3RoO1xuXG4gIHZhciBiYXNlbmFtZSA9IHByb3BzLmJhc2VuYW1lID8gc3RyaXBUcmFpbGluZ1NsYXNoKGFkZExlYWRpbmdTbGFzaChwcm9wcy5iYXNlbmFtZSkpIDogJyc7XG5cbiAgdmFyIGdldERPTUxvY2F0aW9uID0gZnVuY3Rpb24gZ2V0RE9NTG9jYXRpb24oaGlzdG9yeVN0YXRlKSB7XG4gICAgdmFyIF9yZWYgPSBoaXN0b3J5U3RhdGUgfHwge30sXG4gICAgICAgIGtleSA9IF9yZWYua2V5LFxuICAgICAgICBzdGF0ZSA9IF9yZWYuc3RhdGU7XG5cbiAgICB2YXIgX3dpbmRvdyRsb2NhdGlvbiA9IHdpbmRvdy5sb2NhdGlvbixcbiAgICAgICAgcGF0aG5hbWUgPSBfd2luZG93JGxvY2F0aW9uLnBhdGhuYW1lLFxuICAgICAgICBzZWFyY2ggPSBfd2luZG93JGxvY2F0aW9uLnNlYXJjaCxcbiAgICAgICAgaGFzaCA9IF93aW5kb3ckbG9jYXRpb24uaGFzaDtcblxuXG4gICAgdmFyIHBhdGggPSBwYXRobmFtZSArIHNlYXJjaCArIGhhc2g7XG5cbiAgICB3YXJuaW5nKCFiYXNlbmFtZSB8fCBoYXNCYXNlbmFtZShwYXRoLCBiYXNlbmFtZSksICdZb3UgYXJlIGF0dGVtcHRpbmcgdG8gdXNlIGEgYmFzZW5hbWUgb24gYSBwYWdlIHdob3NlIFVSTCBwYXRoIGRvZXMgbm90IGJlZ2luICcgKyAnd2l0aCB0aGUgYmFzZW5hbWUuIEV4cGVjdGVkIHBhdGggXCInICsgcGF0aCArICdcIiB0byBiZWdpbiB3aXRoIFwiJyArIGJhc2VuYW1lICsgJ1wiLicpO1xuXG4gICAgaWYgKGJhc2VuYW1lKSBwYXRoID0gc3RyaXBCYXNlbmFtZShwYXRoLCBiYXNlbmFtZSk7XG5cbiAgICByZXR1cm4gY3JlYXRlTG9jYXRpb24ocGF0aCwgc3RhdGUsIGtleSk7XG4gIH07XG5cbiAgdmFyIGNyZWF0ZUtleSA9IGZ1bmN0aW9uIGNyZWF0ZUtleSgpIHtcbiAgICByZXR1cm4gTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyKDIsIGtleUxlbmd0aCk7XG4gIH07XG5cbiAgdmFyIHRyYW5zaXRpb25NYW5hZ2VyID0gY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIoKTtcblxuICB2YXIgc2V0U3RhdGUgPSBmdW5jdGlvbiBzZXRTdGF0ZShuZXh0U3RhdGUpIHtcbiAgICBfZXh0ZW5kcyhoaXN0b3J5LCBuZXh0U3RhdGUpO1xuXG4gICAgaGlzdG9yeS5sZW5ndGggPSBnbG9iYWxIaXN0b3J5Lmxlbmd0aDtcblxuICAgIHRyYW5zaXRpb25NYW5hZ2VyLm5vdGlmeUxpc3RlbmVycyhoaXN0b3J5LmxvY2F0aW9uLCBoaXN0b3J5LmFjdGlvbik7XG4gIH07XG5cbiAgdmFyIGhhbmRsZVBvcFN0YXRlID0gZnVuY3Rpb24gaGFuZGxlUG9wU3RhdGUoZXZlbnQpIHtcbiAgICAvLyBJZ25vcmUgZXh0cmFuZW91cyBwb3BzdGF0ZSBldmVudHMgaW4gV2ViS2l0LlxuICAgIGlmIChpc0V4dHJhbmVvdXNQb3BzdGF0ZUV2ZW50KGV2ZW50KSkgcmV0dXJuO1xuXG4gICAgaGFuZGxlUG9wKGdldERPTUxvY2F0aW9uKGV2ZW50LnN0YXRlKSk7XG4gIH07XG5cbiAgdmFyIGhhbmRsZUhhc2hDaGFuZ2UgPSBmdW5jdGlvbiBoYW5kbGVIYXNoQ2hhbmdlKCkge1xuICAgIGhhbmRsZVBvcChnZXRET01Mb2NhdGlvbihnZXRIaXN0b3J5U3RhdGUoKSkpO1xuICB9O1xuXG4gIHZhciBmb3JjZU5leHRQb3AgPSBmYWxzZTtcblxuICB2YXIgaGFuZGxlUG9wID0gZnVuY3Rpb24gaGFuZGxlUG9wKGxvY2F0aW9uKSB7XG4gICAgaWYgKGZvcmNlTmV4dFBvcCkge1xuICAgICAgZm9yY2VOZXh0UG9wID0gZmFsc2U7XG4gICAgICBzZXRTdGF0ZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgYWN0aW9uID0gJ1BPUCc7XG5cbiAgICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICAgIGlmIChvaykge1xuICAgICAgICAgIHNldFN0YXRlKHsgYWN0aW9uOiBhY3Rpb24sIGxvY2F0aW9uOiBsb2NhdGlvbiB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXZlcnRQb3AobG9jYXRpb24pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIHJldmVydFBvcCA9IGZ1bmN0aW9uIHJldmVydFBvcChmcm9tTG9jYXRpb24pIHtcbiAgICB2YXIgdG9Mb2NhdGlvbiA9IGhpc3RvcnkubG9jYXRpb247XG5cbiAgICAvLyBUT0RPOiBXZSBjb3VsZCBwcm9iYWJseSBtYWtlIHRoaXMgbW9yZSByZWxpYWJsZSBieVxuICAgIC8vIGtlZXBpbmcgYSBsaXN0IG9mIGtleXMgd2UndmUgc2VlbiBpbiBzZXNzaW9uU3RvcmFnZS5cbiAgICAvLyBJbnN0ZWFkLCB3ZSBqdXN0IGRlZmF1bHQgdG8gMCBmb3Iga2V5cyB3ZSBkb24ndCBrbm93LlxuXG4gICAgdmFyIHRvSW5kZXggPSBhbGxLZXlzLmluZGV4T2YodG9Mb2NhdGlvbi5rZXkpO1xuXG4gICAgaWYgKHRvSW5kZXggPT09IC0xKSB0b0luZGV4ID0gMDtcblxuICAgIHZhciBmcm9tSW5kZXggPSBhbGxLZXlzLmluZGV4T2YoZnJvbUxvY2F0aW9uLmtleSk7XG5cbiAgICBpZiAoZnJvbUluZGV4ID09PSAtMSkgZnJvbUluZGV4ID0gMDtcblxuICAgIHZhciBkZWx0YSA9IHRvSW5kZXggLSBmcm9tSW5kZXg7XG5cbiAgICBpZiAoZGVsdGEpIHtcbiAgICAgIGZvcmNlTmV4dFBvcCA9IHRydWU7XG4gICAgICBnbyhkZWx0YSk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBpbml0aWFsTG9jYXRpb24gPSBnZXRET01Mb2NhdGlvbihnZXRIaXN0b3J5U3RhdGUoKSk7XG4gIHZhciBhbGxLZXlzID0gW2luaXRpYWxMb2NhdGlvbi5rZXldO1xuXG4gIC8vIFB1YmxpYyBpbnRlcmZhY2VcblxuICB2YXIgY3JlYXRlSHJlZiA9IGZ1bmN0aW9uIGNyZWF0ZUhyZWYobG9jYXRpb24pIHtcbiAgICByZXR1cm4gYmFzZW5hbWUgKyBjcmVhdGVQYXRoKGxvY2F0aW9uKTtcbiAgfTtcblxuICB2YXIgcHVzaCA9IGZ1bmN0aW9uIHB1c2gocGF0aCwgc3RhdGUpIHtcbiAgICB3YXJuaW5nKCEoKHR5cGVvZiBwYXRoID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihwYXRoKSkgPT09ICdvYmplY3QnICYmIHBhdGguc3RhdGUgIT09IHVuZGVmaW5lZCAmJiBzdGF0ZSAhPT0gdW5kZWZpbmVkKSwgJ1lvdSBzaG91bGQgYXZvaWQgcHJvdmlkaW5nIGEgMm5kIHN0YXRlIGFyZ3VtZW50IHRvIHB1c2ggd2hlbiB0aGUgMXN0ICcgKyAnYXJndW1lbnQgaXMgYSBsb2NhdGlvbi1saWtlIG9iamVjdCB0aGF0IGFscmVhZHkgaGFzIHN0YXRlOyBpdCBpcyBpZ25vcmVkJyk7XG5cbiAgICB2YXIgYWN0aW9uID0gJ1BVU0gnO1xuICAgIHZhciBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHN0YXRlLCBjcmVhdGVLZXkoKSwgaGlzdG9yeS5sb2NhdGlvbik7XG5cbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKCFvaykgcmV0dXJuO1xuXG4gICAgICB2YXIgaHJlZiA9IGNyZWF0ZUhyZWYobG9jYXRpb24pO1xuICAgICAgdmFyIGtleSA9IGxvY2F0aW9uLmtleSxcbiAgICAgICAgICBzdGF0ZSA9IGxvY2F0aW9uLnN0YXRlO1xuXG5cbiAgICAgIGlmIChjYW5Vc2VIaXN0b3J5KSB7XG4gICAgICAgIGdsb2JhbEhpc3RvcnkucHVzaFN0YXRlKHsga2V5OiBrZXksIHN0YXRlOiBzdGF0ZSB9LCBudWxsLCBocmVmKTtcblxuICAgICAgICBpZiAoZm9yY2VSZWZyZXNoKSB7XG4gICAgICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSBocmVmO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBwcmV2SW5kZXggPSBhbGxLZXlzLmluZGV4T2YoaGlzdG9yeS5sb2NhdGlvbi5rZXkpO1xuICAgICAgICAgIHZhciBuZXh0S2V5cyA9IGFsbEtleXMuc2xpY2UoMCwgcHJldkluZGV4ID09PSAtMSA/IDAgOiBwcmV2SW5kZXggKyAxKTtcblxuICAgICAgICAgIG5leHRLZXlzLnB1c2gobG9jYXRpb24ua2V5KTtcbiAgICAgICAgICBhbGxLZXlzID0gbmV4dEtleXM7XG5cbiAgICAgICAgICBzZXRTdGF0ZSh7IGFjdGlvbjogYWN0aW9uLCBsb2NhdGlvbjogbG9jYXRpb24gfSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHdhcm5pbmcoc3RhdGUgPT09IHVuZGVmaW5lZCwgJ0Jyb3dzZXIgaGlzdG9yeSBjYW5ub3QgcHVzaCBzdGF0ZSBpbiBicm93c2VycyB0aGF0IGRvIG5vdCBzdXBwb3J0IEhUTUw1IGhpc3RvcnknKTtcblxuICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IGhyZWY7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgdmFyIHJlcGxhY2UgPSBmdW5jdGlvbiByZXBsYWNlKHBhdGgsIHN0YXRlKSB7XG4gICAgd2FybmluZyghKCh0eXBlb2YgcGF0aCA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YocGF0aCkpID09PSAnb2JqZWN0JyAmJiBwYXRoLnN0YXRlICE9PSB1bmRlZmluZWQgJiYgc3RhdGUgIT09IHVuZGVmaW5lZCksICdZb3Ugc2hvdWxkIGF2b2lkIHByb3ZpZGluZyBhIDJuZCBzdGF0ZSBhcmd1bWVudCB0byByZXBsYWNlIHdoZW4gdGhlIDFzdCAnICsgJ2FyZ3VtZW50IGlzIGEgbG9jYXRpb24tbGlrZSBvYmplY3QgdGhhdCBhbHJlYWR5IGhhcyBzdGF0ZTsgaXQgaXMgaWdub3JlZCcpO1xuXG4gICAgdmFyIGFjdGlvbiA9ICdSRVBMQUNFJztcbiAgICB2YXIgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihwYXRoLCBzdGF0ZSwgY3JlYXRlS2V5KCksIGhpc3RvcnkubG9jYXRpb24pO1xuXG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcblxuICAgICAgdmFyIGhyZWYgPSBjcmVhdGVIcmVmKGxvY2F0aW9uKTtcbiAgICAgIHZhciBrZXkgPSBsb2NhdGlvbi5rZXksXG4gICAgICAgICAgc3RhdGUgPSBsb2NhdGlvbi5zdGF0ZTtcblxuXG4gICAgICBpZiAoY2FuVXNlSGlzdG9yeSkge1xuICAgICAgICBnbG9iYWxIaXN0b3J5LnJlcGxhY2VTdGF0ZSh7IGtleToga2V5LCBzdGF0ZTogc3RhdGUgfSwgbnVsbCwgaHJlZik7XG5cbiAgICAgICAgaWYgKGZvcmNlUmVmcmVzaCkge1xuICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZXBsYWNlKGhyZWYpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBwcmV2SW5kZXggPSBhbGxLZXlzLmluZGV4T2YoaGlzdG9yeS5sb2NhdGlvbi5rZXkpO1xuXG4gICAgICAgICAgaWYgKHByZXZJbmRleCAhPT0gLTEpIGFsbEtleXNbcHJldkluZGV4XSA9IGxvY2F0aW9uLmtleTtcblxuICAgICAgICAgIHNldFN0YXRlKHsgYWN0aW9uOiBhY3Rpb24sIGxvY2F0aW9uOiBsb2NhdGlvbiB9KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgd2FybmluZyhzdGF0ZSA9PT0gdW5kZWZpbmVkLCAnQnJvd3NlciBoaXN0b3J5IGNhbm5vdCByZXBsYWNlIHN0YXRlIGluIGJyb3dzZXJzIHRoYXQgZG8gbm90IHN1cHBvcnQgSFRNTDUgaGlzdG9yeScpO1xuXG4gICAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZXBsYWNlKGhyZWYpO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIHZhciBnbyA9IGZ1bmN0aW9uIGdvKG4pIHtcbiAgICBnbG9iYWxIaXN0b3J5LmdvKG4pO1xuICB9O1xuXG4gIHZhciBnb0JhY2sgPSBmdW5jdGlvbiBnb0JhY2soKSB7XG4gICAgcmV0dXJuIGdvKC0xKTtcbiAgfTtcblxuICB2YXIgZ29Gb3J3YXJkID0gZnVuY3Rpb24gZ29Gb3J3YXJkKCkge1xuICAgIHJldHVybiBnbygxKTtcbiAgfTtcblxuICB2YXIgbGlzdGVuZXJDb3VudCA9IDA7XG5cbiAgdmFyIGNoZWNrRE9NTGlzdGVuZXJzID0gZnVuY3Rpb24gY2hlY2tET01MaXN0ZW5lcnMoZGVsdGEpIHtcbiAgICBsaXN0ZW5lckNvdW50ICs9IGRlbHRhO1xuXG4gICAgaWYgKGxpc3RlbmVyQ291bnQgPT09IDEpIHtcbiAgICAgIGFkZEV2ZW50TGlzdGVuZXIod2luZG93LCBQb3BTdGF0ZUV2ZW50LCBoYW5kbGVQb3BTdGF0ZSk7XG5cbiAgICAgIGlmIChuZWVkc0hhc2hDaGFuZ2VMaXN0ZW5lcikgYWRkRXZlbnRMaXN0ZW5lcih3aW5kb3csIEhhc2hDaGFuZ2VFdmVudCwgaGFuZGxlSGFzaENoYW5nZSk7XG4gICAgfSBlbHNlIGlmIChsaXN0ZW5lckNvdW50ID09PSAwKSB7XG4gICAgICByZW1vdmVFdmVudExpc3RlbmVyKHdpbmRvdywgUG9wU3RhdGVFdmVudCwgaGFuZGxlUG9wU3RhdGUpO1xuXG4gICAgICBpZiAobmVlZHNIYXNoQ2hhbmdlTGlzdGVuZXIpIHJlbW92ZUV2ZW50TGlzdGVuZXIod2luZG93LCBIYXNoQ2hhbmdlRXZlbnQsIGhhbmRsZUhhc2hDaGFuZ2UpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgaXNCbG9ja2VkID0gZmFsc2U7XG5cbiAgdmFyIGJsb2NrID0gZnVuY3Rpb24gYmxvY2soKSB7XG4gICAgdmFyIHByb21wdCA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogZmFsc2U7XG5cbiAgICB2YXIgdW5ibG9jayA9IHRyYW5zaXRpb25NYW5hZ2VyLnNldFByb21wdChwcm9tcHQpO1xuXG4gICAgaWYgKCFpc0Jsb2NrZWQpIHtcbiAgICAgIGNoZWNrRE9NTGlzdGVuZXJzKDEpO1xuICAgICAgaXNCbG9ja2VkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKGlzQmxvY2tlZCkge1xuICAgICAgICBpc0Jsb2NrZWQgPSBmYWxzZTtcbiAgICAgICAgY2hlY2tET01MaXN0ZW5lcnMoLTEpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdW5ibG9jaygpO1xuICAgIH07XG4gIH07XG5cbiAgdmFyIGxpc3RlbiA9IGZ1bmN0aW9uIGxpc3RlbihsaXN0ZW5lcikge1xuICAgIHZhciB1bmxpc3RlbiA9IHRyYW5zaXRpb25NYW5hZ2VyLmFwcGVuZExpc3RlbmVyKGxpc3RlbmVyKTtcbiAgICBjaGVja0RPTUxpc3RlbmVycygxKTtcblxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBjaGVja0RPTUxpc3RlbmVycygtMSk7XG4gICAgICB1bmxpc3RlbigpO1xuICAgIH07XG4gIH07XG5cbiAgdmFyIGhpc3RvcnkgPSB7XG4gICAgbGVuZ3RoOiBnbG9iYWxIaXN0b3J5Lmxlbmd0aCxcbiAgICBhY3Rpb246ICdQT1AnLFxuICAgIGxvY2F0aW9uOiBpbml0aWFsTG9jYXRpb24sXG4gICAgY3JlYXRlSHJlZjogY3JlYXRlSHJlZixcbiAgICBwdXNoOiBwdXNoLFxuICAgIHJlcGxhY2U6IHJlcGxhY2UsXG4gICAgZ286IGdvLFxuICAgIGdvQmFjazogZ29CYWNrLFxuICAgIGdvRm9yd2FyZDogZ29Gb3J3YXJkLFxuICAgIGJsb2NrOiBibG9jayxcbiAgICBsaXN0ZW46IGxpc3RlblxuICB9O1xuXG4gIHJldHVybiBoaXN0b3J5O1xufTtcblxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlQnJvd3Nlckhpc3Rvcnk7IiwidmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxuaW1wb3J0IHdhcm5pbmcgZnJvbSAnd2FybmluZyc7XG5pbXBvcnQgaW52YXJpYW50IGZyb20gJ2ludmFyaWFudCc7XG5pbXBvcnQgeyBjcmVhdGVMb2NhdGlvbiwgbG9jYXRpb25zQXJlRXF1YWwgfSBmcm9tICcuL0xvY2F0aW9uVXRpbHMnO1xuaW1wb3J0IHsgYWRkTGVhZGluZ1NsYXNoLCBzdHJpcExlYWRpbmdTbGFzaCwgc3RyaXBUcmFpbGluZ1NsYXNoLCBoYXNCYXNlbmFtZSwgc3RyaXBCYXNlbmFtZSwgY3JlYXRlUGF0aCB9IGZyb20gJy4vUGF0aFV0aWxzJztcbmltcG9ydCBjcmVhdGVUcmFuc2l0aW9uTWFuYWdlciBmcm9tICcuL2NyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyJztcbmltcG9ydCB7IGNhblVzZURPTSwgYWRkRXZlbnRMaXN0ZW5lciwgcmVtb3ZlRXZlbnRMaXN0ZW5lciwgZ2V0Q29uZmlybWF0aW9uLCBzdXBwb3J0c0dvV2l0aG91dFJlbG9hZFVzaW5nSGFzaCB9IGZyb20gJy4vRE9NVXRpbHMnO1xuXG52YXIgSGFzaENoYW5nZUV2ZW50ID0gJ2hhc2hjaGFuZ2UnO1xuXG52YXIgSGFzaFBhdGhDb2RlcnMgPSB7XG4gIGhhc2hiYW5nOiB7XG4gICAgZW5jb2RlUGF0aDogZnVuY3Rpb24gZW5jb2RlUGF0aChwYXRoKSB7XG4gICAgICByZXR1cm4gcGF0aC5jaGFyQXQoMCkgPT09ICchJyA/IHBhdGggOiAnIS8nICsgc3RyaXBMZWFkaW5nU2xhc2gocGF0aCk7XG4gICAgfSxcbiAgICBkZWNvZGVQYXRoOiBmdW5jdGlvbiBkZWNvZGVQYXRoKHBhdGgpIHtcbiAgICAgIHJldHVybiBwYXRoLmNoYXJBdCgwKSA9PT0gJyEnID8gcGF0aC5zdWJzdHIoMSkgOiBwYXRoO1xuICAgIH1cbiAgfSxcbiAgbm9zbGFzaDoge1xuICAgIGVuY29kZVBhdGg6IHN0cmlwTGVhZGluZ1NsYXNoLFxuICAgIGRlY29kZVBhdGg6IGFkZExlYWRpbmdTbGFzaFxuICB9LFxuICBzbGFzaDoge1xuICAgIGVuY29kZVBhdGg6IGFkZExlYWRpbmdTbGFzaCxcbiAgICBkZWNvZGVQYXRoOiBhZGRMZWFkaW5nU2xhc2hcbiAgfVxufTtcblxudmFyIGdldEhhc2hQYXRoID0gZnVuY3Rpb24gZ2V0SGFzaFBhdGgoKSB7XG4gIC8vIFdlIGNhbid0IHVzZSB3aW5kb3cubG9jYXRpb24uaGFzaCBoZXJlIGJlY2F1c2UgaXQncyBub3RcbiAgLy8gY29uc2lzdGVudCBhY3Jvc3MgYnJvd3NlcnMgLSBGaXJlZm94IHdpbGwgcHJlLWRlY29kZSBpdCFcbiAgdmFyIGhyZWYgPSB3aW5kb3cubG9jYXRpb24uaHJlZjtcbiAgdmFyIGhhc2hJbmRleCA9IGhyZWYuaW5kZXhPZignIycpO1xuICByZXR1cm4gaGFzaEluZGV4ID09PSAtMSA/ICcnIDogaHJlZi5zdWJzdHJpbmcoaGFzaEluZGV4ICsgMSk7XG59O1xuXG52YXIgcHVzaEhhc2hQYXRoID0gZnVuY3Rpb24gcHVzaEhhc2hQYXRoKHBhdGgpIHtcbiAgcmV0dXJuIHdpbmRvdy5sb2NhdGlvbi5oYXNoID0gcGF0aDtcbn07XG5cbnZhciByZXBsYWNlSGFzaFBhdGggPSBmdW5jdGlvbiByZXBsYWNlSGFzaFBhdGgocGF0aCkge1xuICB2YXIgaGFzaEluZGV4ID0gd2luZG93LmxvY2F0aW9uLmhyZWYuaW5kZXhPZignIycpO1xuXG4gIHdpbmRvdy5sb2NhdGlvbi5yZXBsYWNlKHdpbmRvdy5sb2NhdGlvbi5ocmVmLnNsaWNlKDAsIGhhc2hJbmRleCA+PSAwID8gaGFzaEluZGV4IDogMCkgKyAnIycgKyBwYXRoKTtcbn07XG5cbnZhciBjcmVhdGVIYXNoSGlzdG9yeSA9IGZ1bmN0aW9uIGNyZWF0ZUhhc2hIaXN0b3J5KCkge1xuICB2YXIgcHJvcHMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuXG4gIGludmFyaWFudChjYW5Vc2VET00sICdIYXNoIGhpc3RvcnkgbmVlZHMgYSBET00nKTtcblxuICB2YXIgZ2xvYmFsSGlzdG9yeSA9IHdpbmRvdy5oaXN0b3J5O1xuICB2YXIgY2FuR29XaXRob3V0UmVsb2FkID0gc3VwcG9ydHNHb1dpdGhvdXRSZWxvYWRVc2luZ0hhc2goKTtcblxuICB2YXIgX3Byb3BzJGdldFVzZXJDb25maXJtID0gcHJvcHMuZ2V0VXNlckNvbmZpcm1hdGlvbixcbiAgICAgIGdldFVzZXJDb25maXJtYXRpb24gPSBfcHJvcHMkZ2V0VXNlckNvbmZpcm0gPT09IHVuZGVmaW5lZCA/IGdldENvbmZpcm1hdGlvbiA6IF9wcm9wcyRnZXRVc2VyQ29uZmlybSxcbiAgICAgIF9wcm9wcyRoYXNoVHlwZSA9IHByb3BzLmhhc2hUeXBlLFxuICAgICAgaGFzaFR5cGUgPSBfcHJvcHMkaGFzaFR5cGUgPT09IHVuZGVmaW5lZCA/ICdzbGFzaCcgOiBfcHJvcHMkaGFzaFR5cGU7XG5cbiAgdmFyIGJhc2VuYW1lID0gcHJvcHMuYmFzZW5hbWUgPyBzdHJpcFRyYWlsaW5nU2xhc2goYWRkTGVhZGluZ1NsYXNoKHByb3BzLmJhc2VuYW1lKSkgOiAnJztcblxuICB2YXIgX0hhc2hQYXRoQ29kZXJzJGhhc2hUID0gSGFzaFBhdGhDb2RlcnNbaGFzaFR5cGVdLFxuICAgICAgZW5jb2RlUGF0aCA9IF9IYXNoUGF0aENvZGVycyRoYXNoVC5lbmNvZGVQYXRoLFxuICAgICAgZGVjb2RlUGF0aCA9IF9IYXNoUGF0aENvZGVycyRoYXNoVC5kZWNvZGVQYXRoO1xuXG5cbiAgdmFyIGdldERPTUxvY2F0aW9uID0gZnVuY3Rpb24gZ2V0RE9NTG9jYXRpb24oKSB7XG4gICAgdmFyIHBhdGggPSBkZWNvZGVQYXRoKGdldEhhc2hQYXRoKCkpO1xuXG4gICAgd2FybmluZyghYmFzZW5hbWUgfHwgaGFzQmFzZW5hbWUocGF0aCwgYmFzZW5hbWUpLCAnWW91IGFyZSBhdHRlbXB0aW5nIHRvIHVzZSBhIGJhc2VuYW1lIG9uIGEgcGFnZSB3aG9zZSBVUkwgcGF0aCBkb2VzIG5vdCBiZWdpbiAnICsgJ3dpdGggdGhlIGJhc2VuYW1lLiBFeHBlY3RlZCBwYXRoIFwiJyArIHBhdGggKyAnXCIgdG8gYmVnaW4gd2l0aCBcIicgKyBiYXNlbmFtZSArICdcIi4nKTtcblxuICAgIGlmIChiYXNlbmFtZSkgcGF0aCA9IHN0cmlwQmFzZW5hbWUocGF0aCwgYmFzZW5hbWUpO1xuXG4gICAgcmV0dXJuIGNyZWF0ZUxvY2F0aW9uKHBhdGgpO1xuICB9O1xuXG4gIHZhciB0cmFuc2l0aW9uTWFuYWdlciA9IGNyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyKCk7XG5cbiAgdmFyIHNldFN0YXRlID0gZnVuY3Rpb24gc2V0U3RhdGUobmV4dFN0YXRlKSB7XG4gICAgX2V4dGVuZHMoaGlzdG9yeSwgbmV4dFN0YXRlKTtcblxuICAgIGhpc3RvcnkubGVuZ3RoID0gZ2xvYmFsSGlzdG9yeS5sZW5ndGg7XG5cbiAgICB0cmFuc2l0aW9uTWFuYWdlci5ub3RpZnlMaXN0ZW5lcnMoaGlzdG9yeS5sb2NhdGlvbiwgaGlzdG9yeS5hY3Rpb24pO1xuICB9O1xuXG4gIHZhciBmb3JjZU5leHRQb3AgPSBmYWxzZTtcbiAgdmFyIGlnbm9yZVBhdGggPSBudWxsO1xuXG4gIHZhciBoYW5kbGVIYXNoQ2hhbmdlID0gZnVuY3Rpb24gaGFuZGxlSGFzaENoYW5nZSgpIHtcbiAgICB2YXIgcGF0aCA9IGdldEhhc2hQYXRoKCk7XG4gICAgdmFyIGVuY29kZWRQYXRoID0gZW5jb2RlUGF0aChwYXRoKTtcblxuICAgIGlmIChwYXRoICE9PSBlbmNvZGVkUGF0aCkge1xuICAgICAgLy8gRW5zdXJlIHdlIGFsd2F5cyBoYXZlIGEgcHJvcGVybHktZW5jb2RlZCBoYXNoLlxuICAgICAgcmVwbGFjZUhhc2hQYXRoKGVuY29kZWRQYXRoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGxvY2F0aW9uID0gZ2V0RE9NTG9jYXRpb24oKTtcbiAgICAgIHZhciBwcmV2TG9jYXRpb24gPSBoaXN0b3J5LmxvY2F0aW9uO1xuXG4gICAgICBpZiAoIWZvcmNlTmV4dFBvcCAmJiBsb2NhdGlvbnNBcmVFcXVhbChwcmV2TG9jYXRpb24sIGxvY2F0aW9uKSkgcmV0dXJuOyAvLyBBIGhhc2hjaGFuZ2UgZG9lc24ndCBhbHdheXMgPT0gbG9jYXRpb24gY2hhbmdlLlxuXG4gICAgICBpZiAoaWdub3JlUGF0aCA9PT0gY3JlYXRlUGF0aChsb2NhdGlvbikpIHJldHVybjsgLy8gSWdub3JlIHRoaXMgY2hhbmdlOyB3ZSBhbHJlYWR5IHNldFN0YXRlIGluIHB1c2gvcmVwbGFjZS5cblxuICAgICAgaWdub3JlUGF0aCA9IG51bGw7XG5cbiAgICAgIGhhbmRsZVBvcChsb2NhdGlvbik7XG4gICAgfVxuICB9O1xuXG4gIHZhciBoYW5kbGVQb3AgPSBmdW5jdGlvbiBoYW5kbGVQb3AobG9jYXRpb24pIHtcbiAgICBpZiAoZm9yY2VOZXh0UG9wKSB7XG4gICAgICBmb3JjZU5leHRQb3AgPSBmYWxzZTtcbiAgICAgIHNldFN0YXRlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBhY3Rpb24gPSAnUE9QJztcblxuICAgICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgICAgaWYgKG9rKSB7XG4gICAgICAgICAgc2V0U3RhdGUoeyBhY3Rpb246IGFjdGlvbiwgbG9jYXRpb246IGxvY2F0aW9uIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldmVydFBvcChsb2NhdGlvbik7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICB2YXIgcmV2ZXJ0UG9wID0gZnVuY3Rpb24gcmV2ZXJ0UG9wKGZyb21Mb2NhdGlvbikge1xuICAgIHZhciB0b0xvY2F0aW9uID0gaGlzdG9yeS5sb2NhdGlvbjtcblxuICAgIC8vIFRPRE86IFdlIGNvdWxkIHByb2JhYmx5IG1ha2UgdGhpcyBtb3JlIHJlbGlhYmxlIGJ5XG4gICAgLy8ga2VlcGluZyBhIGxpc3Qgb2YgcGF0aHMgd2UndmUgc2VlbiBpbiBzZXNzaW9uU3RvcmFnZS5cbiAgICAvLyBJbnN0ZWFkLCB3ZSBqdXN0IGRlZmF1bHQgdG8gMCBmb3IgcGF0aHMgd2UgZG9uJ3Qga25vdy5cblxuICAgIHZhciB0b0luZGV4ID0gYWxsUGF0aHMubGFzdEluZGV4T2YoY3JlYXRlUGF0aCh0b0xvY2F0aW9uKSk7XG5cbiAgICBpZiAodG9JbmRleCA9PT0gLTEpIHRvSW5kZXggPSAwO1xuXG4gICAgdmFyIGZyb21JbmRleCA9IGFsbFBhdGhzLmxhc3RJbmRleE9mKGNyZWF0ZVBhdGgoZnJvbUxvY2F0aW9uKSk7XG5cbiAgICBpZiAoZnJvbUluZGV4ID09PSAtMSkgZnJvbUluZGV4ID0gMDtcblxuICAgIHZhciBkZWx0YSA9IHRvSW5kZXggLSBmcm9tSW5kZXg7XG5cbiAgICBpZiAoZGVsdGEpIHtcbiAgICAgIGZvcmNlTmV4dFBvcCA9IHRydWU7XG4gICAgICBnbyhkZWx0YSk7XG4gICAgfVxuICB9O1xuXG4gIC8vIEVuc3VyZSB0aGUgaGFzaCBpcyBlbmNvZGVkIHByb3Blcmx5IGJlZm9yZSBkb2luZyBhbnl0aGluZyBlbHNlLlxuICB2YXIgcGF0aCA9IGdldEhhc2hQYXRoKCk7XG4gIHZhciBlbmNvZGVkUGF0aCA9IGVuY29kZVBhdGgocGF0aCk7XG5cbiAgaWYgKHBhdGggIT09IGVuY29kZWRQYXRoKSByZXBsYWNlSGFzaFBhdGgoZW5jb2RlZFBhdGgpO1xuXG4gIHZhciBpbml0aWFsTG9jYXRpb24gPSBnZXRET01Mb2NhdGlvbigpO1xuICB2YXIgYWxsUGF0aHMgPSBbY3JlYXRlUGF0aChpbml0aWFsTG9jYXRpb24pXTtcblxuICAvLyBQdWJsaWMgaW50ZXJmYWNlXG5cbiAgdmFyIGNyZWF0ZUhyZWYgPSBmdW5jdGlvbiBjcmVhdGVIcmVmKGxvY2F0aW9uKSB7XG4gICAgcmV0dXJuICcjJyArIGVuY29kZVBhdGgoYmFzZW5hbWUgKyBjcmVhdGVQYXRoKGxvY2F0aW9uKSk7XG4gIH07XG5cbiAgdmFyIHB1c2ggPSBmdW5jdGlvbiBwdXNoKHBhdGgsIHN0YXRlKSB7XG4gICAgd2FybmluZyhzdGF0ZSA9PT0gdW5kZWZpbmVkLCAnSGFzaCBoaXN0b3J5IGNhbm5vdCBwdXNoIHN0YXRlOyBpdCBpcyBpZ25vcmVkJyk7XG5cbiAgICB2YXIgYWN0aW9uID0gJ1BVU0gnO1xuICAgIHZhciBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBoaXN0b3J5LmxvY2F0aW9uKTtcblxuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG5cbiAgICAgIHZhciBwYXRoID0gY3JlYXRlUGF0aChsb2NhdGlvbik7XG4gICAgICB2YXIgZW5jb2RlZFBhdGggPSBlbmNvZGVQYXRoKGJhc2VuYW1lICsgcGF0aCk7XG4gICAgICB2YXIgaGFzaENoYW5nZWQgPSBnZXRIYXNoUGF0aCgpICE9PSBlbmNvZGVkUGF0aDtcblxuICAgICAgaWYgKGhhc2hDaGFuZ2VkKSB7XG4gICAgICAgIC8vIFdlIGNhbm5vdCB0ZWxsIGlmIGEgaGFzaGNoYW5nZSB3YXMgY2F1c2VkIGJ5IGEgUFVTSCwgc28gd2UnZFxuICAgICAgICAvLyByYXRoZXIgc2V0U3RhdGUgaGVyZSBhbmQgaWdub3JlIHRoZSBoYXNoY2hhbmdlLiBUaGUgY2F2ZWF0IGhlcmVcbiAgICAgICAgLy8gaXMgdGhhdCBvdGhlciBoYXNoIGhpc3RvcmllcyBpbiB0aGUgcGFnZSB3aWxsIGNvbnNpZGVyIGl0IGEgUE9QLlxuICAgICAgICBpZ25vcmVQYXRoID0gcGF0aDtcbiAgICAgICAgcHVzaEhhc2hQYXRoKGVuY29kZWRQYXRoKTtcblxuICAgICAgICB2YXIgcHJldkluZGV4ID0gYWxsUGF0aHMubGFzdEluZGV4T2YoY3JlYXRlUGF0aChoaXN0b3J5LmxvY2F0aW9uKSk7XG4gICAgICAgIHZhciBuZXh0UGF0aHMgPSBhbGxQYXRocy5zbGljZSgwLCBwcmV2SW5kZXggPT09IC0xID8gMCA6IHByZXZJbmRleCArIDEpO1xuXG4gICAgICAgIG5leHRQYXRocy5wdXNoKHBhdGgpO1xuICAgICAgICBhbGxQYXRocyA9IG5leHRQYXRocztcblxuICAgICAgICBzZXRTdGF0ZSh7IGFjdGlvbjogYWN0aW9uLCBsb2NhdGlvbjogbG9jYXRpb24gfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB3YXJuaW5nKGZhbHNlLCAnSGFzaCBoaXN0b3J5IGNhbm5vdCBQVVNIIHRoZSBzYW1lIHBhdGg7IGEgbmV3IGVudHJ5IHdpbGwgbm90IGJlIGFkZGVkIHRvIHRoZSBoaXN0b3J5IHN0YWNrJyk7XG5cbiAgICAgICAgc2V0U3RhdGUoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICB2YXIgcmVwbGFjZSA9IGZ1bmN0aW9uIHJlcGxhY2UocGF0aCwgc3RhdGUpIHtcbiAgICB3YXJuaW5nKHN0YXRlID09PSB1bmRlZmluZWQsICdIYXNoIGhpc3RvcnkgY2Fubm90IHJlcGxhY2Ugc3RhdGU7IGl0IGlzIGlnbm9yZWQnKTtcblxuICAgIHZhciBhY3Rpb24gPSAnUkVQTEFDRSc7XG4gICAgdmFyIGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24ocGF0aCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGhpc3RvcnkubG9jYXRpb24pO1xuXG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcblxuICAgICAgdmFyIHBhdGggPSBjcmVhdGVQYXRoKGxvY2F0aW9uKTtcbiAgICAgIHZhciBlbmNvZGVkUGF0aCA9IGVuY29kZVBhdGgoYmFzZW5hbWUgKyBwYXRoKTtcbiAgICAgIHZhciBoYXNoQ2hhbmdlZCA9IGdldEhhc2hQYXRoKCkgIT09IGVuY29kZWRQYXRoO1xuXG4gICAgICBpZiAoaGFzaENoYW5nZWQpIHtcbiAgICAgICAgLy8gV2UgY2Fubm90IHRlbGwgaWYgYSBoYXNoY2hhbmdlIHdhcyBjYXVzZWQgYnkgYSBSRVBMQUNFLCBzbyB3ZSdkXG4gICAgICAgIC8vIHJhdGhlciBzZXRTdGF0ZSBoZXJlIGFuZCBpZ25vcmUgdGhlIGhhc2hjaGFuZ2UuIFRoZSBjYXZlYXQgaGVyZVxuICAgICAgICAvLyBpcyB0aGF0IG90aGVyIGhhc2ggaGlzdG9yaWVzIGluIHRoZSBwYWdlIHdpbGwgY29uc2lkZXIgaXQgYSBQT1AuXG4gICAgICAgIGlnbm9yZVBhdGggPSBwYXRoO1xuICAgICAgICByZXBsYWNlSGFzaFBhdGgoZW5jb2RlZFBhdGgpO1xuICAgICAgfVxuXG4gICAgICB2YXIgcHJldkluZGV4ID0gYWxsUGF0aHMuaW5kZXhPZihjcmVhdGVQYXRoKGhpc3RvcnkubG9jYXRpb24pKTtcblxuICAgICAgaWYgKHByZXZJbmRleCAhPT0gLTEpIGFsbFBhdGhzW3ByZXZJbmRleF0gPSBwYXRoO1xuXG4gICAgICBzZXRTdGF0ZSh7IGFjdGlvbjogYWN0aW9uLCBsb2NhdGlvbjogbG9jYXRpb24gfSk7XG4gICAgfSk7XG4gIH07XG5cbiAgdmFyIGdvID0gZnVuY3Rpb24gZ28obikge1xuICAgIHdhcm5pbmcoY2FuR29XaXRob3V0UmVsb2FkLCAnSGFzaCBoaXN0b3J5IGdvKG4pIGNhdXNlcyBhIGZ1bGwgcGFnZSByZWxvYWQgaW4gdGhpcyBicm93c2VyJyk7XG5cbiAgICBnbG9iYWxIaXN0b3J5LmdvKG4pO1xuICB9O1xuXG4gIHZhciBnb0JhY2sgPSBmdW5jdGlvbiBnb0JhY2soKSB7XG4gICAgcmV0dXJuIGdvKC0xKTtcbiAgfTtcblxuICB2YXIgZ29Gb3J3YXJkID0gZnVuY3Rpb24gZ29Gb3J3YXJkKCkge1xuICAgIHJldHVybiBnbygxKTtcbiAgfTtcblxuICB2YXIgbGlzdGVuZXJDb3VudCA9IDA7XG5cbiAgdmFyIGNoZWNrRE9NTGlzdGVuZXJzID0gZnVuY3Rpb24gY2hlY2tET01MaXN0ZW5lcnMoZGVsdGEpIHtcbiAgICBsaXN0ZW5lckNvdW50ICs9IGRlbHRhO1xuXG4gICAgaWYgKGxpc3RlbmVyQ291bnQgPT09IDEpIHtcbiAgICAgIGFkZEV2ZW50TGlzdGVuZXIod2luZG93LCBIYXNoQ2hhbmdlRXZlbnQsIGhhbmRsZUhhc2hDaGFuZ2UpO1xuICAgIH0gZWxzZSBpZiAobGlzdGVuZXJDb3VudCA9PT0gMCkge1xuICAgICAgcmVtb3ZlRXZlbnRMaXN0ZW5lcih3aW5kb3csIEhhc2hDaGFuZ2VFdmVudCwgaGFuZGxlSGFzaENoYW5nZSk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBpc0Jsb2NrZWQgPSBmYWxzZTtcblxuICB2YXIgYmxvY2sgPSBmdW5jdGlvbiBibG9jaygpIHtcbiAgICB2YXIgcHJvbXB0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiBmYWxzZTtcblxuICAgIHZhciB1bmJsb2NrID0gdHJhbnNpdGlvbk1hbmFnZXIuc2V0UHJvbXB0KHByb21wdCk7XG5cbiAgICBpZiAoIWlzQmxvY2tlZCkge1xuICAgICAgY2hlY2tET01MaXN0ZW5lcnMoMSk7XG4gICAgICBpc0Jsb2NrZWQgPSB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoaXNCbG9ja2VkKSB7XG4gICAgICAgIGlzQmxvY2tlZCA9IGZhbHNlO1xuICAgICAgICBjaGVja0RPTUxpc3RlbmVycygtMSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB1bmJsb2NrKCk7XG4gICAgfTtcbiAgfTtcblxuICB2YXIgbGlzdGVuID0gZnVuY3Rpb24gbGlzdGVuKGxpc3RlbmVyKSB7XG4gICAgdmFyIHVubGlzdGVuID0gdHJhbnNpdGlvbk1hbmFnZXIuYXBwZW5kTGlzdGVuZXIobGlzdGVuZXIpO1xuICAgIGNoZWNrRE9NTGlzdGVuZXJzKDEpO1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGNoZWNrRE9NTGlzdGVuZXJzKC0xKTtcbiAgICAgIHVubGlzdGVuKCk7XG4gICAgfTtcbiAgfTtcblxuICB2YXIgaGlzdG9yeSA9IHtcbiAgICBsZW5ndGg6IGdsb2JhbEhpc3RvcnkubGVuZ3RoLFxuICAgIGFjdGlvbjogJ1BPUCcsXG4gICAgbG9jYXRpb246IGluaXRpYWxMb2NhdGlvbixcbiAgICBjcmVhdGVIcmVmOiBjcmVhdGVIcmVmLFxuICAgIHB1c2g6IHB1c2gsXG4gICAgcmVwbGFjZTogcmVwbGFjZSxcbiAgICBnbzogZ28sXG4gICAgZ29CYWNrOiBnb0JhY2ssXG4gICAgZ29Gb3J3YXJkOiBnb0ZvcndhcmQsXG4gICAgYmxvY2s6IGJsb2NrLFxuICAgIGxpc3RlbjogbGlzdGVuXG4gIH07XG5cbiAgcmV0dXJuIGhpc3Rvcnk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVIYXNoSGlzdG9yeTsiLCJ2YXIgX3R5cGVvZiA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbmltcG9ydCB3YXJuaW5nIGZyb20gJ3dhcm5pbmcnO1xuaW1wb3J0IHsgY3JlYXRlUGF0aCB9IGZyb20gJy4vUGF0aFV0aWxzJztcbmltcG9ydCB7IGNyZWF0ZUxvY2F0aW9uIH0gZnJvbSAnLi9Mb2NhdGlvblV0aWxzJztcbmltcG9ydCBjcmVhdGVUcmFuc2l0aW9uTWFuYWdlciBmcm9tICcuL2NyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyJztcblxudmFyIGNsYW1wID0gZnVuY3Rpb24gY2xhbXAobiwgbG93ZXJCb3VuZCwgdXBwZXJCb3VuZCkge1xuICByZXR1cm4gTWF0aC5taW4oTWF0aC5tYXgobiwgbG93ZXJCb3VuZCksIHVwcGVyQm91bmQpO1xufTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgaGlzdG9yeSBvYmplY3QgdGhhdCBzdG9yZXMgbG9jYXRpb25zIGluIG1lbW9yeS5cbiAqL1xudmFyIGNyZWF0ZU1lbW9yeUhpc3RvcnkgPSBmdW5jdGlvbiBjcmVhdGVNZW1vcnlIaXN0b3J5KCkge1xuICB2YXIgcHJvcHMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuICB2YXIgZ2V0VXNlckNvbmZpcm1hdGlvbiA9IHByb3BzLmdldFVzZXJDb25maXJtYXRpb24sXG4gICAgICBfcHJvcHMkaW5pdGlhbEVudHJpZXMgPSBwcm9wcy5pbml0aWFsRW50cmllcyxcbiAgICAgIGluaXRpYWxFbnRyaWVzID0gX3Byb3BzJGluaXRpYWxFbnRyaWVzID09PSB1bmRlZmluZWQgPyBbJy8nXSA6IF9wcm9wcyRpbml0aWFsRW50cmllcyxcbiAgICAgIF9wcm9wcyRpbml0aWFsSW5kZXggPSBwcm9wcy5pbml0aWFsSW5kZXgsXG4gICAgICBpbml0aWFsSW5kZXggPSBfcHJvcHMkaW5pdGlhbEluZGV4ID09PSB1bmRlZmluZWQgPyAwIDogX3Byb3BzJGluaXRpYWxJbmRleCxcbiAgICAgIF9wcm9wcyRrZXlMZW5ndGggPSBwcm9wcy5rZXlMZW5ndGgsXG4gICAgICBrZXlMZW5ndGggPSBfcHJvcHMka2V5TGVuZ3RoID09PSB1bmRlZmluZWQgPyA2IDogX3Byb3BzJGtleUxlbmd0aDtcblxuXG4gIHZhciB0cmFuc2l0aW9uTWFuYWdlciA9IGNyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyKCk7XG5cbiAgdmFyIHNldFN0YXRlID0gZnVuY3Rpb24gc2V0U3RhdGUobmV4dFN0YXRlKSB7XG4gICAgX2V4dGVuZHMoaGlzdG9yeSwgbmV4dFN0YXRlKTtcblxuICAgIGhpc3RvcnkubGVuZ3RoID0gaGlzdG9yeS5lbnRyaWVzLmxlbmd0aDtcblxuICAgIHRyYW5zaXRpb25NYW5hZ2VyLm5vdGlmeUxpc3RlbmVycyhoaXN0b3J5LmxvY2F0aW9uLCBoaXN0b3J5LmFjdGlvbik7XG4gIH07XG5cbiAgdmFyIGNyZWF0ZUtleSA9IGZ1bmN0aW9uIGNyZWF0ZUtleSgpIHtcbiAgICByZXR1cm4gTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyKDIsIGtleUxlbmd0aCk7XG4gIH07XG5cbiAgdmFyIGluZGV4ID0gY2xhbXAoaW5pdGlhbEluZGV4LCAwLCBpbml0aWFsRW50cmllcy5sZW5ndGggLSAxKTtcbiAgdmFyIGVudHJpZXMgPSBpbml0aWFsRW50cmllcy5tYXAoZnVuY3Rpb24gKGVudHJ5KSB7XG4gICAgcmV0dXJuIHR5cGVvZiBlbnRyeSA9PT0gJ3N0cmluZycgPyBjcmVhdGVMb2NhdGlvbihlbnRyeSwgdW5kZWZpbmVkLCBjcmVhdGVLZXkoKSkgOiBjcmVhdGVMb2NhdGlvbihlbnRyeSwgdW5kZWZpbmVkLCBlbnRyeS5rZXkgfHwgY3JlYXRlS2V5KCkpO1xuICB9KTtcblxuICAvLyBQdWJsaWMgaW50ZXJmYWNlXG5cbiAgdmFyIGNyZWF0ZUhyZWYgPSBjcmVhdGVQYXRoO1xuXG4gIHZhciBwdXNoID0gZnVuY3Rpb24gcHVzaChwYXRoLCBzdGF0ZSkge1xuICAgIHdhcm5pbmcoISgodHlwZW9mIHBhdGggPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKHBhdGgpKSA9PT0gJ29iamVjdCcgJiYgcGF0aC5zdGF0ZSAhPT0gdW5kZWZpbmVkICYmIHN0YXRlICE9PSB1bmRlZmluZWQpLCAnWW91IHNob3VsZCBhdm9pZCBwcm92aWRpbmcgYSAybmQgc3RhdGUgYXJndW1lbnQgdG8gcHVzaCB3aGVuIHRoZSAxc3QgJyArICdhcmd1bWVudCBpcyBhIGxvY2F0aW9uLWxpa2Ugb2JqZWN0IHRoYXQgYWxyZWFkeSBoYXMgc3RhdGU7IGl0IGlzIGlnbm9yZWQnKTtcblxuICAgIHZhciBhY3Rpb24gPSAnUFVTSCc7XG4gICAgdmFyIGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24ocGF0aCwgc3RhdGUsIGNyZWF0ZUtleSgpLCBoaXN0b3J5LmxvY2F0aW9uKTtcblxuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG5cbiAgICAgIHZhciBwcmV2SW5kZXggPSBoaXN0b3J5LmluZGV4O1xuICAgICAgdmFyIG5leHRJbmRleCA9IHByZXZJbmRleCArIDE7XG5cbiAgICAgIHZhciBuZXh0RW50cmllcyA9IGhpc3RvcnkuZW50cmllcy5zbGljZSgwKTtcbiAgICAgIGlmIChuZXh0RW50cmllcy5sZW5ndGggPiBuZXh0SW5kZXgpIHtcbiAgICAgICAgbmV4dEVudHJpZXMuc3BsaWNlKG5leHRJbmRleCwgbmV4dEVudHJpZXMubGVuZ3RoIC0gbmV4dEluZGV4LCBsb2NhdGlvbik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBuZXh0RW50cmllcy5wdXNoKGxvY2F0aW9uKTtcbiAgICAgIH1cblxuICAgICAgc2V0U3RhdGUoe1xuICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uLFxuICAgICAgICBpbmRleDogbmV4dEluZGV4LFxuICAgICAgICBlbnRyaWVzOiBuZXh0RW50cmllc1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH07XG5cbiAgdmFyIHJlcGxhY2UgPSBmdW5jdGlvbiByZXBsYWNlKHBhdGgsIHN0YXRlKSB7XG4gICAgd2FybmluZyghKCh0eXBlb2YgcGF0aCA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YocGF0aCkpID09PSAnb2JqZWN0JyAmJiBwYXRoLnN0YXRlICE9PSB1bmRlZmluZWQgJiYgc3RhdGUgIT09IHVuZGVmaW5lZCksICdZb3Ugc2hvdWxkIGF2b2lkIHByb3ZpZGluZyBhIDJuZCBzdGF0ZSBhcmd1bWVudCB0byByZXBsYWNlIHdoZW4gdGhlIDFzdCAnICsgJ2FyZ3VtZW50IGlzIGEgbG9jYXRpb24tbGlrZSBvYmplY3QgdGhhdCBhbHJlYWR5IGhhcyBzdGF0ZTsgaXQgaXMgaWdub3JlZCcpO1xuXG4gICAgdmFyIGFjdGlvbiA9ICdSRVBMQUNFJztcbiAgICB2YXIgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihwYXRoLCBzdGF0ZSwgY3JlYXRlS2V5KCksIGhpc3RvcnkubG9jYXRpb24pO1xuXG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcblxuICAgICAgaGlzdG9yeS5lbnRyaWVzW2hpc3RvcnkuaW5kZXhdID0gbG9jYXRpb247XG5cbiAgICAgIHNldFN0YXRlKHsgYWN0aW9uOiBhY3Rpb24sIGxvY2F0aW9uOiBsb2NhdGlvbiB9KTtcbiAgICB9KTtcbiAgfTtcblxuICB2YXIgZ28gPSBmdW5jdGlvbiBnbyhuKSB7XG4gICAgdmFyIG5leHRJbmRleCA9IGNsYW1wKGhpc3RvcnkuaW5kZXggKyBuLCAwLCBoaXN0b3J5LmVudHJpZXMubGVuZ3RoIC0gMSk7XG5cbiAgICB2YXIgYWN0aW9uID0gJ1BPUCc7XG4gICAgdmFyIGxvY2F0aW9uID0gaGlzdG9yeS5lbnRyaWVzW25leHRJbmRleF07XG5cbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKG9rKSB7XG4gICAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgICBsb2NhdGlvbjogbG9jYXRpb24sXG4gICAgICAgICAgaW5kZXg6IG5leHRJbmRleFxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIE1pbWljIHRoZSBiZWhhdmlvciBvZiBET00gaGlzdG9yaWVzIGJ5XG4gICAgICAgIC8vIGNhdXNpbmcgYSByZW5kZXIgYWZ0ZXIgYSBjYW5jZWxsZWQgUE9QLlxuICAgICAgICBzZXRTdGF0ZSgpO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIHZhciBnb0JhY2sgPSBmdW5jdGlvbiBnb0JhY2soKSB7XG4gICAgcmV0dXJuIGdvKC0xKTtcbiAgfTtcblxuICB2YXIgZ29Gb3J3YXJkID0gZnVuY3Rpb24gZ29Gb3J3YXJkKCkge1xuICAgIHJldHVybiBnbygxKTtcbiAgfTtcblxuICB2YXIgY2FuR28gPSBmdW5jdGlvbiBjYW5HbyhuKSB7XG4gICAgdmFyIG5leHRJbmRleCA9IGhpc3RvcnkuaW5kZXggKyBuO1xuICAgIHJldHVybiBuZXh0SW5kZXggPj0gMCAmJiBuZXh0SW5kZXggPCBoaXN0b3J5LmVudHJpZXMubGVuZ3RoO1xuICB9O1xuXG4gIHZhciBibG9jayA9IGZ1bmN0aW9uIGJsb2NrKCkge1xuICAgIHZhciBwcm9tcHQgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IGZhbHNlO1xuICAgIHJldHVybiB0cmFuc2l0aW9uTWFuYWdlci5zZXRQcm9tcHQocHJvbXB0KTtcbiAgfTtcblxuICB2YXIgbGlzdGVuID0gZnVuY3Rpb24gbGlzdGVuKGxpc3RlbmVyKSB7XG4gICAgcmV0dXJuIHRyYW5zaXRpb25NYW5hZ2VyLmFwcGVuZExpc3RlbmVyKGxpc3RlbmVyKTtcbiAgfTtcblxuICB2YXIgaGlzdG9yeSA9IHtcbiAgICBsZW5ndGg6IGVudHJpZXMubGVuZ3RoLFxuICAgIGFjdGlvbjogJ1BPUCcsXG4gICAgbG9jYXRpb246IGVudHJpZXNbaW5kZXhdLFxuICAgIGluZGV4OiBpbmRleCxcbiAgICBlbnRyaWVzOiBlbnRyaWVzLFxuICAgIGNyZWF0ZUhyZWY6IGNyZWF0ZUhyZWYsXG4gICAgcHVzaDogcHVzaCxcbiAgICByZXBsYWNlOiByZXBsYWNlLFxuICAgIGdvOiBnbyxcbiAgICBnb0JhY2s6IGdvQmFjayxcbiAgICBnb0ZvcndhcmQ6IGdvRm9yd2FyZCxcbiAgICBjYW5HbzogY2FuR28sXG4gICAgYmxvY2s6IGJsb2NrLFxuICAgIGxpc3RlbjogbGlzdGVuXG4gIH07XG5cbiAgcmV0dXJuIGhpc3Rvcnk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVNZW1vcnlIaXN0b3J5OyIsImltcG9ydCBfY3JlYXRlQnJvd3Nlckhpc3RvcnkgZnJvbSAnLi9jcmVhdGVCcm93c2VySGlzdG9yeSc7XG5leHBvcnQgeyBfY3JlYXRlQnJvd3Nlckhpc3RvcnkgYXMgY3JlYXRlQnJvd3Nlckhpc3RvcnkgfTtcbmltcG9ydCBfY3JlYXRlSGFzaEhpc3RvcnkgZnJvbSAnLi9jcmVhdGVIYXNoSGlzdG9yeSc7XG5leHBvcnQgeyBfY3JlYXRlSGFzaEhpc3RvcnkgYXMgY3JlYXRlSGFzaEhpc3RvcnkgfTtcbmltcG9ydCBfY3JlYXRlTWVtb3J5SGlzdG9yeSBmcm9tICcuL2NyZWF0ZU1lbW9yeUhpc3RvcnknO1xuZXhwb3J0IHsgX2NyZWF0ZU1lbW9yeUhpc3RvcnkgYXMgY3JlYXRlTWVtb3J5SGlzdG9yeSB9O1xuXG5leHBvcnQgeyBjcmVhdGVMb2NhdGlvbiwgbG9jYXRpb25zQXJlRXF1YWwgfSBmcm9tICcuL0xvY2F0aW9uVXRpbHMnO1xuZXhwb3J0IHsgcGFyc2VQYXRoLCBjcmVhdGVQYXRoIH0gZnJvbSAnLi9QYXRoVXRpbHMnOyIsImltcG9ydCBwYXRoVG9SZWdleHAgZnJvbSBcInBhdGgtdG8tcmVnZXhwXCI7XG5cbnZhciBwYXR0ZXJuQ2FjaGUgPSB7fTtcbnZhciBjYWNoZUxpbWl0ID0gMTAwMDA7XG52YXIgY2FjaGVDb3VudCA9IDA7XG5cbnZhciBjb21waWxlUGF0aCA9IGZ1bmN0aW9uIGNvbXBpbGVQYXRoKHBhdHRlcm4sIG9wdGlvbnMpIHtcbiAgdmFyIGNhY2hlS2V5ID0gXCJcIiArIG9wdGlvbnMuZW5kICsgb3B0aW9ucy5zdHJpY3QgKyBvcHRpb25zLnNlbnNpdGl2ZTtcbiAgdmFyIGNhY2hlID0gcGF0dGVybkNhY2hlW2NhY2hlS2V5XSB8fCAocGF0dGVybkNhY2hlW2NhY2hlS2V5XSA9IHt9KTtcblxuICBpZiAoY2FjaGVbcGF0dGVybl0pIHJldHVybiBjYWNoZVtwYXR0ZXJuXTtcblxuICB2YXIga2V5cyA9IFtdO1xuICB2YXIgcmUgPSBwYXRoVG9SZWdleHAocGF0dGVybiwga2V5cywgb3B0aW9ucyk7XG4gIHZhciBjb21waWxlZFBhdHRlcm4gPSB7IHJlOiByZSwga2V5czoga2V5cyB9O1xuXG4gIGlmIChjYWNoZUNvdW50IDwgY2FjaGVMaW1pdCkge1xuICAgIGNhY2hlW3BhdHRlcm5dID0gY29tcGlsZWRQYXR0ZXJuO1xuICAgIGNhY2hlQ291bnQrKztcbiAgfVxuXG4gIHJldHVybiBjb21waWxlZFBhdHRlcm47XG59O1xuXG4vKipcbiAqIFB1YmxpYyBBUEkgZm9yIG1hdGNoaW5nIGEgVVJMIHBhdGhuYW1lIHRvIGEgcGF0aCBwYXR0ZXJuLlxuICovXG52YXIgbWF0Y2hQYXRoID0gZnVuY3Rpb24gbWF0Y2hQYXRoKHBhdGhuYW1lKSB7XG4gIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcbiAgdmFyIHBhcmVudCA9IGFyZ3VtZW50c1syXTtcblxuICBpZiAodHlwZW9mIG9wdGlvbnMgPT09IFwic3RyaW5nXCIpIG9wdGlvbnMgPSB7IHBhdGg6IG9wdGlvbnMgfTtcblxuICB2YXIgX29wdGlvbnMgPSBvcHRpb25zLFxuICAgICAgcGF0aCA9IF9vcHRpb25zLnBhdGgsXG4gICAgICBfb3B0aW9ucyRleGFjdCA9IF9vcHRpb25zLmV4YWN0LFxuICAgICAgZXhhY3QgPSBfb3B0aW9ucyRleGFjdCA9PT0gdW5kZWZpbmVkID8gZmFsc2UgOiBfb3B0aW9ucyRleGFjdCxcbiAgICAgIF9vcHRpb25zJHN0cmljdCA9IF9vcHRpb25zLnN0cmljdCxcbiAgICAgIHN0cmljdCA9IF9vcHRpb25zJHN0cmljdCA9PT0gdW5kZWZpbmVkID8gZmFsc2UgOiBfb3B0aW9ucyRzdHJpY3QsXG4gICAgICBfb3B0aW9ucyRzZW5zaXRpdmUgPSBfb3B0aW9ucy5zZW5zaXRpdmUsXG4gICAgICBzZW5zaXRpdmUgPSBfb3B0aW9ucyRzZW5zaXRpdmUgPT09IHVuZGVmaW5lZCA/IGZhbHNlIDogX29wdGlvbnMkc2Vuc2l0aXZlO1xuXG5cbiAgaWYgKHBhdGggPT0gbnVsbCkgcmV0dXJuIHBhcmVudDtcblxuICB2YXIgX2NvbXBpbGVQYXRoID0gY29tcGlsZVBhdGgocGF0aCwgeyBlbmQ6IGV4YWN0LCBzdHJpY3Q6IHN0cmljdCwgc2Vuc2l0aXZlOiBzZW5zaXRpdmUgfSksXG4gICAgICByZSA9IF9jb21waWxlUGF0aC5yZSxcbiAgICAgIGtleXMgPSBfY29tcGlsZVBhdGgua2V5cztcblxuICB2YXIgbWF0Y2ggPSByZS5leGVjKHBhdGhuYW1lKTtcblxuICBpZiAoIW1hdGNoKSByZXR1cm4gbnVsbDtcblxuICB2YXIgdXJsID0gbWF0Y2hbMF0sXG4gICAgICB2YWx1ZXMgPSBtYXRjaC5zbGljZSgxKTtcblxuICB2YXIgaXNFeGFjdCA9IHBhdGhuYW1lID09PSB1cmw7XG5cbiAgaWYgKGV4YWN0ICYmICFpc0V4YWN0KSByZXR1cm4gbnVsbDtcblxuICByZXR1cm4ge1xuICAgIHBhdGg6IHBhdGgsIC8vIHRoZSBwYXRoIHBhdHRlcm4gdXNlZCB0byBtYXRjaFxuICAgIHVybDogcGF0aCA9PT0gXCIvXCIgJiYgdXJsID09PSBcIlwiID8gXCIvXCIgOiB1cmwsIC8vIHRoZSBtYXRjaGVkIHBvcnRpb24gb2YgdGhlIFVSTFxuICAgIGlzRXhhY3Q6IGlzRXhhY3QsIC8vIHdoZXRoZXIgb3Igbm90IHdlIG1hdGNoZWQgZXhhY3RseVxuICAgIHBhcmFtczoga2V5cy5yZWR1Y2UoZnVuY3Rpb24gKG1lbW8sIGtleSwgaW5kZXgpIHtcbiAgICAgIG1lbW9ba2V5Lm5hbWVdID0gdmFsdWVzW2luZGV4XTtcbiAgICAgIHJldHVybiBtZW1vO1xuICAgIH0sIHt9KVxuICB9O1xufTtcblxuZXhwb3J0IGRlZmF1bHQgbWF0Y2hQYXRoOyIsImltcG9ydCAkJG9ic2VydmFibGUgZnJvbSAnc3ltYm9sLW9ic2VydmFibGUnO1xuXG4vKipcbiAqIFRoZXNlIGFyZSBwcml2YXRlIGFjdGlvbiB0eXBlcyByZXNlcnZlZCBieSBSZWR1eC5cbiAqIEZvciBhbnkgdW5rbm93biBhY3Rpb25zLCB5b3UgbXVzdCByZXR1cm4gdGhlIGN1cnJlbnQgc3RhdGUuXG4gKiBJZiB0aGUgY3VycmVudCBzdGF0ZSBpcyB1bmRlZmluZWQsIHlvdSBtdXN0IHJldHVybiB0aGUgaW5pdGlhbCBzdGF0ZS5cbiAqIERvIG5vdCByZWZlcmVuY2UgdGhlc2UgYWN0aW9uIHR5cGVzIGRpcmVjdGx5IGluIHlvdXIgY29kZS5cbiAqL1xudmFyIHJhbmRvbVN0cmluZyA9IGZ1bmN0aW9uIHJhbmRvbVN0cmluZygpIHtcbiAgcmV0dXJuIE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cmluZyg3KS5zcGxpdCgnJykuam9pbignLicpO1xufTtcblxudmFyIEFjdGlvblR5cGVzID0ge1xuICBJTklUOiBcIkBAcmVkdXgvSU5JVFwiICsgcmFuZG9tU3RyaW5nKCksXG4gIFJFUExBQ0U6IFwiQEByZWR1eC9SRVBMQUNFXCIgKyByYW5kb21TdHJpbmcoKSxcbiAgUFJPQkVfVU5LTk9XTl9BQ1RJT046IGZ1bmN0aW9uIFBST0JFX1VOS05PV05fQUNUSU9OKCkge1xuICAgIHJldHVybiBcIkBAcmVkdXgvUFJPQkVfVU5LTk9XTl9BQ1RJT05cIiArIHJhbmRvbVN0cmluZygpO1xuICB9XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7YW55fSBvYmogVGhlIG9iamVjdCB0byBpbnNwZWN0LlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIGFyZ3VtZW50IGFwcGVhcnMgdG8gYmUgYSBwbGFpbiBvYmplY3QuXG4gKi9cbmZ1bmN0aW9uIGlzUGxhaW5PYmplY3Qob2JqKSB7XG4gIGlmICh0eXBlb2Ygb2JqICE9PSAnb2JqZWN0JyB8fCBvYmogPT09IG51bGwpIHJldHVybiBmYWxzZTtcbiAgdmFyIHByb3RvID0gb2JqO1xuXG4gIHdoaWxlIChPYmplY3QuZ2V0UHJvdG90eXBlT2YocHJvdG8pICE9PSBudWxsKSB7XG4gICAgcHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YocHJvdG8pO1xuICB9XG5cbiAgcmV0dXJuIE9iamVjdC5nZXRQcm90b3R5cGVPZihvYmopID09PSBwcm90bztcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgUmVkdXggc3RvcmUgdGhhdCBob2xkcyB0aGUgc3RhdGUgdHJlZS5cbiAqIFRoZSBvbmx5IHdheSB0byBjaGFuZ2UgdGhlIGRhdGEgaW4gdGhlIHN0b3JlIGlzIHRvIGNhbGwgYGRpc3BhdGNoKClgIG9uIGl0LlxuICpcbiAqIFRoZXJlIHNob3VsZCBvbmx5IGJlIGEgc2luZ2xlIHN0b3JlIGluIHlvdXIgYXBwLiBUbyBzcGVjaWZ5IGhvdyBkaWZmZXJlbnRcbiAqIHBhcnRzIG9mIHRoZSBzdGF0ZSB0cmVlIHJlc3BvbmQgdG8gYWN0aW9ucywgeW91IG1heSBjb21iaW5lIHNldmVyYWwgcmVkdWNlcnNcbiAqIGludG8gYSBzaW5nbGUgcmVkdWNlciBmdW5jdGlvbiBieSB1c2luZyBgY29tYmluZVJlZHVjZXJzYC5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSByZWR1Y2VyIEEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIHRoZSBuZXh0IHN0YXRlIHRyZWUsIGdpdmVuXG4gKiB0aGUgY3VycmVudCBzdGF0ZSB0cmVlIGFuZCB0aGUgYWN0aW9uIHRvIGhhbmRsZS5cbiAqXG4gKiBAcGFyYW0ge2FueX0gW3ByZWxvYWRlZFN0YXRlXSBUaGUgaW5pdGlhbCBzdGF0ZS4gWW91IG1heSBvcHRpb25hbGx5IHNwZWNpZnkgaXRcbiAqIHRvIGh5ZHJhdGUgdGhlIHN0YXRlIGZyb20gdGhlIHNlcnZlciBpbiB1bml2ZXJzYWwgYXBwcywgb3IgdG8gcmVzdG9yZSBhXG4gKiBwcmV2aW91c2x5IHNlcmlhbGl6ZWQgdXNlciBzZXNzaW9uLlxuICogSWYgeW91IHVzZSBgY29tYmluZVJlZHVjZXJzYCB0byBwcm9kdWNlIHRoZSByb290IHJlZHVjZXIgZnVuY3Rpb24sIHRoaXMgbXVzdCBiZVxuICogYW4gb2JqZWN0IHdpdGggdGhlIHNhbWUgc2hhcGUgYXMgYGNvbWJpbmVSZWR1Y2Vyc2Aga2V5cy5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbZW5oYW5jZXJdIFRoZSBzdG9yZSBlbmhhbmNlci4gWW91IG1heSBvcHRpb25hbGx5IHNwZWNpZnkgaXRcbiAqIHRvIGVuaGFuY2UgdGhlIHN0b3JlIHdpdGggdGhpcmQtcGFydHkgY2FwYWJpbGl0aWVzIHN1Y2ggYXMgbWlkZGxld2FyZSxcbiAqIHRpbWUgdHJhdmVsLCBwZXJzaXN0ZW5jZSwgZXRjLiBUaGUgb25seSBzdG9yZSBlbmhhbmNlciB0aGF0IHNoaXBzIHdpdGggUmVkdXhcbiAqIGlzIGBhcHBseU1pZGRsZXdhcmUoKWAuXG4gKlxuICogQHJldHVybnMge1N0b3JlfSBBIFJlZHV4IHN0b3JlIHRoYXQgbGV0cyB5b3UgcmVhZCB0aGUgc3RhdGUsIGRpc3BhdGNoIGFjdGlvbnNcbiAqIGFuZCBzdWJzY3JpYmUgdG8gY2hhbmdlcy5cbiAqL1xuXG5mdW5jdGlvbiBjcmVhdGVTdG9yZShyZWR1Y2VyLCBwcmVsb2FkZWRTdGF0ZSwgZW5oYW5jZXIpIHtcbiAgdmFyIF9yZWYyO1xuXG4gIGlmICh0eXBlb2YgcHJlbG9hZGVkU3RhdGUgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIGVuaGFuY2VyID09PSAnZnVuY3Rpb24nIHx8IHR5cGVvZiBlbmhhbmNlciA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgYXJndW1lbnRzWzNdID09PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdJdCBsb29rcyBsaWtlIHlvdSBhcmUgcGFzc2luZyBzZXZlcmFsIHN0b3JlIGVuaGFuY2VycyB0byAnICsgJ2NyZWF0ZVN0b3JlKCkuIFRoaXMgaXMgbm90IHN1cHBvcnRlZC4gSW5zdGVhZCwgY29tcG9zZSB0aGVtICcgKyAndG9nZXRoZXIgdG8gYSBzaW5nbGUgZnVuY3Rpb24nKTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgcHJlbG9hZGVkU3RhdGUgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIGVuaGFuY2VyID09PSAndW5kZWZpbmVkJykge1xuICAgIGVuaGFuY2VyID0gcHJlbG9hZGVkU3RhdGU7XG4gICAgcHJlbG9hZGVkU3RhdGUgPSB1bmRlZmluZWQ7XG4gIH1cblxuICBpZiAodHlwZW9mIGVuaGFuY2VyICE9PSAndW5kZWZpbmVkJykge1xuICAgIGlmICh0eXBlb2YgZW5oYW5jZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgdGhlIGVuaGFuY2VyIHRvIGJlIGEgZnVuY3Rpb24uJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGVuaGFuY2VyKGNyZWF0ZVN0b3JlKShyZWR1Y2VyLCBwcmVsb2FkZWRTdGF0ZSk7XG4gIH1cblxuICBpZiAodHlwZW9mIHJlZHVjZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIHRoZSByZWR1Y2VyIHRvIGJlIGEgZnVuY3Rpb24uJyk7XG4gIH1cblxuICB2YXIgY3VycmVudFJlZHVjZXIgPSByZWR1Y2VyO1xuICB2YXIgY3VycmVudFN0YXRlID0gcHJlbG9hZGVkU3RhdGU7XG4gIHZhciBjdXJyZW50TGlzdGVuZXJzID0gW107XG4gIHZhciBuZXh0TGlzdGVuZXJzID0gY3VycmVudExpc3RlbmVycztcbiAgdmFyIGlzRGlzcGF0Y2hpbmcgPSBmYWxzZTtcblxuICBmdW5jdGlvbiBlbnN1cmVDYW5NdXRhdGVOZXh0TGlzdGVuZXJzKCkge1xuICAgIGlmIChuZXh0TGlzdGVuZXJzID09PSBjdXJyZW50TGlzdGVuZXJzKSB7XG4gICAgICBuZXh0TGlzdGVuZXJzID0gY3VycmVudExpc3RlbmVycy5zbGljZSgpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogUmVhZHMgdGhlIHN0YXRlIHRyZWUgbWFuYWdlZCBieSB0aGUgc3RvcmUuXG4gICAqXG4gICAqIEByZXR1cm5zIHthbnl9IFRoZSBjdXJyZW50IHN0YXRlIHRyZWUgb2YgeW91ciBhcHBsaWNhdGlvbi5cbiAgICovXG5cblxuICBmdW5jdGlvbiBnZXRTdGF0ZSgpIHtcbiAgICBpZiAoaXNEaXNwYXRjaGluZykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdZb3UgbWF5IG5vdCBjYWxsIHN0b3JlLmdldFN0YXRlKCkgd2hpbGUgdGhlIHJlZHVjZXIgaXMgZXhlY3V0aW5nLiAnICsgJ1RoZSByZWR1Y2VyIGhhcyBhbHJlYWR5IHJlY2VpdmVkIHRoZSBzdGF0ZSBhcyBhbiBhcmd1bWVudC4gJyArICdQYXNzIGl0IGRvd24gZnJvbSB0aGUgdG9wIHJlZHVjZXIgaW5zdGVhZCBvZiByZWFkaW5nIGl0IGZyb20gdGhlIHN0b3JlLicpO1xuICAgIH1cblxuICAgIHJldHVybiBjdXJyZW50U3RhdGU7XG4gIH1cbiAgLyoqXG4gICAqIEFkZHMgYSBjaGFuZ2UgbGlzdGVuZXIuIEl0IHdpbGwgYmUgY2FsbGVkIGFueSB0aW1lIGFuIGFjdGlvbiBpcyBkaXNwYXRjaGVkLFxuICAgKiBhbmQgc29tZSBwYXJ0IG9mIHRoZSBzdGF0ZSB0cmVlIG1heSBwb3RlbnRpYWxseSBoYXZlIGNoYW5nZWQuIFlvdSBtYXkgdGhlblxuICAgKiBjYWxsIGBnZXRTdGF0ZSgpYCB0byByZWFkIHRoZSBjdXJyZW50IHN0YXRlIHRyZWUgaW5zaWRlIHRoZSBjYWxsYmFjay5cbiAgICpcbiAgICogWW91IG1heSBjYWxsIGBkaXNwYXRjaCgpYCBmcm9tIGEgY2hhbmdlIGxpc3RlbmVyLCB3aXRoIHRoZSBmb2xsb3dpbmdcbiAgICogY2F2ZWF0czpcbiAgICpcbiAgICogMS4gVGhlIHN1YnNjcmlwdGlvbnMgYXJlIHNuYXBzaG90dGVkIGp1c3QgYmVmb3JlIGV2ZXJ5IGBkaXNwYXRjaCgpYCBjYWxsLlxuICAgKiBJZiB5b3Ugc3Vic2NyaWJlIG9yIHVuc3Vic2NyaWJlIHdoaWxlIHRoZSBsaXN0ZW5lcnMgYXJlIGJlaW5nIGludm9rZWQsIHRoaXNcbiAgICogd2lsbCBub3QgaGF2ZSBhbnkgZWZmZWN0IG9uIHRoZSBgZGlzcGF0Y2goKWAgdGhhdCBpcyBjdXJyZW50bHkgaW4gcHJvZ3Jlc3MuXG4gICAqIEhvd2V2ZXIsIHRoZSBuZXh0IGBkaXNwYXRjaCgpYCBjYWxsLCB3aGV0aGVyIG5lc3RlZCBvciBub3QsIHdpbGwgdXNlIGEgbW9yZVxuICAgKiByZWNlbnQgc25hcHNob3Qgb2YgdGhlIHN1YnNjcmlwdGlvbiBsaXN0LlxuICAgKlxuICAgKiAyLiBUaGUgbGlzdGVuZXIgc2hvdWxkIG5vdCBleHBlY3QgdG8gc2VlIGFsbCBzdGF0ZSBjaGFuZ2VzLCBhcyB0aGUgc3RhdGVcbiAgICogbWlnaHQgaGF2ZSBiZWVuIHVwZGF0ZWQgbXVsdGlwbGUgdGltZXMgZHVyaW5nIGEgbmVzdGVkIGBkaXNwYXRjaCgpYCBiZWZvcmVcbiAgICogdGhlIGxpc3RlbmVyIGlzIGNhbGxlZC4gSXQgaXMsIGhvd2V2ZXIsIGd1YXJhbnRlZWQgdGhhdCBhbGwgc3Vic2NyaWJlcnNcbiAgICogcmVnaXN0ZXJlZCBiZWZvcmUgdGhlIGBkaXNwYXRjaCgpYCBzdGFydGVkIHdpbGwgYmUgY2FsbGVkIHdpdGggdGhlIGxhdGVzdFxuICAgKiBzdGF0ZSBieSB0aGUgdGltZSBpdCBleGl0cy5cbiAgICpcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gbGlzdGVuZXIgQSBjYWxsYmFjayB0byBiZSBpbnZva2VkIG9uIGV2ZXJ5IGRpc3BhdGNoLlxuICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IEEgZnVuY3Rpb24gdG8gcmVtb3ZlIHRoaXMgY2hhbmdlIGxpc3RlbmVyLlxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIHN1YnNjcmliZShsaXN0ZW5lcikge1xuICAgIGlmICh0eXBlb2YgbGlzdGVuZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgdGhlIGxpc3RlbmVyIHRvIGJlIGEgZnVuY3Rpb24uJyk7XG4gICAgfVxuXG4gICAgaWYgKGlzRGlzcGF0Y2hpbmcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignWW91IG1heSBub3QgY2FsbCBzdG9yZS5zdWJzY3JpYmUoKSB3aGlsZSB0aGUgcmVkdWNlciBpcyBleGVjdXRpbmcuICcgKyAnSWYgeW91IHdvdWxkIGxpa2UgdG8gYmUgbm90aWZpZWQgYWZ0ZXIgdGhlIHN0b3JlIGhhcyBiZWVuIHVwZGF0ZWQsIHN1YnNjcmliZSBmcm9tIGEgJyArICdjb21wb25lbnQgYW5kIGludm9rZSBzdG9yZS5nZXRTdGF0ZSgpIGluIHRoZSBjYWxsYmFjayB0byBhY2Nlc3MgdGhlIGxhdGVzdCBzdGF0ZS4gJyArICdTZWUgaHR0cHM6Ly9yZWR1eC5qcy5vcmcvYXBpLXJlZmVyZW5jZS9zdG9yZSNzdWJzY3JpYmUobGlzdGVuZXIpIGZvciBtb3JlIGRldGFpbHMuJyk7XG4gICAgfVxuXG4gICAgdmFyIGlzU3Vic2NyaWJlZCA9IHRydWU7XG4gICAgZW5zdXJlQ2FuTXV0YXRlTmV4dExpc3RlbmVycygpO1xuICAgIG5leHRMaXN0ZW5lcnMucHVzaChsaXN0ZW5lcik7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIHVuc3Vic2NyaWJlKCkge1xuICAgICAgaWYgKCFpc1N1YnNjcmliZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXNEaXNwYXRjaGluZykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1lvdSBtYXkgbm90IHVuc3Vic2NyaWJlIGZyb20gYSBzdG9yZSBsaXN0ZW5lciB3aGlsZSB0aGUgcmVkdWNlciBpcyBleGVjdXRpbmcuICcgKyAnU2VlIGh0dHBzOi8vcmVkdXguanMub3JnL2FwaS1yZWZlcmVuY2Uvc3RvcmUjc3Vic2NyaWJlKGxpc3RlbmVyKSBmb3IgbW9yZSBkZXRhaWxzLicpO1xuICAgICAgfVxuXG4gICAgICBpc1N1YnNjcmliZWQgPSBmYWxzZTtcbiAgICAgIGVuc3VyZUNhbk11dGF0ZU5leHRMaXN0ZW5lcnMoKTtcbiAgICAgIHZhciBpbmRleCA9IG5leHRMaXN0ZW5lcnMuaW5kZXhPZihsaXN0ZW5lcik7XG4gICAgICBuZXh0TGlzdGVuZXJzLnNwbGljZShpbmRleCwgMSk7XG4gICAgfTtcbiAgfVxuICAvKipcbiAgICogRGlzcGF0Y2hlcyBhbiBhY3Rpb24uIEl0IGlzIHRoZSBvbmx5IHdheSB0byB0cmlnZ2VyIGEgc3RhdGUgY2hhbmdlLlxuICAgKlxuICAgKiBUaGUgYHJlZHVjZXJgIGZ1bmN0aW9uLCB1c2VkIHRvIGNyZWF0ZSB0aGUgc3RvcmUsIHdpbGwgYmUgY2FsbGVkIHdpdGggdGhlXG4gICAqIGN1cnJlbnQgc3RhdGUgdHJlZSBhbmQgdGhlIGdpdmVuIGBhY3Rpb25gLiBJdHMgcmV0dXJuIHZhbHVlIHdpbGxcbiAgICogYmUgY29uc2lkZXJlZCB0aGUgKipuZXh0Kiogc3RhdGUgb2YgdGhlIHRyZWUsIGFuZCB0aGUgY2hhbmdlIGxpc3RlbmVyc1xuICAgKiB3aWxsIGJlIG5vdGlmaWVkLlxuICAgKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvbmx5IHN1cHBvcnRzIHBsYWluIG9iamVjdCBhY3Rpb25zLiBJZiB5b3Ugd2FudCB0b1xuICAgKiBkaXNwYXRjaCBhIFByb21pc2UsIGFuIE9ic2VydmFibGUsIGEgdGh1bmssIG9yIHNvbWV0aGluZyBlbHNlLCB5b3UgbmVlZCB0b1xuICAgKiB3cmFwIHlvdXIgc3RvcmUgY3JlYXRpbmcgZnVuY3Rpb24gaW50byB0aGUgY29ycmVzcG9uZGluZyBtaWRkbGV3YXJlLiBGb3JcbiAgICogZXhhbXBsZSwgc2VlIHRoZSBkb2N1bWVudGF0aW9uIGZvciB0aGUgYHJlZHV4LXRodW5rYCBwYWNrYWdlLiBFdmVuIHRoZVxuICAgKiBtaWRkbGV3YXJlIHdpbGwgZXZlbnR1YWxseSBkaXNwYXRjaCBwbGFpbiBvYmplY3QgYWN0aW9ucyB1c2luZyB0aGlzIG1ldGhvZC5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IGFjdGlvbiBBIHBsYWluIG9iamVjdCByZXByZXNlbnRpbmcg4oCcd2hhdCBjaGFuZ2Vk4oCdLiBJdCBpc1xuICAgKiBhIGdvb2QgaWRlYSB0byBrZWVwIGFjdGlvbnMgc2VyaWFsaXphYmxlIHNvIHlvdSBjYW4gcmVjb3JkIGFuZCByZXBsYXkgdXNlclxuICAgKiBzZXNzaW9ucywgb3IgdXNlIHRoZSB0aW1lIHRyYXZlbGxpbmcgYHJlZHV4LWRldnRvb2xzYC4gQW4gYWN0aW9uIG11c3QgaGF2ZVxuICAgKiBhIGB0eXBlYCBwcm9wZXJ0eSB3aGljaCBtYXkgbm90IGJlIGB1bmRlZmluZWRgLiBJdCBpcyBhIGdvb2QgaWRlYSB0byB1c2VcbiAgICogc3RyaW5nIGNvbnN0YW50cyBmb3IgYWN0aW9uIHR5cGVzLlxuICAgKlxuICAgKiBAcmV0dXJucyB7T2JqZWN0fSBGb3IgY29udmVuaWVuY2UsIHRoZSBzYW1lIGFjdGlvbiBvYmplY3QgeW91IGRpc3BhdGNoZWQuXG4gICAqXG4gICAqIE5vdGUgdGhhdCwgaWYgeW91IHVzZSBhIGN1c3RvbSBtaWRkbGV3YXJlLCBpdCBtYXkgd3JhcCBgZGlzcGF0Y2goKWAgdG9cbiAgICogcmV0dXJuIHNvbWV0aGluZyBlbHNlIChmb3IgZXhhbXBsZSwgYSBQcm9taXNlIHlvdSBjYW4gYXdhaXQpLlxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIGRpc3BhdGNoKGFjdGlvbikge1xuICAgIGlmICghaXNQbGFpbk9iamVjdChhY3Rpb24pKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0FjdGlvbnMgbXVzdCBiZSBwbGFpbiBvYmplY3RzLiAnICsgJ1VzZSBjdXN0b20gbWlkZGxld2FyZSBmb3IgYXN5bmMgYWN0aW9ucy4nKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIGFjdGlvbi50eXBlID09PSAndW5kZWZpbmVkJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdBY3Rpb25zIG1heSBub3QgaGF2ZSBhbiB1bmRlZmluZWQgXCJ0eXBlXCIgcHJvcGVydHkuICcgKyAnSGF2ZSB5b3UgbWlzc3BlbGxlZCBhIGNvbnN0YW50PycpO1xuICAgIH1cblxuICAgIGlmIChpc0Rpc3BhdGNoaW5nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1JlZHVjZXJzIG1heSBub3QgZGlzcGF0Y2ggYWN0aW9ucy4nKTtcbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgaXNEaXNwYXRjaGluZyA9IHRydWU7XG4gICAgICBjdXJyZW50U3RhdGUgPSBjdXJyZW50UmVkdWNlcihjdXJyZW50U3RhdGUsIGFjdGlvbik7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIGlzRGlzcGF0Y2hpbmcgPSBmYWxzZTtcbiAgICB9XG5cbiAgICB2YXIgbGlzdGVuZXJzID0gY3VycmVudExpc3RlbmVycyA9IG5leHRMaXN0ZW5lcnM7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3RlbmVycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGxpc3RlbmVyID0gbGlzdGVuZXJzW2ldO1xuICAgICAgbGlzdGVuZXIoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gYWN0aW9uO1xuICB9XG4gIC8qKlxuICAgKiBSZXBsYWNlcyB0aGUgcmVkdWNlciBjdXJyZW50bHkgdXNlZCBieSB0aGUgc3RvcmUgdG8gY2FsY3VsYXRlIHRoZSBzdGF0ZS5cbiAgICpcbiAgICogWW91IG1pZ2h0IG5lZWQgdGhpcyBpZiB5b3VyIGFwcCBpbXBsZW1lbnRzIGNvZGUgc3BsaXR0aW5nIGFuZCB5b3Ugd2FudCB0b1xuICAgKiBsb2FkIHNvbWUgb2YgdGhlIHJlZHVjZXJzIGR5bmFtaWNhbGx5LiBZb3UgbWlnaHQgYWxzbyBuZWVkIHRoaXMgaWYgeW91XG4gICAqIGltcGxlbWVudCBhIGhvdCByZWxvYWRpbmcgbWVjaGFuaXNtIGZvciBSZWR1eC5cbiAgICpcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gbmV4dFJlZHVjZXIgVGhlIHJlZHVjZXIgZm9yIHRoZSBzdG9yZSB0byB1c2UgaW5zdGVhZC5cbiAgICogQHJldHVybnMge3ZvaWR9XG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gcmVwbGFjZVJlZHVjZXIobmV4dFJlZHVjZXIpIHtcbiAgICBpZiAodHlwZW9mIG5leHRSZWR1Y2VyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIHRoZSBuZXh0UmVkdWNlciB0byBiZSBhIGZ1bmN0aW9uLicpO1xuICAgIH1cblxuICAgIGN1cnJlbnRSZWR1Y2VyID0gbmV4dFJlZHVjZXI7XG4gICAgZGlzcGF0Y2goe1xuICAgICAgdHlwZTogQWN0aW9uVHlwZXMuUkVQTEFDRVxuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBJbnRlcm9wZXJhYmlsaXR5IHBvaW50IGZvciBvYnNlcnZhYmxlL3JlYWN0aXZlIGxpYnJhcmllcy5cbiAgICogQHJldHVybnMge29ic2VydmFibGV9IEEgbWluaW1hbCBvYnNlcnZhYmxlIG9mIHN0YXRlIGNoYW5nZXMuXG4gICAqIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWUgdGhlIG9ic2VydmFibGUgcHJvcG9zYWw6XG4gICAqIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLW9ic2VydmFibGVcbiAgICovXG5cblxuICBmdW5jdGlvbiBvYnNlcnZhYmxlKCkge1xuICAgIHZhciBfcmVmO1xuXG4gICAgdmFyIG91dGVyU3Vic2NyaWJlID0gc3Vic2NyaWJlO1xuICAgIHJldHVybiBfcmVmID0ge1xuICAgICAgLyoqXG4gICAgICAgKiBUaGUgbWluaW1hbCBvYnNlcnZhYmxlIHN1YnNjcmlwdGlvbiBtZXRob2QuXG4gICAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JzZXJ2ZXIgQW55IG9iamVjdCB0aGF0IGNhbiBiZSB1c2VkIGFzIGFuIG9ic2VydmVyLlxuICAgICAgICogVGhlIG9ic2VydmVyIG9iamVjdCBzaG91bGQgaGF2ZSBhIGBuZXh0YCBtZXRob2QuXG4gICAgICAgKiBAcmV0dXJucyB7c3Vic2NyaXB0aW9ufSBBbiBvYmplY3Qgd2l0aCBhbiBgdW5zdWJzY3JpYmVgIG1ldGhvZCB0aGF0IGNhblxuICAgICAgICogYmUgdXNlZCB0byB1bnN1YnNjcmliZSB0aGUgb2JzZXJ2YWJsZSBmcm9tIHRoZSBzdG9yZSwgYW5kIHByZXZlbnQgZnVydGhlclxuICAgICAgICogZW1pc3Npb24gb2YgdmFsdWVzIGZyb20gdGhlIG9ic2VydmFibGUuXG4gICAgICAgKi9cbiAgICAgIHN1YnNjcmliZTogZnVuY3Rpb24gc3Vic2NyaWJlKG9ic2VydmVyKSB7XG4gICAgICAgIGlmICh0eXBlb2Ygb2JzZXJ2ZXIgIT09ICdvYmplY3QnIHx8IG9ic2VydmVyID09PSBudWxsKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgdGhlIG9ic2VydmVyIHRvIGJlIGFuIG9iamVjdC4nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIG9ic2VydmVTdGF0ZSgpIHtcbiAgICAgICAgICBpZiAob2JzZXJ2ZXIubmV4dCkge1xuICAgICAgICAgICAgb2JzZXJ2ZXIubmV4dChnZXRTdGF0ZSgpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBvYnNlcnZlU3RhdGUoKTtcbiAgICAgICAgdmFyIHVuc3Vic2NyaWJlID0gb3V0ZXJTdWJzY3JpYmUob2JzZXJ2ZVN0YXRlKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICB1bnN1YnNjcmliZTogdW5zdWJzY3JpYmVcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9LCBfcmVmWyQkb2JzZXJ2YWJsZV0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LCBfcmVmO1xuICB9IC8vIFdoZW4gYSBzdG9yZSBpcyBjcmVhdGVkLCBhbiBcIklOSVRcIiBhY3Rpb24gaXMgZGlzcGF0Y2hlZCBzbyB0aGF0IGV2ZXJ5XG4gIC8vIHJlZHVjZXIgcmV0dXJucyB0aGVpciBpbml0aWFsIHN0YXRlLiBUaGlzIGVmZmVjdGl2ZWx5IHBvcHVsYXRlc1xuICAvLyB0aGUgaW5pdGlhbCBzdGF0ZSB0cmVlLlxuXG5cbiAgZGlzcGF0Y2goe1xuICAgIHR5cGU6IEFjdGlvblR5cGVzLklOSVRcbiAgfSk7XG4gIHJldHVybiBfcmVmMiA9IHtcbiAgICBkaXNwYXRjaDogZGlzcGF0Y2gsXG4gICAgc3Vic2NyaWJlOiBzdWJzY3JpYmUsXG4gICAgZ2V0U3RhdGU6IGdldFN0YXRlLFxuICAgIHJlcGxhY2VSZWR1Y2VyOiByZXBsYWNlUmVkdWNlclxuICB9LCBfcmVmMlskJG9ic2VydmFibGVdID0gb2JzZXJ2YWJsZSwgX3JlZjI7XG59XG5cbi8qKlxuICogUHJpbnRzIGEgd2FybmluZyBpbiB0aGUgY29uc29sZSBpZiBpdCBleGlzdHMuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2UgVGhlIHdhcm5pbmcgbWVzc2FnZS5cbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5mdW5jdGlvbiB3YXJuaW5nKG1lc3NhZ2UpIHtcbiAgLyogZXNsaW50LWRpc2FibGUgbm8tY29uc29sZSAqL1xuICBpZiAodHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBjb25zb2xlLmVycm9yID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY29uc29sZS5lcnJvcihtZXNzYWdlKTtcbiAgfVxuICAvKiBlc2xpbnQtZW5hYmxlIG5vLWNvbnNvbGUgKi9cblxuXG4gIHRyeSB7XG4gICAgLy8gVGhpcyBlcnJvciB3YXMgdGhyb3duIGFzIGEgY29udmVuaWVuY2Ugc28gdGhhdCBpZiB5b3UgZW5hYmxlXG4gICAgLy8gXCJicmVhayBvbiBhbGwgZXhjZXB0aW9uc1wiIGluIHlvdXIgY29uc29sZSxcbiAgICAvLyBpdCB3b3VsZCBwYXVzZSB0aGUgZXhlY3V0aW9uIGF0IHRoaXMgbGluZS5cbiAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSk7XG4gIH0gY2F0Y2ggKGUpIHt9IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tZW1wdHlcblxufVxuXG5mdW5jdGlvbiBnZXRVbmRlZmluZWRTdGF0ZUVycm9yTWVzc2FnZShrZXksIGFjdGlvbikge1xuICB2YXIgYWN0aW9uVHlwZSA9IGFjdGlvbiAmJiBhY3Rpb24udHlwZTtcbiAgdmFyIGFjdGlvbkRlc2NyaXB0aW9uID0gYWN0aW9uVHlwZSAmJiBcImFjdGlvbiBcXFwiXCIgKyBTdHJpbmcoYWN0aW9uVHlwZSkgKyBcIlxcXCJcIiB8fCAnYW4gYWN0aW9uJztcbiAgcmV0dXJuIFwiR2l2ZW4gXCIgKyBhY3Rpb25EZXNjcmlwdGlvbiArIFwiLCByZWR1Y2VyIFxcXCJcIiArIGtleSArIFwiXFxcIiByZXR1cm5lZCB1bmRlZmluZWQuIFwiICsgXCJUbyBpZ25vcmUgYW4gYWN0aW9uLCB5b3UgbXVzdCBleHBsaWNpdGx5IHJldHVybiB0aGUgcHJldmlvdXMgc3RhdGUuIFwiICsgXCJJZiB5b3Ugd2FudCB0aGlzIHJlZHVjZXIgdG8gaG9sZCBubyB2YWx1ZSwgeW91IGNhbiByZXR1cm4gbnVsbCBpbnN0ZWFkIG9mIHVuZGVmaW5lZC5cIjtcbn1cblxuZnVuY3Rpb24gZ2V0VW5leHBlY3RlZFN0YXRlU2hhcGVXYXJuaW5nTWVzc2FnZShpbnB1dFN0YXRlLCByZWR1Y2VycywgYWN0aW9uLCB1bmV4cGVjdGVkS2V5Q2FjaGUpIHtcbiAgdmFyIHJlZHVjZXJLZXlzID0gT2JqZWN0LmtleXMocmVkdWNlcnMpO1xuICB2YXIgYXJndW1lbnROYW1lID0gYWN0aW9uICYmIGFjdGlvbi50eXBlID09PSBBY3Rpb25UeXBlcy5JTklUID8gJ3ByZWxvYWRlZFN0YXRlIGFyZ3VtZW50IHBhc3NlZCB0byBjcmVhdGVTdG9yZScgOiAncHJldmlvdXMgc3RhdGUgcmVjZWl2ZWQgYnkgdGhlIHJlZHVjZXInO1xuXG4gIGlmIChyZWR1Y2VyS2V5cy5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gJ1N0b3JlIGRvZXMgbm90IGhhdmUgYSB2YWxpZCByZWR1Y2VyLiBNYWtlIHN1cmUgdGhlIGFyZ3VtZW50IHBhc3NlZCAnICsgJ3RvIGNvbWJpbmVSZWR1Y2VycyBpcyBhbiBvYmplY3Qgd2hvc2UgdmFsdWVzIGFyZSByZWR1Y2Vycy4nO1xuICB9XG5cbiAgaWYgKCFpc1BsYWluT2JqZWN0KGlucHV0U3RhdGUpKSB7XG4gICAgcmV0dXJuIFwiVGhlIFwiICsgYXJndW1lbnROYW1lICsgXCIgaGFzIHVuZXhwZWN0ZWQgdHlwZSBvZiBcXFwiXCIgKyB7fS50b1N0cmluZy5jYWxsKGlucHV0U3RhdGUpLm1hdGNoKC9cXHMoW2EtenxBLVpdKykvKVsxXSArIFwiXFxcIi4gRXhwZWN0ZWQgYXJndW1lbnQgdG8gYmUgYW4gb2JqZWN0IHdpdGggdGhlIGZvbGxvd2luZyBcIiArIChcImtleXM6IFxcXCJcIiArIHJlZHVjZXJLZXlzLmpvaW4oJ1wiLCBcIicpICsgXCJcXFwiXCIpO1xuICB9XG5cbiAgdmFyIHVuZXhwZWN0ZWRLZXlzID0gT2JqZWN0LmtleXMoaW5wdXRTdGF0ZSkuZmlsdGVyKGZ1bmN0aW9uIChrZXkpIHtcbiAgICByZXR1cm4gIXJlZHVjZXJzLmhhc093blByb3BlcnR5KGtleSkgJiYgIXVuZXhwZWN0ZWRLZXlDYWNoZVtrZXldO1xuICB9KTtcbiAgdW5leHBlY3RlZEtleXMuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgdW5leHBlY3RlZEtleUNhY2hlW2tleV0gPSB0cnVlO1xuICB9KTtcbiAgaWYgKGFjdGlvbiAmJiBhY3Rpb24udHlwZSA9PT0gQWN0aW9uVHlwZXMuUkVQTEFDRSkgcmV0dXJuO1xuXG4gIGlmICh1bmV4cGVjdGVkS2V5cy5sZW5ndGggPiAwKSB7XG4gICAgcmV0dXJuIFwiVW5leHBlY3RlZCBcIiArICh1bmV4cGVjdGVkS2V5cy5sZW5ndGggPiAxID8gJ2tleXMnIDogJ2tleScpICsgXCIgXCIgKyAoXCJcXFwiXCIgKyB1bmV4cGVjdGVkS2V5cy5qb2luKCdcIiwgXCInKSArIFwiXFxcIiBmb3VuZCBpbiBcIiArIGFyZ3VtZW50TmFtZSArIFwiLiBcIikgKyBcIkV4cGVjdGVkIHRvIGZpbmQgb25lIG9mIHRoZSBrbm93biByZWR1Y2VyIGtleXMgaW5zdGVhZDogXCIgKyAoXCJcXFwiXCIgKyByZWR1Y2VyS2V5cy5qb2luKCdcIiwgXCInKSArIFwiXFxcIi4gVW5leHBlY3RlZCBrZXlzIHdpbGwgYmUgaWdub3JlZC5cIik7XG4gIH1cbn1cblxuZnVuY3Rpb24gYXNzZXJ0UmVkdWNlclNoYXBlKHJlZHVjZXJzKSB7XG4gIE9iamVjdC5rZXlzKHJlZHVjZXJzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICB2YXIgcmVkdWNlciA9IHJlZHVjZXJzW2tleV07XG4gICAgdmFyIGluaXRpYWxTdGF0ZSA9IHJlZHVjZXIodW5kZWZpbmVkLCB7XG4gICAgICB0eXBlOiBBY3Rpb25UeXBlcy5JTklUXG4gICAgfSk7XG5cbiAgICBpZiAodHlwZW9mIGluaXRpYWxTdGF0ZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlJlZHVjZXIgXFxcIlwiICsga2V5ICsgXCJcXFwiIHJldHVybmVkIHVuZGVmaW5lZCBkdXJpbmcgaW5pdGlhbGl6YXRpb24uIFwiICsgXCJJZiB0aGUgc3RhdGUgcGFzc2VkIHRvIHRoZSByZWR1Y2VyIGlzIHVuZGVmaW5lZCwgeW91IG11c3QgXCIgKyBcImV4cGxpY2l0bHkgcmV0dXJuIHRoZSBpbml0aWFsIHN0YXRlLiBUaGUgaW5pdGlhbCBzdGF0ZSBtYXkgXCIgKyBcIm5vdCBiZSB1bmRlZmluZWQuIElmIHlvdSBkb24ndCB3YW50IHRvIHNldCBhIHZhbHVlIGZvciB0aGlzIHJlZHVjZXIsIFwiICsgXCJ5b3UgY2FuIHVzZSBudWxsIGluc3RlYWQgb2YgdW5kZWZpbmVkLlwiKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIHJlZHVjZXIodW5kZWZpbmVkLCB7XG4gICAgICB0eXBlOiBBY3Rpb25UeXBlcy5QUk9CRV9VTktOT1dOX0FDVElPTigpXG4gICAgfSkgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJSZWR1Y2VyIFxcXCJcIiArIGtleSArIFwiXFxcIiByZXR1cm5lZCB1bmRlZmluZWQgd2hlbiBwcm9iZWQgd2l0aCBhIHJhbmRvbSB0eXBlLiBcIiArIChcIkRvbid0IHRyeSB0byBoYW5kbGUgXCIgKyBBY3Rpb25UeXBlcy5JTklUICsgXCIgb3Igb3RoZXIgYWN0aW9ucyBpbiBcXFwicmVkdXgvKlxcXCIgXCIpICsgXCJuYW1lc3BhY2UuIFRoZXkgYXJlIGNvbnNpZGVyZWQgcHJpdmF0ZS4gSW5zdGVhZCwgeW91IG11c3QgcmV0dXJuIHRoZSBcIiArIFwiY3VycmVudCBzdGF0ZSBmb3IgYW55IHVua25vd24gYWN0aW9ucywgdW5sZXNzIGl0IGlzIHVuZGVmaW5lZCwgXCIgKyBcImluIHdoaWNoIGNhc2UgeW91IG11c3QgcmV0dXJuIHRoZSBpbml0aWFsIHN0YXRlLCByZWdhcmRsZXNzIG9mIHRoZSBcIiArIFwiYWN0aW9uIHR5cGUuIFRoZSBpbml0aWFsIHN0YXRlIG1heSBub3QgYmUgdW5kZWZpbmVkLCBidXQgY2FuIGJlIG51bGwuXCIpO1xuICAgIH1cbiAgfSk7XG59XG4vKipcbiAqIFR1cm5zIGFuIG9iamVjdCB3aG9zZSB2YWx1ZXMgYXJlIGRpZmZlcmVudCByZWR1Y2VyIGZ1bmN0aW9ucywgaW50byBhIHNpbmdsZVxuICogcmVkdWNlciBmdW5jdGlvbi4gSXQgd2lsbCBjYWxsIGV2ZXJ5IGNoaWxkIHJlZHVjZXIsIGFuZCBnYXRoZXIgdGhlaXIgcmVzdWx0c1xuICogaW50byBhIHNpbmdsZSBzdGF0ZSBvYmplY3QsIHdob3NlIGtleXMgY29ycmVzcG9uZCB0byB0aGUga2V5cyBvZiB0aGUgcGFzc2VkXG4gKiByZWR1Y2VyIGZ1bmN0aW9ucy5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gcmVkdWNlcnMgQW4gb2JqZWN0IHdob3NlIHZhbHVlcyBjb3JyZXNwb25kIHRvIGRpZmZlcmVudFxuICogcmVkdWNlciBmdW5jdGlvbnMgdGhhdCBuZWVkIHRvIGJlIGNvbWJpbmVkIGludG8gb25lLiBPbmUgaGFuZHkgd2F5IHRvIG9idGFpblxuICogaXQgaXMgdG8gdXNlIEVTNiBgaW1wb3J0ICogYXMgcmVkdWNlcnNgIHN5bnRheC4gVGhlIHJlZHVjZXJzIG1heSBuZXZlciByZXR1cm5cbiAqIHVuZGVmaW5lZCBmb3IgYW55IGFjdGlvbi4gSW5zdGVhZCwgdGhleSBzaG91bGQgcmV0dXJuIHRoZWlyIGluaXRpYWwgc3RhdGVcbiAqIGlmIHRoZSBzdGF0ZSBwYXNzZWQgdG8gdGhlbSB3YXMgdW5kZWZpbmVkLCBhbmQgdGhlIGN1cnJlbnQgc3RhdGUgZm9yIGFueVxuICogdW5yZWNvZ25pemVkIGFjdGlvbi5cbiAqXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IEEgcmVkdWNlciBmdW5jdGlvbiB0aGF0IGludm9rZXMgZXZlcnkgcmVkdWNlciBpbnNpZGUgdGhlXG4gKiBwYXNzZWQgb2JqZWN0LCBhbmQgYnVpbGRzIGEgc3RhdGUgb2JqZWN0IHdpdGggdGhlIHNhbWUgc2hhcGUuXG4gKi9cblxuXG5mdW5jdGlvbiBjb21iaW5lUmVkdWNlcnMocmVkdWNlcnMpIHtcbiAgdmFyIHJlZHVjZXJLZXlzID0gT2JqZWN0LmtleXMocmVkdWNlcnMpO1xuICB2YXIgZmluYWxSZWR1Y2VycyA9IHt9O1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcmVkdWNlcktleXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIga2V5ID0gcmVkdWNlcktleXNbaV07XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKHR5cGVvZiByZWR1Y2Vyc1trZXldID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICB3YXJuaW5nKFwiTm8gcmVkdWNlciBwcm92aWRlZCBmb3Iga2V5IFxcXCJcIiArIGtleSArIFwiXFxcIlwiKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIHJlZHVjZXJzW2tleV0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGZpbmFsUmVkdWNlcnNba2V5XSA9IHJlZHVjZXJzW2tleV07XG4gICAgfVxuICB9XG5cbiAgdmFyIGZpbmFsUmVkdWNlcktleXMgPSBPYmplY3Qua2V5cyhmaW5hbFJlZHVjZXJzKTtcbiAgdmFyIHVuZXhwZWN0ZWRLZXlDYWNoZTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHVuZXhwZWN0ZWRLZXlDYWNoZSA9IHt9O1xuICB9XG5cbiAgdmFyIHNoYXBlQXNzZXJ0aW9uRXJyb3I7XG5cbiAgdHJ5IHtcbiAgICBhc3NlcnRSZWR1Y2VyU2hhcGUoZmluYWxSZWR1Y2Vycyk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBzaGFwZUFzc2VydGlvbkVycm9yID0gZTtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiBjb21iaW5hdGlvbihzdGF0ZSwgYWN0aW9uKSB7XG4gICAgaWYgKHN0YXRlID09PSB2b2lkIDApIHtcbiAgICAgIHN0YXRlID0ge307XG4gICAgfVxuXG4gICAgaWYgKHNoYXBlQXNzZXJ0aW9uRXJyb3IpIHtcbiAgICAgIHRocm93IHNoYXBlQXNzZXJ0aW9uRXJyb3I7XG4gICAgfVxuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHZhciB3YXJuaW5nTWVzc2FnZSA9IGdldFVuZXhwZWN0ZWRTdGF0ZVNoYXBlV2FybmluZ01lc3NhZ2Uoc3RhdGUsIGZpbmFsUmVkdWNlcnMsIGFjdGlvbiwgdW5leHBlY3RlZEtleUNhY2hlKTtcblxuICAgICAgaWYgKHdhcm5pbmdNZXNzYWdlKSB7XG4gICAgICAgIHdhcm5pbmcod2FybmluZ01lc3NhZ2UpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBoYXNDaGFuZ2VkID0gZmFsc2U7XG4gICAgdmFyIG5leHRTdGF0ZSA9IHt9O1xuXG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGZpbmFsUmVkdWNlcktleXMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgX2tleSA9IGZpbmFsUmVkdWNlcktleXNbX2ldO1xuICAgICAgdmFyIHJlZHVjZXIgPSBmaW5hbFJlZHVjZXJzW19rZXldO1xuICAgICAgdmFyIHByZXZpb3VzU3RhdGVGb3JLZXkgPSBzdGF0ZVtfa2V5XTtcbiAgICAgIHZhciBuZXh0U3RhdGVGb3JLZXkgPSByZWR1Y2VyKHByZXZpb3VzU3RhdGVGb3JLZXksIGFjdGlvbik7XG5cbiAgICAgIGlmICh0eXBlb2YgbmV4dFN0YXRlRm9yS2V5ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICB2YXIgZXJyb3JNZXNzYWdlID0gZ2V0VW5kZWZpbmVkU3RhdGVFcnJvck1lc3NhZ2UoX2tleSwgYWN0aW9uKTtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGVycm9yTWVzc2FnZSk7XG4gICAgICB9XG5cbiAgICAgIG5leHRTdGF0ZVtfa2V5XSA9IG5leHRTdGF0ZUZvcktleTtcbiAgICAgIGhhc0NoYW5nZWQgPSBoYXNDaGFuZ2VkIHx8IG5leHRTdGF0ZUZvcktleSAhPT0gcHJldmlvdXNTdGF0ZUZvcktleTtcbiAgICB9XG5cbiAgICByZXR1cm4gaGFzQ2hhbmdlZCA/IG5leHRTdGF0ZSA6IHN0YXRlO1xuICB9O1xufVxuXG5mdW5jdGlvbiBiaW5kQWN0aW9uQ3JlYXRvcihhY3Rpb25DcmVhdG9yLCBkaXNwYXRjaCkge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBkaXNwYXRjaChhY3Rpb25DcmVhdG9yLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9O1xufVxuLyoqXG4gKiBUdXJucyBhbiBvYmplY3Qgd2hvc2UgdmFsdWVzIGFyZSBhY3Rpb24gY3JlYXRvcnMsIGludG8gYW4gb2JqZWN0IHdpdGggdGhlXG4gKiBzYW1lIGtleXMsIGJ1dCB3aXRoIGV2ZXJ5IGZ1bmN0aW9uIHdyYXBwZWQgaW50byBhIGBkaXNwYXRjaGAgY2FsbCBzbyB0aGV5XG4gKiBtYXkgYmUgaW52b2tlZCBkaXJlY3RseS4gVGhpcyBpcyBqdXN0IGEgY29udmVuaWVuY2UgbWV0aG9kLCBhcyB5b3UgY2FuIGNhbGxcbiAqIGBzdG9yZS5kaXNwYXRjaChNeUFjdGlvbkNyZWF0b3JzLmRvU29tZXRoaW5nKCkpYCB5b3Vyc2VsZiBqdXN0IGZpbmUuXG4gKlxuICogRm9yIGNvbnZlbmllbmNlLCB5b3UgY2FuIGFsc28gcGFzcyBhIHNpbmdsZSBmdW5jdGlvbiBhcyB0aGUgZmlyc3QgYXJndW1lbnQsXG4gKiBhbmQgZ2V0IGEgZnVuY3Rpb24gaW4gcmV0dXJuLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb258T2JqZWN0fSBhY3Rpb25DcmVhdG9ycyBBbiBvYmplY3Qgd2hvc2UgdmFsdWVzIGFyZSBhY3Rpb25cbiAqIGNyZWF0b3IgZnVuY3Rpb25zLiBPbmUgaGFuZHkgd2F5IHRvIG9idGFpbiBpdCBpcyB0byB1c2UgRVM2IGBpbXBvcnQgKiBhc2BcbiAqIHN5bnRheC4gWW91IG1heSBhbHNvIHBhc3MgYSBzaW5nbGUgZnVuY3Rpb24uXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZGlzcGF0Y2ggVGhlIGBkaXNwYXRjaGAgZnVuY3Rpb24gYXZhaWxhYmxlIG9uIHlvdXIgUmVkdXhcbiAqIHN0b3JlLlxuICpcbiAqIEByZXR1cm5zIHtGdW5jdGlvbnxPYmplY3R9IFRoZSBvYmplY3QgbWltaWNraW5nIHRoZSBvcmlnaW5hbCBvYmplY3QsIGJ1dCB3aXRoXG4gKiBldmVyeSBhY3Rpb24gY3JlYXRvciB3cmFwcGVkIGludG8gdGhlIGBkaXNwYXRjaGAgY2FsbC4gSWYgeW91IHBhc3NlZCBhXG4gKiBmdW5jdGlvbiBhcyBgYWN0aW9uQ3JlYXRvcnNgLCB0aGUgcmV0dXJuIHZhbHVlIHdpbGwgYWxzbyBiZSBhIHNpbmdsZVxuICogZnVuY3Rpb24uXG4gKi9cblxuXG5mdW5jdGlvbiBiaW5kQWN0aW9uQ3JlYXRvcnMoYWN0aW9uQ3JlYXRvcnMsIGRpc3BhdGNoKSB7XG4gIGlmICh0eXBlb2YgYWN0aW9uQ3JlYXRvcnMgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gYmluZEFjdGlvbkNyZWF0b3IoYWN0aW9uQ3JlYXRvcnMsIGRpc3BhdGNoKTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgYWN0aW9uQ3JlYXRvcnMgIT09ICdvYmplY3QnIHx8IGFjdGlvbkNyZWF0b3JzID09PSBudWxsKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiYmluZEFjdGlvbkNyZWF0b3JzIGV4cGVjdGVkIGFuIG9iamVjdCBvciBhIGZ1bmN0aW9uLCBpbnN0ZWFkIHJlY2VpdmVkIFwiICsgKGFjdGlvbkNyZWF0b3JzID09PSBudWxsID8gJ251bGwnIDogdHlwZW9mIGFjdGlvbkNyZWF0b3JzKSArIFwiLiBcIiArIFwiRGlkIHlvdSB3cml0ZSBcXFwiaW1wb3J0IEFjdGlvbkNyZWF0b3JzIGZyb21cXFwiIGluc3RlYWQgb2YgXFxcImltcG9ydCAqIGFzIEFjdGlvbkNyZWF0b3JzIGZyb21cXFwiP1wiKTtcbiAgfVxuXG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXMoYWN0aW9uQ3JlYXRvcnMpO1xuICB2YXIgYm91bmRBY3Rpb25DcmVhdG9ycyA9IHt9O1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBrZXkgPSBrZXlzW2ldO1xuICAgIHZhciBhY3Rpb25DcmVhdG9yID0gYWN0aW9uQ3JlYXRvcnNba2V5XTtcblxuICAgIGlmICh0eXBlb2YgYWN0aW9uQ3JlYXRvciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgYm91bmRBY3Rpb25DcmVhdG9yc1trZXldID0gYmluZEFjdGlvbkNyZWF0b3IoYWN0aW9uQ3JlYXRvciwgZGlzcGF0Y2gpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBib3VuZEFjdGlvbkNyZWF0b3JzO1xufVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7XG4gIGlmIChrZXkgaW4gb2JqKSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgd3JpdGFibGU6IHRydWVcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBvYmpba2V5XSA9IHZhbHVlO1xuICB9XG5cbiAgcmV0dXJuIG9iajtcbn1cblxuZnVuY3Rpb24gX29iamVjdFNwcmVhZCh0YXJnZXQpIHtcbiAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldICE9IG51bGwgPyBhcmd1bWVudHNbaV0gOiB7fTtcbiAgICB2YXIgb3duS2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7XG5cbiAgICBpZiAodHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIG93bktleXMgPSBvd25LZXlzLmNvbmNhdChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHNvdXJjZSkuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHtcbiAgICAgICAgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBzeW0pLmVudW1lcmFibGU7XG4gICAgICB9KSk7XG4gICAgfVxuXG4gICAgb3duS2V5cy5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgIF9kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pO1xuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn1cblxuLyoqXG4gKiBDb21wb3NlcyBzaW5nbGUtYXJndW1lbnQgZnVuY3Rpb25zIGZyb20gcmlnaHQgdG8gbGVmdC4gVGhlIHJpZ2h0bW9zdFxuICogZnVuY3Rpb24gY2FuIHRha2UgbXVsdGlwbGUgYXJndW1lbnRzIGFzIGl0IHByb3ZpZGVzIHRoZSBzaWduYXR1cmUgZm9yXG4gKiB0aGUgcmVzdWx0aW5nIGNvbXBvc2l0ZSBmdW5jdGlvbi5cbiAqXG4gKiBAcGFyYW0gey4uLkZ1bmN0aW9ufSBmdW5jcyBUaGUgZnVuY3Rpb25zIHRvIGNvbXBvc2UuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IEEgZnVuY3Rpb24gb2J0YWluZWQgYnkgY29tcG9zaW5nIHRoZSBhcmd1bWVudCBmdW5jdGlvbnNcbiAqIGZyb20gcmlnaHQgdG8gbGVmdC4gRm9yIGV4YW1wbGUsIGNvbXBvc2UoZiwgZywgaCkgaXMgaWRlbnRpY2FsIHRvIGRvaW5nXG4gKiAoLi4uYXJncykgPT4gZihnKGgoLi4uYXJncykpKS5cbiAqL1xuZnVuY3Rpb24gY29tcG9zZSgpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGZ1bmNzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIGZ1bmNzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgaWYgKGZ1bmNzLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoYXJnKSB7XG4gICAgICByZXR1cm4gYXJnO1xuICAgIH07XG4gIH1cblxuICBpZiAoZnVuY3MubGVuZ3RoID09PSAxKSB7XG4gICAgcmV0dXJuIGZ1bmNzWzBdO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmNzLnJlZHVjZShmdW5jdGlvbiAoYSwgYikge1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gYShiLmFwcGx5KHZvaWQgMCwgYXJndW1lbnRzKSk7XG4gICAgfTtcbiAgfSk7XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIHN0b3JlIGVuaGFuY2VyIHRoYXQgYXBwbGllcyBtaWRkbGV3YXJlIHRvIHRoZSBkaXNwYXRjaCBtZXRob2RcbiAqIG9mIHRoZSBSZWR1eCBzdG9yZS4gVGhpcyBpcyBoYW5keSBmb3IgYSB2YXJpZXR5IG9mIHRhc2tzLCBzdWNoIGFzIGV4cHJlc3NpbmdcbiAqIGFzeW5jaHJvbm91cyBhY3Rpb25zIGluIGEgY29uY2lzZSBtYW5uZXIsIG9yIGxvZ2dpbmcgZXZlcnkgYWN0aW9uIHBheWxvYWQuXG4gKlxuICogU2VlIGByZWR1eC10aHVua2AgcGFja2FnZSBhcyBhbiBleGFtcGxlIG9mIHRoZSBSZWR1eCBtaWRkbGV3YXJlLlxuICpcbiAqIEJlY2F1c2UgbWlkZGxld2FyZSBpcyBwb3RlbnRpYWxseSBhc3luY2hyb25vdXMsIHRoaXMgc2hvdWxkIGJlIHRoZSBmaXJzdFxuICogc3RvcmUgZW5oYW5jZXIgaW4gdGhlIGNvbXBvc2l0aW9uIGNoYWluLlxuICpcbiAqIE5vdGUgdGhhdCBlYWNoIG1pZGRsZXdhcmUgd2lsbCBiZSBnaXZlbiB0aGUgYGRpc3BhdGNoYCBhbmQgYGdldFN0YXRlYCBmdW5jdGlvbnNcbiAqIGFzIG5hbWVkIGFyZ3VtZW50cy5cbiAqXG4gKiBAcGFyYW0gey4uLkZ1bmN0aW9ufSBtaWRkbGV3YXJlcyBUaGUgbWlkZGxld2FyZSBjaGFpbiB0byBiZSBhcHBsaWVkLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBBIHN0b3JlIGVuaGFuY2VyIGFwcGx5aW5nIHRoZSBtaWRkbGV3YXJlLlxuICovXG5cbmZ1bmN0aW9uIGFwcGx5TWlkZGxld2FyZSgpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIG1pZGRsZXdhcmVzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIG1pZGRsZXdhcmVzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChjcmVhdGVTdG9yZSkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgc3RvcmUgPSBjcmVhdGVTdG9yZS5hcHBseSh2b2lkIDAsIGFyZ3VtZW50cyk7XG5cbiAgICAgIHZhciBfZGlzcGF0Y2ggPSBmdW5jdGlvbiBkaXNwYXRjaCgpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRGlzcGF0Y2hpbmcgd2hpbGUgY29uc3RydWN0aW5nIHlvdXIgbWlkZGxld2FyZSBpcyBub3QgYWxsb3dlZC4gXCIgKyBcIk90aGVyIG1pZGRsZXdhcmUgd291bGQgbm90IGJlIGFwcGxpZWQgdG8gdGhpcyBkaXNwYXRjaC5cIik7XG4gICAgICB9O1xuXG4gICAgICB2YXIgbWlkZGxld2FyZUFQSSA9IHtcbiAgICAgICAgZ2V0U3RhdGU6IHN0b3JlLmdldFN0YXRlLFxuICAgICAgICBkaXNwYXRjaDogZnVuY3Rpb24gZGlzcGF0Y2goKSB7XG4gICAgICAgICAgcmV0dXJuIF9kaXNwYXRjaC5hcHBseSh2b2lkIDAsIGFyZ3VtZW50cyk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICB2YXIgY2hhaW4gPSBtaWRkbGV3YXJlcy5tYXAoZnVuY3Rpb24gKG1pZGRsZXdhcmUpIHtcbiAgICAgICAgcmV0dXJuIG1pZGRsZXdhcmUobWlkZGxld2FyZUFQSSk7XG4gICAgICB9KTtcbiAgICAgIF9kaXNwYXRjaCA9IGNvbXBvc2UuYXBwbHkodm9pZCAwLCBjaGFpbikoc3RvcmUuZGlzcGF0Y2gpO1xuICAgICAgcmV0dXJuIF9vYmplY3RTcHJlYWQoe30sIHN0b3JlLCB7XG4gICAgICAgIGRpc3BhdGNoOiBfZGlzcGF0Y2hcbiAgICAgIH0pO1xuICAgIH07XG4gIH07XG59XG5cbi8qXG4gKiBUaGlzIGlzIGEgZHVtbXkgZnVuY3Rpb24gdG8gY2hlY2sgaWYgdGhlIGZ1bmN0aW9uIG5hbWUgaGFzIGJlZW4gYWx0ZXJlZCBieSBtaW5pZmljYXRpb24uXG4gKiBJZiB0aGUgZnVuY3Rpb24gaGFzIGJlZW4gbWluaWZpZWQgYW5kIE5PREVfRU5WICE9PSAncHJvZHVjdGlvbicsIHdhcm4gdGhlIHVzZXIuXG4gKi9cblxuZnVuY3Rpb24gaXNDcnVzaGVkKCkge31cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgdHlwZW9mIGlzQ3J1c2hlZC5uYW1lID09PSAnc3RyaW5nJyAmJiBpc0NydXNoZWQubmFtZSAhPT0gJ2lzQ3J1c2hlZCcpIHtcbiAgd2FybmluZygnWW91IGFyZSBjdXJyZW50bHkgdXNpbmcgbWluaWZpZWQgY29kZSBvdXRzaWRlIG9mIE5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIi4gJyArICdUaGlzIG1lYW5zIHRoYXQgeW91IGFyZSBydW5uaW5nIGEgc2xvd2VyIGRldmVsb3BtZW50IGJ1aWxkIG9mIFJlZHV4LiAnICsgJ1lvdSBjYW4gdXNlIGxvb3NlLWVudmlmeSAoaHR0cHM6Ly9naXRodWIuY29tL3plcnRvc2gvbG9vc2UtZW52aWZ5KSBmb3IgYnJvd3NlcmlmeSAnICsgJ29yIHNldHRpbmcgbW9kZSB0byBwcm9kdWN0aW9uIGluIHdlYnBhY2sgKGh0dHBzOi8vd2VicGFjay5qcy5vcmcvY29uY2VwdHMvbW9kZS8pICcgKyAndG8gZW5zdXJlIHlvdSBoYXZlIHRoZSBjb3JyZWN0IGNvZGUgZm9yIHlvdXIgcHJvZHVjdGlvbiBidWlsZC4nKTtcbn1cblxuZXhwb3J0IHsgY3JlYXRlU3RvcmUsIGNvbWJpbmVSZWR1Y2VycywgYmluZEFjdGlvbkNyZWF0b3JzLCBhcHBseU1pZGRsZXdhcmUsIGNvbXBvc2UsIEFjdGlvblR5cGVzIGFzIF9fRE9fTk9UX1VTRV9fQWN0aW9uVHlwZXMgfTtcbiIsInZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhvYmosIGtleXMpIHsgdmFyIHRhcmdldCA9IHt9OyBmb3IgKHZhciBpIGluIG9iaikgeyBpZiAoa2V5cy5pbmRleE9mKGkpID49IDApIGNvbnRpbnVlOyBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGkpKSBjb250aW51ZTsgdGFyZ2V0W2ldID0gb2JqW2ldOyB9IHJldHVybiB0YXJnZXQ7IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG5pbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gXCJwcm9wLXR5cGVzXCI7XG5pbXBvcnQgaW52YXJpYW50IGZyb20gXCJpbnZhcmlhbnRcIjtcbmltcG9ydCB7IGNyZWF0ZUxvY2F0aW9uIH0gZnJvbSBcImhpc3RvcnlcIjtcblxudmFyIGlzTW9kaWZpZWRFdmVudCA9IGZ1bmN0aW9uIGlzTW9kaWZpZWRFdmVudChldmVudCkge1xuICByZXR1cm4gISEoZXZlbnQubWV0YUtleSB8fCBldmVudC5hbHRLZXkgfHwgZXZlbnQuY3RybEtleSB8fCBldmVudC5zaGlmdEtleSk7XG59O1xuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciByZW5kZXJpbmcgYSBoaXN0b3J5LWF3YXJlIDxhPi5cbiAqL1xuXG52YXIgTGluayA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhMaW5rLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBMaW5rKCkge1xuICAgIHZhciBfdGVtcCwgX3RoaXMsIF9yZXQ7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTGluayk7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3JldCA9IChfdGVtcCA9IChfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9SZWFjdCRDb21wb25lbnQuY2FsbC5hcHBseShfUmVhY3QkQ29tcG9uZW50LCBbdGhpc10uY29uY2F0KGFyZ3MpKSksIF90aGlzKSwgX3RoaXMuaGFuZGxlQ2xpY2sgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIGlmIChfdGhpcy5wcm9wcy5vbkNsaWNrKSBfdGhpcy5wcm9wcy5vbkNsaWNrKGV2ZW50KTtcblxuICAgICAgaWYgKCFldmVudC5kZWZhdWx0UHJldmVudGVkICYmIC8vIG9uQ2xpY2sgcHJldmVudGVkIGRlZmF1bHRcbiAgICAgIGV2ZW50LmJ1dHRvbiA9PT0gMCAmJiAvLyBpZ25vcmUgZXZlcnl0aGluZyBidXQgbGVmdCBjbGlja3NcbiAgICAgICFfdGhpcy5wcm9wcy50YXJnZXQgJiYgLy8gbGV0IGJyb3dzZXIgaGFuZGxlIFwidGFyZ2V0PV9ibGFua1wiIGV0Yy5cbiAgICAgICFpc01vZGlmaWVkRXZlbnQoZXZlbnQpIC8vIGlnbm9yZSBjbGlja3Mgd2l0aCBtb2RpZmllciBrZXlzXG4gICAgICApIHtcbiAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICAgICAgdmFyIGhpc3RvcnkgPSBfdGhpcy5jb250ZXh0LnJvdXRlci5oaXN0b3J5O1xuICAgICAgICAgIHZhciBfdGhpcyRwcm9wcyA9IF90aGlzLnByb3BzLFxuICAgICAgICAgICAgICByZXBsYWNlID0gX3RoaXMkcHJvcHMucmVwbGFjZSxcbiAgICAgICAgICAgICAgdG8gPSBfdGhpcyRwcm9wcy50bztcblxuXG4gICAgICAgICAgaWYgKHJlcGxhY2UpIHtcbiAgICAgICAgICAgIGhpc3RvcnkucmVwbGFjZSh0byk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGhpc3RvcnkucHVzaCh0byk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSwgX3RlbXApLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihfdGhpcywgX3JldCk7XG4gIH1cblxuICBMaW5rLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIHJlcGxhY2UgPSBfcHJvcHMucmVwbGFjZSxcbiAgICAgICAgdG8gPSBfcHJvcHMudG8sXG4gICAgICAgIGlubmVyUmVmID0gX3Byb3BzLmlubmVyUmVmLFxuICAgICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcHJvcHMsIFtcInJlcGxhY2VcIiwgXCJ0b1wiLCBcImlubmVyUmVmXCJdKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuXG4gICAgaW52YXJpYW50KHRoaXMuY29udGV4dC5yb3V0ZXIsIFwiWW91IHNob3VsZCBub3QgdXNlIDxMaW5rPiBvdXRzaWRlIGEgPFJvdXRlcj5cIik7XG5cbiAgICBpbnZhcmlhbnQodG8gIT09IHVuZGVmaW5lZCwgJ1lvdSBtdXN0IHNwZWNpZnkgdGhlIFwidG9cIiBwcm9wZXJ0eScpO1xuXG4gICAgdmFyIGhpc3RvcnkgPSB0aGlzLmNvbnRleHQucm91dGVyLmhpc3Rvcnk7XG5cbiAgICB2YXIgbG9jYXRpb24gPSB0eXBlb2YgdG8gPT09IFwic3RyaW5nXCIgPyBjcmVhdGVMb2NhdGlvbih0bywgbnVsbCwgbnVsbCwgaGlzdG9yeS5sb2NhdGlvbikgOiB0bztcblxuICAgIHZhciBocmVmID0gaGlzdG9yeS5jcmVhdGVIcmVmKGxvY2F0aW9uKTtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcImFcIiwgX2V4dGVuZHMoe30sIHByb3BzLCB7IG9uQ2xpY2s6IHRoaXMuaGFuZGxlQ2xpY2ssIGhyZWY6IGhyZWYsIHJlZjogaW5uZXJSZWYgfSkpO1xuICB9O1xuXG4gIHJldHVybiBMaW5rO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5MaW5rLnByb3BUeXBlcyA9IHtcbiAgb25DbGljazogUHJvcFR5cGVzLmZ1bmMsXG4gIHRhcmdldDogUHJvcFR5cGVzLnN0cmluZyxcbiAgcmVwbGFjZTogUHJvcFR5cGVzLmJvb2wsXG4gIHRvOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMub2JqZWN0XSkuaXNSZXF1aXJlZCxcbiAgaW5uZXJSZWY6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5mdW5jXSlcbn07XG5MaW5rLmRlZmF1bHRQcm9wcyA9IHtcbiAgcmVwbGFjZTogZmFsc2Vcbn07XG5MaW5rLmNvbnRleHRUeXBlcyA9IHtcbiAgcm91dGVyOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGhpc3Rvcnk6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgICBwdXNoOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgICAgcmVwbGFjZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICAgIGNyZWF0ZUhyZWY6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWRcbiAgICB9KS5pc1JlcXVpcmVkXG4gIH0pLmlzUmVxdWlyZWRcbn07XG5cblxuZXhwb3J0IGRlZmF1bHQgTGluazsiLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG9yaWdpbmFsTW9kdWxlKSB7XG5cdGlmICghb3JpZ2luYWxNb2R1bGUud2VicGFja1BvbHlmaWxsKSB7XG5cdFx0dmFyIG1vZHVsZSA9IE9iamVjdC5jcmVhdGUob3JpZ2luYWxNb2R1bGUpO1xuXHRcdC8vIG1vZHVsZS5wYXJlbnQgPSB1bmRlZmluZWQgYnkgZGVmYXVsdFxuXHRcdGlmICghbW9kdWxlLmNoaWxkcmVuKSBtb2R1bGUuY2hpbGRyZW4gPSBbXTtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImxvYWRlZFwiLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIG1vZHVsZS5sO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwiaWRcIiwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBtb2R1bGUuaTtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImV4cG9ydHNcIiwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZVxuXHRcdH0pO1xuXHRcdG1vZHVsZS53ZWJwYWNrUG9seWZpbGwgPSAxO1xuXHR9XG5cdHJldHVybiBtb2R1bGU7XG59O1xuIiwiLy8gV3JpdHRlbiBpbiB0aGlzIHJvdW5kIGFib3V0IHdheSBmb3IgYmFiZWwtdHJhbnNmb3JtLWltcG9ydHNcbmltcG9ydCBSb3V0ZXIgZnJvbSBcInJlYWN0LXJvdXRlci9lcy9Sb3V0ZXJcIjtcblxuZXhwb3J0IGRlZmF1bHQgUm91dGVyOyIsInZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxuaW1wb3J0IHdhcm5pbmcgZnJvbSBcIndhcm5pbmdcIjtcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSBcImludmFyaWFudFwiO1xuaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tIFwicHJvcC10eXBlc1wiO1xuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciBwdXR0aW5nIGhpc3Rvcnkgb24gY29udGV4dC5cbiAqL1xuXG52YXIgUm91dGVyID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKFJvdXRlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gUm91dGVyKCkge1xuICAgIHZhciBfdGVtcCwgX3RoaXMsIF9yZXQ7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUm91dGVyKTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHJldHVybiBfcmV0ID0gKF90ZW1wID0gKF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX1JlYWN0JENvbXBvbmVudC5jYWxsLmFwcGx5KF9SZWFjdCRDb21wb25lbnQsIFt0aGlzXS5jb25jYXQoYXJncykpKSwgX3RoaXMpLCBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgIG1hdGNoOiBfdGhpcy5jb21wdXRlTWF0Y2goX3RoaXMucHJvcHMuaGlzdG9yeS5sb2NhdGlvbi5wYXRobmFtZSlcbiAgICB9LCBfdGVtcCksIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKF90aGlzLCBfcmV0KTtcbiAgfVxuXG4gIFJvdXRlci5wcm90b3R5cGUuZ2V0Q2hpbGRDb250ZXh0ID0gZnVuY3Rpb24gZ2V0Q2hpbGRDb250ZXh0KCkge1xuICAgIHJldHVybiB7XG4gICAgICByb3V0ZXI6IF9leHRlbmRzKHt9LCB0aGlzLmNvbnRleHQucm91dGVyLCB7XG4gICAgICAgIGhpc3Rvcnk6IHRoaXMucHJvcHMuaGlzdG9yeSxcbiAgICAgICAgcm91dGU6IHtcbiAgICAgICAgICBsb2NhdGlvbjogdGhpcy5wcm9wcy5oaXN0b3J5LmxvY2F0aW9uLFxuICAgICAgICAgIG1hdGNoOiB0aGlzLnN0YXRlLm1hdGNoXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfTtcbiAgfTtcblxuICBSb3V0ZXIucHJvdG90eXBlLmNvbXB1dGVNYXRjaCA9IGZ1bmN0aW9uIGNvbXB1dGVNYXRjaChwYXRobmFtZSkge1xuICAgIHJldHVybiB7XG4gICAgICBwYXRoOiBcIi9cIixcbiAgICAgIHVybDogXCIvXCIsXG4gICAgICBwYXJhbXM6IHt9LFxuICAgICAgaXNFeGFjdDogcGF0aG5hbWUgPT09IFwiL1wiXG4gICAgfTtcbiAgfTtcblxuICBSb3V0ZXIucHJvdG90eXBlLmNvbXBvbmVudFdpbGxNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxNb3VudCgpIHtcbiAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBjaGlsZHJlbiA9IF9wcm9wcy5jaGlsZHJlbixcbiAgICAgICAgaGlzdG9yeSA9IF9wcm9wcy5oaXN0b3J5O1xuXG5cbiAgICBpbnZhcmlhbnQoY2hpbGRyZW4gPT0gbnVsbCB8fCBSZWFjdC5DaGlsZHJlbi5jb3VudChjaGlsZHJlbikgPT09IDEsIFwiQSA8Um91dGVyPiBtYXkgaGF2ZSBvbmx5IG9uZSBjaGlsZCBlbGVtZW50XCIpO1xuXG4gICAgLy8gRG8gdGhpcyBoZXJlIHNvIHdlIGNhbiBzZXRTdGF0ZSB3aGVuIGEgPFJlZGlyZWN0PiBjaGFuZ2VzIHRoZVxuICAgIC8vIGxvY2F0aW9uIGluIGNvbXBvbmVudFdpbGxNb3VudC4gVGhpcyBoYXBwZW5zIGUuZy4gd2hlbiBkb2luZ1xuICAgIC8vIHNlcnZlciByZW5kZXJpbmcgdXNpbmcgYSA8U3RhdGljUm91dGVyPi5cbiAgICB0aGlzLnVubGlzdGVuID0gaGlzdG9yeS5saXN0ZW4oZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMyLnNldFN0YXRlKHtcbiAgICAgICAgbWF0Y2g6IF90aGlzMi5jb21wdXRlTWF0Y2goaGlzdG9yeS5sb2NhdGlvbi5wYXRobmFtZSlcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9O1xuXG4gIFJvdXRlci5wcm90b3R5cGUuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKSB7XG4gICAgd2FybmluZyh0aGlzLnByb3BzLmhpc3RvcnkgPT09IG5leHRQcm9wcy5oaXN0b3J5LCBcIllvdSBjYW5ub3QgY2hhbmdlIDxSb3V0ZXIgaGlzdG9yeT5cIik7XG4gIH07XG5cbiAgUm91dGVyLnByb3RvdHlwZS5jb21wb25lbnRXaWxsVW5tb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIHRoaXMudW5saXN0ZW4oKTtcbiAgfTtcblxuICBSb3V0ZXIucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgY2hpbGRyZW4gPSB0aGlzLnByb3BzLmNoaWxkcmVuO1xuXG4gICAgcmV0dXJuIGNoaWxkcmVuID8gUmVhY3QuQ2hpbGRyZW4ub25seShjaGlsZHJlbikgOiBudWxsO1xuICB9O1xuXG4gIHJldHVybiBSb3V0ZXI7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cblJvdXRlci5wcm9wVHlwZXMgPSB7XG4gIGhpc3Rvcnk6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlXG59O1xuUm91dGVyLmNvbnRleHRUeXBlcyA9IHtcbiAgcm91dGVyOiBQcm9wVHlwZXMub2JqZWN0XG59O1xuUm91dGVyLmNoaWxkQ29udGV4dFR5cGVzID0ge1xuICByb3V0ZXI6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZFxufTtcblxuXG5leHBvcnQgZGVmYXVsdCBSb3V0ZXI7IiwiLy8gV3JpdHRlbiBpbiB0aGlzIHJvdW5kIGFib3V0IHdheSBmb3IgYmFiZWwtdHJhbnNmb3JtLWltcG9ydHNcbmltcG9ydCBSb3V0ZSBmcm9tIFwicmVhY3Qtcm91dGVyL2VzL1JvdXRlXCI7XG5cbmV4cG9ydCBkZWZhdWx0IFJvdXRlOyIsIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1pcy5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1pcy5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwidmFyIGlzYXJyYXkgPSByZXF1aXJlKCdpc2FycmF5JylcblxuLyoqXG4gKiBFeHBvc2UgYHBhdGhUb1JlZ2V4cGAuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gcGF0aFRvUmVnZXhwXG5tb2R1bGUuZXhwb3J0cy5wYXJzZSA9IHBhcnNlXG5tb2R1bGUuZXhwb3J0cy5jb21waWxlID0gY29tcGlsZVxubW9kdWxlLmV4cG9ydHMudG9rZW5zVG9GdW5jdGlvbiA9IHRva2Vuc1RvRnVuY3Rpb25cbm1vZHVsZS5leHBvcnRzLnRva2Vuc1RvUmVnRXhwID0gdG9rZW5zVG9SZWdFeHBcblxuLyoqXG4gKiBUaGUgbWFpbiBwYXRoIG1hdGNoaW5nIHJlZ2V4cCB1dGlsaXR5LlxuICpcbiAqIEB0eXBlIHtSZWdFeHB9XG4gKi9cbnZhciBQQVRIX1JFR0VYUCA9IG5ldyBSZWdFeHAoW1xuICAvLyBNYXRjaCBlc2NhcGVkIGNoYXJhY3RlcnMgdGhhdCB3b3VsZCBvdGhlcndpc2UgYXBwZWFyIGluIGZ1dHVyZSBtYXRjaGVzLlxuICAvLyBUaGlzIGFsbG93cyB0aGUgdXNlciB0byBlc2NhcGUgc3BlY2lhbCBjaGFyYWN0ZXJzIHRoYXQgd29uJ3QgdHJhbnNmb3JtLlxuICAnKFxcXFxcXFxcLiknLFxuICAvLyBNYXRjaCBFeHByZXNzLXN0eWxlIHBhcmFtZXRlcnMgYW5kIHVuLW5hbWVkIHBhcmFtZXRlcnMgd2l0aCBhIHByZWZpeFxuICAvLyBhbmQgb3B0aW9uYWwgc3VmZml4ZXMuIE1hdGNoZXMgYXBwZWFyIGFzOlxuICAvL1xuICAvLyBcIi86dGVzdChcXFxcZCspP1wiID0+IFtcIi9cIiwgXCJ0ZXN0XCIsIFwiXFxkK1wiLCB1bmRlZmluZWQsIFwiP1wiLCB1bmRlZmluZWRdXG4gIC8vIFwiL3JvdXRlKFxcXFxkKylcIiAgPT4gW3VuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIFwiXFxkK1wiLCB1bmRlZmluZWQsIHVuZGVmaW5lZF1cbiAgLy8gXCIvKlwiICAgICAgICAgICAgPT4gW1wiL1wiLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIFwiKlwiXVxuICAnKFtcXFxcLy5dKT8oPzooPzpcXFxcOihcXFxcdyspKD86XFxcXCgoKD86XFxcXFxcXFwufFteXFxcXFxcXFwoKV0pKylcXFxcKSk/fFxcXFwoKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcKCldKSspXFxcXCkpKFsrKj9dKT98KFxcXFwqKSknXG5dLmpvaW4oJ3wnKSwgJ2cnKVxuXG4vKipcbiAqIFBhcnNlIGEgc3RyaW5nIGZvciB0aGUgcmF3IHRva2Vucy5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9ICBzdHJcbiAqIEBwYXJhbSAge09iamVjdD19IG9wdGlvbnNcbiAqIEByZXR1cm4geyFBcnJheX1cbiAqL1xuZnVuY3Rpb24gcGFyc2UgKHN0ciwgb3B0aW9ucykge1xuICB2YXIgdG9rZW5zID0gW11cbiAgdmFyIGtleSA9IDBcbiAgdmFyIGluZGV4ID0gMFxuICB2YXIgcGF0aCA9ICcnXG4gIHZhciBkZWZhdWx0RGVsaW1pdGVyID0gb3B0aW9ucyAmJiBvcHRpb25zLmRlbGltaXRlciB8fCAnLydcbiAgdmFyIHJlc1xuXG4gIHdoaWxlICgocmVzID0gUEFUSF9SRUdFWFAuZXhlYyhzdHIpKSAhPSBudWxsKSB7XG4gICAgdmFyIG0gPSByZXNbMF1cbiAgICB2YXIgZXNjYXBlZCA9IHJlc1sxXVxuICAgIHZhciBvZmZzZXQgPSByZXMuaW5kZXhcbiAgICBwYXRoICs9IHN0ci5zbGljZShpbmRleCwgb2Zmc2V0KVxuICAgIGluZGV4ID0gb2Zmc2V0ICsgbS5sZW5ndGhcblxuICAgIC8vIElnbm9yZSBhbHJlYWR5IGVzY2FwZWQgc2VxdWVuY2VzLlxuICAgIGlmIChlc2NhcGVkKSB7XG4gICAgICBwYXRoICs9IGVzY2FwZWRbMV1cbiAgICAgIGNvbnRpbnVlXG4gICAgfVxuXG4gICAgdmFyIG5leHQgPSBzdHJbaW5kZXhdXG4gICAgdmFyIHByZWZpeCA9IHJlc1syXVxuICAgIHZhciBuYW1lID0gcmVzWzNdXG4gICAgdmFyIGNhcHR1cmUgPSByZXNbNF1cbiAgICB2YXIgZ3JvdXAgPSByZXNbNV1cbiAgICB2YXIgbW9kaWZpZXIgPSByZXNbNl1cbiAgICB2YXIgYXN0ZXJpc2sgPSByZXNbN11cblxuICAgIC8vIFB1c2ggdGhlIGN1cnJlbnQgcGF0aCBvbnRvIHRoZSB0b2tlbnMuXG4gICAgaWYgKHBhdGgpIHtcbiAgICAgIHRva2Vucy5wdXNoKHBhdGgpXG4gICAgICBwYXRoID0gJydcbiAgICB9XG5cbiAgICB2YXIgcGFydGlhbCA9IHByZWZpeCAhPSBudWxsICYmIG5leHQgIT0gbnVsbCAmJiBuZXh0ICE9PSBwcmVmaXhcbiAgICB2YXIgcmVwZWF0ID0gbW9kaWZpZXIgPT09ICcrJyB8fCBtb2RpZmllciA9PT0gJyonXG4gICAgdmFyIG9wdGlvbmFsID0gbW9kaWZpZXIgPT09ICc/JyB8fCBtb2RpZmllciA9PT0gJyonXG4gICAgdmFyIGRlbGltaXRlciA9IHJlc1syXSB8fCBkZWZhdWx0RGVsaW1pdGVyXG4gICAgdmFyIHBhdHRlcm4gPSBjYXB0dXJlIHx8IGdyb3VwXG5cbiAgICB0b2tlbnMucHVzaCh7XG4gICAgICBuYW1lOiBuYW1lIHx8IGtleSsrLFxuICAgICAgcHJlZml4OiBwcmVmaXggfHwgJycsXG4gICAgICBkZWxpbWl0ZXI6IGRlbGltaXRlcixcbiAgICAgIG9wdGlvbmFsOiBvcHRpb25hbCxcbiAgICAgIHJlcGVhdDogcmVwZWF0LFxuICAgICAgcGFydGlhbDogcGFydGlhbCxcbiAgICAgIGFzdGVyaXNrOiAhIWFzdGVyaXNrLFxuICAgICAgcGF0dGVybjogcGF0dGVybiA/IGVzY2FwZUdyb3VwKHBhdHRlcm4pIDogKGFzdGVyaXNrID8gJy4qJyA6ICdbXicgKyBlc2NhcGVTdHJpbmcoZGVsaW1pdGVyKSArICddKz8nKVxuICAgIH0pXG4gIH1cblxuICAvLyBNYXRjaCBhbnkgY2hhcmFjdGVycyBzdGlsbCByZW1haW5pbmcuXG4gIGlmIChpbmRleCA8IHN0ci5sZW5ndGgpIHtcbiAgICBwYXRoICs9IHN0ci5zdWJzdHIoaW5kZXgpXG4gIH1cblxuICAvLyBJZiB0aGUgcGF0aCBleGlzdHMsIHB1c2ggaXQgb250byB0aGUgZW5kLlxuICBpZiAocGF0aCkge1xuICAgIHRva2Vucy5wdXNoKHBhdGgpXG4gIH1cblxuICByZXR1cm4gdG9rZW5zXG59XG5cbi8qKlxuICogQ29tcGlsZSBhIHN0cmluZyB0byBhIHRlbXBsYXRlIGZ1bmN0aW9uIGZvciB0aGUgcGF0aC5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9ICAgICAgICAgICAgIHN0clxuICogQHBhcmFtICB7T2JqZWN0PX0gICAgICAgICAgICBvcHRpb25zXG4gKiBAcmV0dXJuIHshZnVuY3Rpb24oT2JqZWN0PSwgT2JqZWN0PSl9XG4gKi9cbmZ1bmN0aW9uIGNvbXBpbGUgKHN0ciwgb3B0aW9ucykge1xuICByZXR1cm4gdG9rZW5zVG9GdW5jdGlvbihwYXJzZShzdHIsIG9wdGlvbnMpKVxufVxuXG4vKipcbiAqIFByZXR0aWVyIGVuY29kaW5nIG9mIFVSSSBwYXRoIHNlZ21lbnRzLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ31cbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZW5jb2RlVVJJQ29tcG9uZW50UHJldHR5IChzdHIpIHtcbiAgcmV0dXJuIGVuY29kZVVSSShzdHIpLnJlcGxhY2UoL1tcXC8/I10vZywgZnVuY3Rpb24gKGMpIHtcbiAgICByZXR1cm4gJyUnICsgYy5jaGFyQ29kZUF0KDApLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpXG4gIH0pXG59XG5cbi8qKlxuICogRW5jb2RlIHRoZSBhc3RlcmlzayBwYXJhbWV0ZXIuIFNpbWlsYXIgdG8gYHByZXR0eWAsIGJ1dCBhbGxvd3Mgc2xhc2hlcy5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9XG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGVuY29kZUFzdGVyaXNrIChzdHIpIHtcbiAgcmV0dXJuIGVuY29kZVVSSShzdHIpLnJlcGxhY2UoL1s/I10vZywgZnVuY3Rpb24gKGMpIHtcbiAgICByZXR1cm4gJyUnICsgYy5jaGFyQ29kZUF0KDApLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpXG4gIH0pXG59XG5cbi8qKlxuICogRXhwb3NlIGEgbWV0aG9kIGZvciB0cmFuc2Zvcm1pbmcgdG9rZW5zIGludG8gdGhlIHBhdGggZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIHRva2Vuc1RvRnVuY3Rpb24gKHRva2Vucykge1xuICAvLyBDb21waWxlIGFsbCB0aGUgdG9rZW5zIGludG8gcmVnZXhwcy5cbiAgdmFyIG1hdGNoZXMgPSBuZXcgQXJyYXkodG9rZW5zLmxlbmd0aClcblxuICAvLyBDb21waWxlIGFsbCB0aGUgcGF0dGVybnMgYmVmb3JlIGNvbXBpbGF0aW9uLlxuICBmb3IgKHZhciBpID0gMDsgaSA8IHRva2Vucy5sZW5ndGg7IGkrKykge1xuICAgIGlmICh0eXBlb2YgdG9rZW5zW2ldID09PSAnb2JqZWN0Jykge1xuICAgICAgbWF0Y2hlc1tpXSA9IG5ldyBSZWdFeHAoJ14oPzonICsgdG9rZW5zW2ldLnBhdHRlcm4gKyAnKSQnKVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAob2JqLCBvcHRzKSB7XG4gICAgdmFyIHBhdGggPSAnJ1xuICAgIHZhciBkYXRhID0gb2JqIHx8IHt9XG4gICAgdmFyIG9wdGlvbnMgPSBvcHRzIHx8IHt9XG4gICAgdmFyIGVuY29kZSA9IG9wdGlvbnMucHJldHR5ID8gZW5jb2RlVVJJQ29tcG9uZW50UHJldHR5IDogZW5jb2RlVVJJQ29tcG9uZW50XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRva2Vucy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHRva2VuID0gdG9rZW5zW2ldXG5cbiAgICAgIGlmICh0eXBlb2YgdG9rZW4gPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHBhdGggKz0gdG9rZW5cblxuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuXG4gICAgICB2YXIgdmFsdWUgPSBkYXRhW3Rva2VuLm5hbWVdXG4gICAgICB2YXIgc2VnbWVudFxuXG4gICAgICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgICAgICBpZiAodG9rZW4ub3B0aW9uYWwpIHtcbiAgICAgICAgICAvLyBQcmVwZW5kIHBhcnRpYWwgc2VnbWVudCBwcmVmaXhlcy5cbiAgICAgICAgICBpZiAodG9rZW4ucGFydGlhbCkge1xuICAgICAgICAgICAgcGF0aCArPSB0b2tlbi5wcmVmaXhcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIFwiJyArIHRva2VuLm5hbWUgKyAnXCIgdG8gYmUgZGVmaW5lZCcpXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGlzYXJyYXkodmFsdWUpKSB7XG4gICAgICAgIGlmICghdG9rZW4ucmVwZWF0KSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgXCInICsgdG9rZW4ubmFtZSArICdcIiB0byBub3QgcmVwZWF0LCBidXQgcmVjZWl2ZWQgYCcgKyBKU09OLnN0cmluZ2lmeSh2YWx1ZSkgKyAnYCcpXG4gICAgICAgIH1cblxuICAgICAgICBpZiAodmFsdWUubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgaWYgKHRva2VuLm9wdGlvbmFsKSB7XG4gICAgICAgICAgICBjb250aW51ZVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBcIicgKyB0b2tlbi5uYW1lICsgJ1wiIHRvIG5vdCBiZSBlbXB0eScpXG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCB2YWx1ZS5sZW5ndGg7IGorKykge1xuICAgICAgICAgIHNlZ21lbnQgPSBlbmNvZGUodmFsdWVbal0pXG5cbiAgICAgICAgICBpZiAoIW1hdGNoZXNbaV0udGVzdChzZWdtZW50KSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgYWxsIFwiJyArIHRva2VuLm5hbWUgKyAnXCIgdG8gbWF0Y2ggXCInICsgdG9rZW4ucGF0dGVybiArICdcIiwgYnV0IHJlY2VpdmVkIGAnICsgSlNPTi5zdHJpbmdpZnkoc2VnbWVudCkgKyAnYCcpXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcGF0aCArPSAoaiA9PT0gMCA/IHRva2VuLnByZWZpeCA6IHRva2VuLmRlbGltaXRlcikgKyBzZWdtZW50XG4gICAgICAgIH1cblxuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuXG4gICAgICBzZWdtZW50ID0gdG9rZW4uYXN0ZXJpc2sgPyBlbmNvZGVBc3Rlcmlzayh2YWx1ZSkgOiBlbmNvZGUodmFsdWUpXG5cbiAgICAgIGlmICghbWF0Y2hlc1tpXS50ZXN0KHNlZ21lbnQpKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIFwiJyArIHRva2VuLm5hbWUgKyAnXCIgdG8gbWF0Y2ggXCInICsgdG9rZW4ucGF0dGVybiArICdcIiwgYnV0IHJlY2VpdmVkIFwiJyArIHNlZ21lbnQgKyAnXCInKVxuICAgICAgfVxuXG4gICAgICBwYXRoICs9IHRva2VuLnByZWZpeCArIHNlZ21lbnRcbiAgICB9XG5cbiAgICByZXR1cm4gcGF0aFxuICB9XG59XG5cbi8qKlxuICogRXNjYXBlIGEgcmVndWxhciBleHByZXNzaW9uIHN0cmluZy5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9IHN0clxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBlc2NhcGVTdHJpbmcgKHN0cikge1xuICByZXR1cm4gc3RyLnJlcGxhY2UoLyhbLisqPz1eIToke30oKVtcXF18XFwvXFxcXF0pL2csICdcXFxcJDEnKVxufVxuXG4vKipcbiAqIEVzY2FwZSB0aGUgY2FwdHVyaW5nIGdyb3VwIGJ5IGVzY2FwaW5nIHNwZWNpYWwgY2hhcmFjdGVycyBhbmQgbWVhbmluZy5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9IGdyb3VwXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGVzY2FwZUdyb3VwIChncm91cCkge1xuICByZXR1cm4gZ3JvdXAucmVwbGFjZSgvKFs9ITokXFwvKCldKS9nLCAnXFxcXCQxJylcbn1cblxuLyoqXG4gKiBBdHRhY2ggdGhlIGtleXMgYXMgYSBwcm9wZXJ0eSBvZiB0aGUgcmVnZXhwLlxuICpcbiAqIEBwYXJhbSAgeyFSZWdFeHB9IHJlXG4gKiBAcGFyYW0gIHtBcnJheX0gICBrZXlzXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiBhdHRhY2hLZXlzIChyZSwga2V5cykge1xuICByZS5rZXlzID0ga2V5c1xuICByZXR1cm4gcmVcbn1cblxuLyoqXG4gKiBHZXQgdGhlIGZsYWdzIGZvciBhIHJlZ2V4cCBmcm9tIHRoZSBvcHRpb25zLlxuICpcbiAqIEBwYXJhbSAge09iamVjdH0gb3B0aW9uc1xuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBmbGFncyAob3B0aW9ucykge1xuICByZXR1cm4gb3B0aW9ucy5zZW5zaXRpdmUgPyAnJyA6ICdpJ1xufVxuXG4vKipcbiAqIFB1bGwgb3V0IGtleXMgZnJvbSBhIHJlZ2V4cC5cbiAqXG4gKiBAcGFyYW0gIHshUmVnRXhwfSBwYXRoXG4gKiBAcGFyYW0gIHshQXJyYXl9ICBrZXlzXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiByZWdleHBUb1JlZ2V4cCAocGF0aCwga2V5cykge1xuICAvLyBVc2UgYSBuZWdhdGl2ZSBsb29rYWhlYWQgdG8gbWF0Y2ggb25seSBjYXB0dXJpbmcgZ3JvdXBzLlxuICB2YXIgZ3JvdXBzID0gcGF0aC5zb3VyY2UubWF0Y2goL1xcKCg/IVxcPykvZylcblxuICBpZiAoZ3JvdXBzKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBncm91cHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGtleXMucHVzaCh7XG4gICAgICAgIG5hbWU6IGksXG4gICAgICAgIHByZWZpeDogbnVsbCxcbiAgICAgICAgZGVsaW1pdGVyOiBudWxsLFxuICAgICAgICBvcHRpb25hbDogZmFsc2UsXG4gICAgICAgIHJlcGVhdDogZmFsc2UsXG4gICAgICAgIHBhcnRpYWw6IGZhbHNlLFxuICAgICAgICBhc3RlcmlzazogZmFsc2UsXG4gICAgICAgIHBhdHRlcm46IG51bGxcbiAgICAgIH0pXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGF0dGFjaEtleXMocGF0aCwga2V5cylcbn1cblxuLyoqXG4gKiBUcmFuc2Zvcm0gYW4gYXJyYXkgaW50byBhIHJlZ2V4cC5cbiAqXG4gKiBAcGFyYW0gIHshQXJyYXl9ICBwYXRoXG4gKiBAcGFyYW0gIHtBcnJheX0gICBrZXlzXG4gKiBAcGFyYW0gIHshT2JqZWN0fSBvcHRpb25zXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiBhcnJheVRvUmVnZXhwIChwYXRoLCBrZXlzLCBvcHRpb25zKSB7XG4gIHZhciBwYXJ0cyA9IFtdXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYXRoLmxlbmd0aDsgaSsrKSB7XG4gICAgcGFydHMucHVzaChwYXRoVG9SZWdleHAocGF0aFtpXSwga2V5cywgb3B0aW9ucykuc291cmNlKVxuICB9XG5cbiAgdmFyIHJlZ2V4cCA9IG5ldyBSZWdFeHAoJyg/OicgKyBwYXJ0cy5qb2luKCd8JykgKyAnKScsIGZsYWdzKG9wdGlvbnMpKVxuXG4gIHJldHVybiBhdHRhY2hLZXlzKHJlZ2V4cCwga2V5cylcbn1cblxuLyoqXG4gKiBDcmVhdGUgYSBwYXRoIHJlZ2V4cCBmcm9tIHN0cmluZyBpbnB1dC5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9ICBwYXRoXG4gKiBAcGFyYW0gIHshQXJyYXl9ICBrZXlzXG4gKiBAcGFyYW0gIHshT2JqZWN0fSBvcHRpb25zXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiBzdHJpbmdUb1JlZ2V4cCAocGF0aCwga2V5cywgb3B0aW9ucykge1xuICByZXR1cm4gdG9rZW5zVG9SZWdFeHAocGFyc2UocGF0aCwgb3B0aW9ucyksIGtleXMsIG9wdGlvbnMpXG59XG5cbi8qKlxuICogRXhwb3NlIGEgZnVuY3Rpb24gZm9yIHRha2luZyB0b2tlbnMgYW5kIHJldHVybmluZyBhIFJlZ0V4cC5cbiAqXG4gKiBAcGFyYW0gIHshQXJyYXl9ICAgICAgICAgIHRva2Vuc1xuICogQHBhcmFtICB7KEFycmF5fE9iamVjdCk9fSBrZXlzXG4gKiBAcGFyYW0gIHtPYmplY3Q9fSAgICAgICAgIG9wdGlvbnNcbiAqIEByZXR1cm4geyFSZWdFeHB9XG4gKi9cbmZ1bmN0aW9uIHRva2Vuc1RvUmVnRXhwICh0b2tlbnMsIGtleXMsIG9wdGlvbnMpIHtcbiAgaWYgKCFpc2FycmF5KGtleXMpKSB7XG4gICAgb3B0aW9ucyA9IC8qKiBAdHlwZSB7IU9iamVjdH0gKi8gKGtleXMgfHwgb3B0aW9ucylcbiAgICBrZXlzID0gW11cbiAgfVxuXG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9XG5cbiAgdmFyIHN0cmljdCA9IG9wdGlvbnMuc3RyaWN0XG4gIHZhciBlbmQgPSBvcHRpb25zLmVuZCAhPT0gZmFsc2VcbiAgdmFyIHJvdXRlID0gJydcblxuICAvLyBJdGVyYXRlIG92ZXIgdGhlIHRva2VucyBhbmQgY3JlYXRlIG91ciByZWdleHAgc3RyaW5nLlxuICBmb3IgKHZhciBpID0gMDsgaSA8IHRva2Vucy5sZW5ndGg7IGkrKykge1xuICAgIHZhciB0b2tlbiA9IHRva2Vuc1tpXVxuXG4gICAgaWYgKHR5cGVvZiB0b2tlbiA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHJvdXRlICs9IGVzY2FwZVN0cmluZyh0b2tlbilcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHByZWZpeCA9IGVzY2FwZVN0cmluZyh0b2tlbi5wcmVmaXgpXG4gICAgICB2YXIgY2FwdHVyZSA9ICcoPzonICsgdG9rZW4ucGF0dGVybiArICcpJ1xuXG4gICAgICBrZXlzLnB1c2godG9rZW4pXG5cbiAgICAgIGlmICh0b2tlbi5yZXBlYXQpIHtcbiAgICAgICAgY2FwdHVyZSArPSAnKD86JyArIHByZWZpeCArIGNhcHR1cmUgKyAnKSonXG4gICAgICB9XG5cbiAgICAgIGlmICh0b2tlbi5vcHRpb25hbCkge1xuICAgICAgICBpZiAoIXRva2VuLnBhcnRpYWwpIHtcbiAgICAgICAgICBjYXB0dXJlID0gJyg/OicgKyBwcmVmaXggKyAnKCcgKyBjYXB0dXJlICsgJykpPydcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjYXB0dXJlID0gcHJlZml4ICsgJygnICsgY2FwdHVyZSArICcpPydcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2FwdHVyZSA9IHByZWZpeCArICcoJyArIGNhcHR1cmUgKyAnKSdcbiAgICAgIH1cblxuICAgICAgcm91dGUgKz0gY2FwdHVyZVxuICAgIH1cbiAgfVxuXG4gIHZhciBkZWxpbWl0ZXIgPSBlc2NhcGVTdHJpbmcob3B0aW9ucy5kZWxpbWl0ZXIgfHwgJy8nKVxuICB2YXIgZW5kc1dpdGhEZWxpbWl0ZXIgPSByb3V0ZS5zbGljZSgtZGVsaW1pdGVyLmxlbmd0aCkgPT09IGRlbGltaXRlclxuXG4gIC8vIEluIG5vbi1zdHJpY3QgbW9kZSB3ZSBhbGxvdyBhIHNsYXNoIGF0IHRoZSBlbmQgb2YgbWF0Y2guIElmIHRoZSBwYXRoIHRvXG4gIC8vIG1hdGNoIGFscmVhZHkgZW5kcyB3aXRoIGEgc2xhc2gsIHdlIHJlbW92ZSBpdCBmb3IgY29uc2lzdGVuY3kuIFRoZSBzbGFzaFxuICAvLyBpcyB2YWxpZCBhdCB0aGUgZW5kIG9mIGEgcGF0aCBtYXRjaCwgbm90IGluIHRoZSBtaWRkbGUuIFRoaXMgaXMgaW1wb3J0YW50XG4gIC8vIGluIG5vbi1lbmRpbmcgbW9kZSwgd2hlcmUgXCIvdGVzdC9cIiBzaG91bGRuJ3QgbWF0Y2ggXCIvdGVzdC8vcm91dGVcIi5cbiAgaWYgKCFzdHJpY3QpIHtcbiAgICByb3V0ZSA9IChlbmRzV2l0aERlbGltaXRlciA/IHJvdXRlLnNsaWNlKDAsIC1kZWxpbWl0ZXIubGVuZ3RoKSA6IHJvdXRlKSArICcoPzonICsgZGVsaW1pdGVyICsgJyg/PSQpKT8nXG4gIH1cblxuICBpZiAoZW5kKSB7XG4gICAgcm91dGUgKz0gJyQnXG4gIH0gZWxzZSB7XG4gICAgLy8gSW4gbm9uLWVuZGluZyBtb2RlLCB3ZSBuZWVkIHRoZSBjYXB0dXJpbmcgZ3JvdXBzIHRvIG1hdGNoIGFzIG11Y2ggYXNcbiAgICAvLyBwb3NzaWJsZSBieSB1c2luZyBhIHBvc2l0aXZlIGxvb2thaGVhZCB0byB0aGUgZW5kIG9yIG5leHQgcGF0aCBzZWdtZW50LlxuICAgIHJvdXRlICs9IHN0cmljdCAmJiBlbmRzV2l0aERlbGltaXRlciA/ICcnIDogJyg/PScgKyBkZWxpbWl0ZXIgKyAnfCQpJ1xuICB9XG5cbiAgcmV0dXJuIGF0dGFjaEtleXMobmV3IFJlZ0V4cCgnXicgKyByb3V0ZSwgZmxhZ3Mob3B0aW9ucykpLCBrZXlzKVxufVxuXG4vKipcbiAqIE5vcm1hbGl6ZSB0aGUgZ2l2ZW4gcGF0aCBzdHJpbmcsIHJldHVybmluZyBhIHJlZ3VsYXIgZXhwcmVzc2lvbi5cbiAqXG4gKiBBbiBlbXB0eSBhcnJheSBjYW4gYmUgcGFzc2VkIGluIGZvciB0aGUga2V5cywgd2hpY2ggd2lsbCBob2xkIHRoZVxuICogcGxhY2Vob2xkZXIga2V5IGRlc2NyaXB0aW9ucy4gRm9yIGV4YW1wbGUsIHVzaW5nIGAvdXNlci86aWRgLCBga2V5c2Agd2lsbFxuICogY29udGFpbiBgW3sgbmFtZTogJ2lkJywgZGVsaW1pdGVyOiAnLycsIG9wdGlvbmFsOiBmYWxzZSwgcmVwZWF0OiBmYWxzZSB9XWAuXG4gKlxuICogQHBhcmFtICB7KHN0cmluZ3xSZWdFeHB8QXJyYXkpfSBwYXRoXG4gKiBAcGFyYW0gIHsoQXJyYXl8T2JqZWN0KT19ICAgICAgIGtleXNcbiAqIEBwYXJhbSAge09iamVjdD19ICAgICAgICAgICAgICAgb3B0aW9uc1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gcGF0aFRvUmVnZXhwIChwYXRoLCBrZXlzLCBvcHRpb25zKSB7XG4gIGlmICghaXNhcnJheShrZXlzKSkge1xuICAgIG9wdGlvbnMgPSAvKiogQHR5cGUgeyFPYmplY3R9ICovIChrZXlzIHx8IG9wdGlvbnMpXG4gICAga2V5cyA9IFtdXG4gIH1cblxuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fVxuXG4gIGlmIChwYXRoIGluc3RhbmNlb2YgUmVnRXhwKSB7XG4gICAgcmV0dXJuIHJlZ2V4cFRvUmVnZXhwKHBhdGgsIC8qKiBAdHlwZSB7IUFycmF5fSAqLyAoa2V5cykpXG4gIH1cblxuICBpZiAoaXNhcnJheShwYXRoKSkge1xuICAgIHJldHVybiBhcnJheVRvUmVnZXhwKC8qKiBAdHlwZSB7IUFycmF5fSAqLyAocGF0aCksIC8qKiBAdHlwZSB7IUFycmF5fSAqLyAoa2V5cyksIG9wdGlvbnMpXG4gIH1cblxuICByZXR1cm4gc3RyaW5nVG9SZWdleHAoLyoqIEB0eXBlIHtzdHJpbmd9ICovIChwYXRoKSwgLyoqIEB0eXBlIHshQXJyYXl9ICovIChrZXlzKSwgb3B0aW9ucylcbn1cbiIsInZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxuaW1wb3J0IHdhcm5pbmcgZnJvbSBcIndhcm5pbmdcIjtcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSBcImludmFyaWFudFwiO1xuaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tIFwicHJvcC10eXBlc1wiO1xuaW1wb3J0IG1hdGNoUGF0aCBmcm9tIFwiLi9tYXRjaFBhdGhcIjtcblxudmFyIGlzRW1wdHlDaGlsZHJlbiA9IGZ1bmN0aW9uIGlzRW1wdHlDaGlsZHJlbihjaGlsZHJlbikge1xuICByZXR1cm4gUmVhY3QuQ2hpbGRyZW4uY291bnQoY2hpbGRyZW4pID09PSAwO1xufTtcblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgbWF0Y2hpbmcgYSBzaW5nbGUgcGF0aCBhbmQgcmVuZGVyaW5nLlxuICovXG5cbnZhciBSb3V0ZSA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhSb3V0ZSwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gUm91dGUoKSB7XG4gICAgdmFyIF90ZW1wLCBfdGhpcywgX3JldDtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBSb3V0ZSk7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3JldCA9IChfdGVtcCA9IChfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9SZWFjdCRDb21wb25lbnQuY2FsbC5hcHBseShfUmVhY3QkQ29tcG9uZW50LCBbdGhpc10uY29uY2F0KGFyZ3MpKSksIF90aGlzKSwgX3RoaXMuc3RhdGUgPSB7XG4gICAgICBtYXRjaDogX3RoaXMuY29tcHV0ZU1hdGNoKF90aGlzLnByb3BzLCBfdGhpcy5jb250ZXh0LnJvdXRlcilcbiAgICB9LCBfdGVtcCksIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKF90aGlzLCBfcmV0KTtcbiAgfVxuXG4gIFJvdXRlLnByb3RvdHlwZS5nZXRDaGlsZENvbnRleHQgPSBmdW5jdGlvbiBnZXRDaGlsZENvbnRleHQoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHJvdXRlcjogX2V4dGVuZHMoe30sIHRoaXMuY29udGV4dC5yb3V0ZXIsIHtcbiAgICAgICAgcm91dGU6IHtcbiAgICAgICAgICBsb2NhdGlvbjogdGhpcy5wcm9wcy5sb2NhdGlvbiB8fCB0aGlzLmNvbnRleHQucm91dGVyLnJvdXRlLmxvY2F0aW9uLFxuICAgICAgICAgIG1hdGNoOiB0aGlzLnN0YXRlLm1hdGNoXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfTtcbiAgfTtcblxuICBSb3V0ZS5wcm90b3R5cGUuY29tcHV0ZU1hdGNoID0gZnVuY3Rpb24gY29tcHV0ZU1hdGNoKF9yZWYsIHJvdXRlcikge1xuICAgIHZhciBjb21wdXRlZE1hdGNoID0gX3JlZi5jb21wdXRlZE1hdGNoLFxuICAgICAgICBsb2NhdGlvbiA9IF9yZWYubG9jYXRpb24sXG4gICAgICAgIHBhdGggPSBfcmVmLnBhdGgsXG4gICAgICAgIHN0cmljdCA9IF9yZWYuc3RyaWN0LFxuICAgICAgICBleGFjdCA9IF9yZWYuZXhhY3QsXG4gICAgICAgIHNlbnNpdGl2ZSA9IF9yZWYuc2Vuc2l0aXZlO1xuXG4gICAgaWYgKGNvbXB1dGVkTWF0Y2gpIHJldHVybiBjb21wdXRlZE1hdGNoOyAvLyA8U3dpdGNoPiBhbHJlYWR5IGNvbXB1dGVkIHRoZSBtYXRjaCBmb3IgdXNcblxuICAgIGludmFyaWFudChyb3V0ZXIsIFwiWW91IHNob3VsZCBub3QgdXNlIDxSb3V0ZT4gb3Igd2l0aFJvdXRlcigpIG91dHNpZGUgYSA8Um91dGVyPlwiKTtcblxuICAgIHZhciByb3V0ZSA9IHJvdXRlci5yb3V0ZTtcblxuICAgIHZhciBwYXRobmFtZSA9IChsb2NhdGlvbiB8fCByb3V0ZS5sb2NhdGlvbikucGF0aG5hbWU7XG5cbiAgICByZXR1cm4gbWF0Y2hQYXRoKHBhdGhuYW1lLCB7IHBhdGg6IHBhdGgsIHN0cmljdDogc3RyaWN0LCBleGFjdDogZXhhY3QsIHNlbnNpdGl2ZTogc2Vuc2l0aXZlIH0sIHJvdXRlLm1hdGNoKTtcbiAgfTtcblxuICBSb3V0ZS5wcm90b3R5cGUuY29tcG9uZW50V2lsbE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbE1vdW50KCkge1xuICAgIHdhcm5pbmcoISh0aGlzLnByb3BzLmNvbXBvbmVudCAmJiB0aGlzLnByb3BzLnJlbmRlciksIFwiWW91IHNob3VsZCBub3QgdXNlIDxSb3V0ZSBjb21wb25lbnQ+IGFuZCA8Um91dGUgcmVuZGVyPiBpbiB0aGUgc2FtZSByb3V0ZTsgPFJvdXRlIHJlbmRlcj4gd2lsbCBiZSBpZ25vcmVkXCIpO1xuXG4gICAgd2FybmluZyghKHRoaXMucHJvcHMuY29tcG9uZW50ICYmIHRoaXMucHJvcHMuY2hpbGRyZW4gJiYgIWlzRW1wdHlDaGlsZHJlbih0aGlzLnByb3BzLmNoaWxkcmVuKSksIFwiWW91IHNob3VsZCBub3QgdXNlIDxSb3V0ZSBjb21wb25lbnQ+IGFuZCA8Um91dGUgY2hpbGRyZW4+IGluIHRoZSBzYW1lIHJvdXRlOyA8Um91dGUgY2hpbGRyZW4+IHdpbGwgYmUgaWdub3JlZFwiKTtcblxuICAgIHdhcm5pbmcoISh0aGlzLnByb3BzLnJlbmRlciAmJiB0aGlzLnByb3BzLmNoaWxkcmVuICYmICFpc0VtcHR5Q2hpbGRyZW4odGhpcy5wcm9wcy5jaGlsZHJlbikpLCBcIllvdSBzaG91bGQgbm90IHVzZSA8Um91dGUgcmVuZGVyPiBhbmQgPFJvdXRlIGNoaWxkcmVuPiBpbiB0aGUgc2FtZSByb3V0ZTsgPFJvdXRlIGNoaWxkcmVuPiB3aWxsIGJlIGlnbm9yZWRcIik7XG4gIH07XG5cbiAgUm91dGUucHJvdG90eXBlLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcywgbmV4dENvbnRleHQpIHtcbiAgICB3YXJuaW5nKCEobmV4dFByb3BzLmxvY2F0aW9uICYmICF0aGlzLnByb3BzLmxvY2F0aW9uKSwgJzxSb3V0ZT4gZWxlbWVudHMgc2hvdWxkIG5vdCBjaGFuZ2UgZnJvbSB1bmNvbnRyb2xsZWQgdG8gY29udHJvbGxlZCAob3IgdmljZSB2ZXJzYSkuIFlvdSBpbml0aWFsbHkgdXNlZCBubyBcImxvY2F0aW9uXCIgcHJvcCBhbmQgdGhlbiBwcm92aWRlZCBvbmUgb24gYSBzdWJzZXF1ZW50IHJlbmRlci4nKTtcblxuICAgIHdhcm5pbmcoISghbmV4dFByb3BzLmxvY2F0aW9uICYmIHRoaXMucHJvcHMubG9jYXRpb24pLCAnPFJvdXRlPiBlbGVtZW50cyBzaG91bGQgbm90IGNoYW5nZSBmcm9tIGNvbnRyb2xsZWQgdG8gdW5jb250cm9sbGVkIChvciB2aWNlIHZlcnNhKS4gWW91IHByb3ZpZGVkIGEgXCJsb2NhdGlvblwiIHByb3AgaW5pdGlhbGx5IGJ1dCBvbWl0dGVkIGl0IG9uIGEgc3Vic2VxdWVudCByZW5kZXIuJyk7XG5cbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIG1hdGNoOiB0aGlzLmNvbXB1dGVNYXRjaChuZXh0UHJvcHMsIG5leHRDb250ZXh0LnJvdXRlcilcbiAgICB9KTtcbiAgfTtcblxuICBSb3V0ZS5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBtYXRjaCA9IHRoaXMuc3RhdGUubWF0Y2g7XG4gICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIGNoaWxkcmVuID0gX3Byb3BzLmNoaWxkcmVuLFxuICAgICAgICBjb21wb25lbnQgPSBfcHJvcHMuY29tcG9uZW50LFxuICAgICAgICByZW5kZXIgPSBfcHJvcHMucmVuZGVyO1xuICAgIHZhciBfY29udGV4dCRyb3V0ZXIgPSB0aGlzLmNvbnRleHQucm91dGVyLFxuICAgICAgICBoaXN0b3J5ID0gX2NvbnRleHQkcm91dGVyLmhpc3RvcnksXG4gICAgICAgIHJvdXRlID0gX2NvbnRleHQkcm91dGVyLnJvdXRlLFxuICAgICAgICBzdGF0aWNDb250ZXh0ID0gX2NvbnRleHQkcm91dGVyLnN0YXRpY0NvbnRleHQ7XG5cbiAgICB2YXIgbG9jYXRpb24gPSB0aGlzLnByb3BzLmxvY2F0aW9uIHx8IHJvdXRlLmxvY2F0aW9uO1xuICAgIHZhciBwcm9wcyA9IHsgbWF0Y2g6IG1hdGNoLCBsb2NhdGlvbjogbG9jYXRpb24sIGhpc3Rvcnk6IGhpc3RvcnksIHN0YXRpY0NvbnRleHQ6IHN0YXRpY0NvbnRleHQgfTtcblxuICAgIGlmIChjb21wb25lbnQpIHJldHVybiBtYXRjaCA/IFJlYWN0LmNyZWF0ZUVsZW1lbnQoY29tcG9uZW50LCBwcm9wcykgOiBudWxsO1xuXG4gICAgaWYgKHJlbmRlcikgcmV0dXJuIG1hdGNoID8gcmVuZGVyKHByb3BzKSA6IG51bGw7XG5cbiAgICBpZiAodHlwZW9mIGNoaWxkcmVuID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiBjaGlsZHJlbihwcm9wcyk7XG5cbiAgICBpZiAoY2hpbGRyZW4gJiYgIWlzRW1wdHlDaGlsZHJlbihjaGlsZHJlbikpIHJldHVybiBSZWFjdC5DaGlsZHJlbi5vbmx5KGNoaWxkcmVuKTtcblxuICAgIHJldHVybiBudWxsO1xuICB9O1xuXG4gIHJldHVybiBSb3V0ZTtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuUm91dGUucHJvcFR5cGVzID0ge1xuICBjb21wdXRlZE1hdGNoOiBQcm9wVHlwZXMub2JqZWN0LCAvLyBwcml2YXRlLCBmcm9tIDxTd2l0Y2g+XG4gIHBhdGg6IFByb3BUeXBlcy5zdHJpbmcsXG4gIGV4YWN0OiBQcm9wVHlwZXMuYm9vbCxcbiAgc3RyaWN0OiBQcm9wVHlwZXMuYm9vbCxcbiAgc2Vuc2l0aXZlOiBQcm9wVHlwZXMuYm9vbCxcbiAgY29tcG9uZW50OiBQcm9wVHlwZXMuZnVuYyxcbiAgcmVuZGVyOiBQcm9wVHlwZXMuZnVuYyxcbiAgY2hpbGRyZW46IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMubm9kZV0pLFxuICBsb2NhdGlvbjogUHJvcFR5cGVzLm9iamVjdFxufTtcblJvdXRlLmNvbnRleHRUeXBlcyA9IHtcbiAgcm91dGVyOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGhpc3Rvcnk6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcbiAgICByb3V0ZTogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuICAgIHN0YXRpY0NvbnRleHQ6IFByb3BUeXBlcy5vYmplY3RcbiAgfSlcbn07XG5Sb3V0ZS5jaGlsZENvbnRleHRUeXBlcyA9IHtcbiAgcm91dGVyOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWRcbn07XG5cblxuZXhwb3J0IGRlZmF1bHQgUm91dGU7IiwiLyogZ2xvYmFsIHdpbmRvdyAqL1xuaW1wb3J0IHBvbnlmaWxsIGZyb20gJy4vcG9ueWZpbGwuanMnO1xuXG52YXIgcm9vdDtcblxuaWYgKHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJykge1xuICByb290ID0gc2VsZjtcbn0gZWxzZSBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgcm9vdCA9IHdpbmRvdztcbn0gZWxzZSBpZiAodHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgcm9vdCA9IGdsb2JhbDtcbn0gZWxzZSBpZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgcm9vdCA9IG1vZHVsZTtcbn0gZWxzZSB7XG4gIHJvb3QgPSBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xufVxuXG52YXIgcmVzdWx0ID0gcG9ueWZpbGwocm9vdCk7XG5leHBvcnQgZGVmYXVsdCByZXN1bHQ7XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQ29weXJpZ2h0IDIwMTUsIFlhaG9vISBJbmMuXG4gKiBDb3B5cmlnaHRzIGxpY2Vuc2VkIHVuZGVyIHRoZSBOZXcgQlNEIExpY2Vuc2UuIFNlZSB0aGUgYWNjb21wYW55aW5nIExJQ0VOU0UgZmlsZSBmb3IgdGVybXMuXG4gKi9cbnZhciBSZWFjdElzID0gcmVxdWlyZSgncmVhY3QtaXMnKTtcbnZhciBSRUFDVF9TVEFUSUNTID0ge1xuICAgIGNoaWxkQ29udGV4dFR5cGVzOiB0cnVlLFxuICAgIGNvbnRleHRUeXBlOiB0cnVlLFxuICAgIGNvbnRleHRUeXBlczogdHJ1ZSxcbiAgICBkZWZhdWx0UHJvcHM6IHRydWUsXG4gICAgZGlzcGxheU5hbWU6IHRydWUsXG4gICAgZ2V0RGVmYXVsdFByb3BzOiB0cnVlLFxuICAgIGdldERlcml2ZWRTdGF0ZUZyb21FcnJvcjogdHJ1ZSxcbiAgICBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM6IHRydWUsXG4gICAgbWl4aW5zOiB0cnVlLFxuICAgIHByb3BUeXBlczogdHJ1ZSxcbiAgICB0eXBlOiB0cnVlXG59O1xuXG52YXIgS05PV05fU1RBVElDUyA9IHtcbiAgICBuYW1lOiB0cnVlLFxuICAgIGxlbmd0aDogdHJ1ZSxcbiAgICBwcm90b3R5cGU6IHRydWUsXG4gICAgY2FsbGVyOiB0cnVlLFxuICAgIGNhbGxlZTogdHJ1ZSxcbiAgICBhcmd1bWVudHM6IHRydWUsXG4gICAgYXJpdHk6IHRydWVcbn07XG5cbnZhciBGT1JXQVJEX1JFRl9TVEFUSUNTID0ge1xuICAgICckJHR5cGVvZic6IHRydWUsXG4gICAgcmVuZGVyOiB0cnVlLFxuICAgIGRlZmF1bHRQcm9wczogdHJ1ZSxcbiAgICBkaXNwbGF5TmFtZTogdHJ1ZSxcbiAgICBwcm9wVHlwZXM6IHRydWVcbn07XG5cbnZhciBNRU1PX1NUQVRJQ1MgPSB7XG4gICAgJyQkdHlwZW9mJzogdHJ1ZSxcbiAgICBjb21wYXJlOiB0cnVlLFxuICAgIGRlZmF1bHRQcm9wczogdHJ1ZSxcbiAgICBkaXNwbGF5TmFtZTogdHJ1ZSxcbiAgICBwcm9wVHlwZXM6IHRydWUsXG4gICAgdHlwZTogdHJ1ZVxufTtcblxudmFyIFRZUEVfU1RBVElDUyA9IHt9O1xuVFlQRV9TVEFUSUNTW1JlYWN0SXMuRm9yd2FyZFJlZl0gPSBGT1JXQVJEX1JFRl9TVEFUSUNTO1xuXG5mdW5jdGlvbiBnZXRTdGF0aWNzKGNvbXBvbmVudCkge1xuICAgIGlmIChSZWFjdElzLmlzTWVtbyhjb21wb25lbnQpKSB7XG4gICAgICAgIHJldHVybiBNRU1PX1NUQVRJQ1M7XG4gICAgfVxuICAgIHJldHVybiBUWVBFX1NUQVRJQ1NbY29tcG9uZW50WyckJHR5cGVvZiddXSB8fCBSRUFDVF9TVEFUSUNTO1xufVxuXG52YXIgZGVmaW5lUHJvcGVydHkgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgZ2V0T3duUHJvcGVydHlOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xudmFyIGdldE93blByb3BlcnR5U3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciBnZXRQcm90b3R5cGVPZiA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcbnZhciBvYmplY3RQcm90b3R5cGUgPSBPYmplY3QucHJvdG90eXBlO1xuXG5mdW5jdGlvbiBob2lzdE5vblJlYWN0U3RhdGljcyh0YXJnZXRDb21wb25lbnQsIHNvdXJjZUNvbXBvbmVudCwgYmxhY2tsaXN0KSB7XG4gICAgaWYgKHR5cGVvZiBzb3VyY2VDb21wb25lbnQgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgIC8vIGRvbid0IGhvaXN0IG92ZXIgc3RyaW5nIChodG1sKSBjb21wb25lbnRzXG5cbiAgICAgICAgaWYgKG9iamVjdFByb3RvdHlwZSkge1xuICAgICAgICAgICAgdmFyIGluaGVyaXRlZENvbXBvbmVudCA9IGdldFByb3RvdHlwZU9mKHNvdXJjZUNvbXBvbmVudCk7XG4gICAgICAgICAgICBpZiAoaW5oZXJpdGVkQ29tcG9uZW50ICYmIGluaGVyaXRlZENvbXBvbmVudCAhPT0gb2JqZWN0UHJvdG90eXBlKSB7XG4gICAgICAgICAgICAgICAgaG9pc3ROb25SZWFjdFN0YXRpY3ModGFyZ2V0Q29tcG9uZW50LCBpbmhlcml0ZWRDb21wb25lbnQsIGJsYWNrbGlzdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB2YXIga2V5cyA9IGdldE93blByb3BlcnR5TmFtZXMoc291cmNlQ29tcG9uZW50KTtcblxuICAgICAgICBpZiAoZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG4gICAgICAgICAgICBrZXlzID0ga2V5cy5jb25jYXQoZ2V0T3duUHJvcGVydHlTeW1ib2xzKHNvdXJjZUNvbXBvbmVudCkpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHRhcmdldFN0YXRpY3MgPSBnZXRTdGF0aWNzKHRhcmdldENvbXBvbmVudCk7XG4gICAgICAgIHZhciBzb3VyY2VTdGF0aWNzID0gZ2V0U3RhdGljcyhzb3VyY2VDb21wb25lbnQpO1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgdmFyIGtleSA9IGtleXNbaV07XG4gICAgICAgICAgICBpZiAoIUtOT1dOX1NUQVRJQ1Nba2V5XSAmJiAhKGJsYWNrbGlzdCAmJiBibGFja2xpc3Rba2V5XSkgJiYgIShzb3VyY2VTdGF0aWNzICYmIHNvdXJjZVN0YXRpY3Nba2V5XSkgJiYgISh0YXJnZXRTdGF0aWNzICYmIHRhcmdldFN0YXRpY3Nba2V5XSkpIHtcbiAgICAgICAgICAgICAgICB2YXIgZGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2VDb21wb25lbnQsIGtleSk7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgLy8gQXZvaWQgZmFpbHVyZXMgZnJvbSByZWFkLW9ubHkgcHJvcGVydGllc1xuICAgICAgICAgICAgICAgICAgICBkZWZpbmVQcm9wZXJ0eSh0YXJnZXRDb21wb25lbnQsIGtleSwgZGVzY3JpcHRvcik7XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge31cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0YXJnZXRDb21wb25lbnQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRhcmdldENvbXBvbmVudDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBob2lzdE5vblJlYWN0U3RhdGljcztcbiIsInZhciBnO1xuXG4vLyBUaGlzIHdvcmtzIGluIG5vbi1zdHJpY3QgbW9kZVxuZyA9IChmdW5jdGlvbigpIHtcblx0cmV0dXJuIHRoaXM7XG59KSgpO1xuXG50cnkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIGV2YWwgaXMgYWxsb3dlZCAoc2VlIENTUClcblx0ZyA9IGcgfHwgbmV3IEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKTtcbn0gY2F0Y2ggKGUpIHtcblx0Ly8gVGhpcyB3b3JrcyBpZiB0aGUgd2luZG93IHJlZmVyZW5jZSBpcyBhdmFpbGFibGVcblx0aWYgKHR5cGVvZiB3aW5kb3cgPT09IFwib2JqZWN0XCIpIGcgPSB3aW5kb3c7XG59XG5cbi8vIGcgY2FuIHN0aWxsIGJlIHVuZGVmaW5lZCwgYnV0IG5vdGhpbmcgdG8gZG8gYWJvdXQgaXQuLi5cbi8vIFdlIHJldHVybiB1bmRlZmluZWQsIGluc3RlYWQgb2Ygbm90aGluZyBoZXJlLCBzbyBpdCdzXG4vLyBlYXNpZXIgdG8gaGFuZGxlIHRoaXMgY2FzZS4gaWYoIWdsb2JhbCkgeyAuLi59XG5cbm1vZHVsZS5leHBvcnRzID0gZztcbiIsIi8qXG5vYmplY3QtYXNzaWduXG4oYykgU2luZHJlIFNvcmh1c1xuQGxpY2Vuc2UgTUlUXG4qL1xuXG4ndXNlIHN0cmljdCc7XG4vKiBlc2xpbnQtZGlzYWJsZSBuby11bnVzZWQtdmFycyAqL1xudmFyIGdldE93blByb3BlcnR5U3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG52YXIgaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIHByb3BJc0VudW1lcmFibGUgPSBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlO1xuXG5mdW5jdGlvbiB0b09iamVjdCh2YWwpIHtcblx0aWYgKHZhbCA9PT0gbnVsbCB8fCB2YWwgPT09IHVuZGVmaW5lZCkge1xuXHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ09iamVjdC5hc3NpZ24gY2Fubm90IGJlIGNhbGxlZCB3aXRoIG51bGwgb3IgdW5kZWZpbmVkJyk7XG5cdH1cblxuXHRyZXR1cm4gT2JqZWN0KHZhbCk7XG59XG5cbmZ1bmN0aW9uIHNob3VsZFVzZU5hdGl2ZSgpIHtcblx0dHJ5IHtcblx0XHRpZiAoIU9iamVjdC5hc3NpZ24pIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBEZXRlY3QgYnVnZ3kgcHJvcGVydHkgZW51bWVyYXRpb24gb3JkZXIgaW4gb2xkZXIgVjggdmVyc2lvbnMuXG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD00MTE4XG5cdFx0dmFyIHRlc3QxID0gbmV3IFN0cmluZygnYWJjJyk7ICAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ldy13cmFwcGVyc1xuXHRcdHRlc3QxWzVdID0gJ2RlJztcblx0XHRpZiAoT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGVzdDEpWzBdID09PSAnNScpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zMDU2XG5cdFx0dmFyIHRlc3QyID0ge307XG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCAxMDsgaSsrKSB7XG5cdFx0XHR0ZXN0MlsnXycgKyBTdHJpbmcuZnJvbUNoYXJDb2RlKGkpXSA9IGk7XG5cdFx0fVxuXHRcdHZhciBvcmRlcjIgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0ZXN0MikubWFwKGZ1bmN0aW9uIChuKSB7XG5cdFx0XHRyZXR1cm4gdGVzdDJbbl07XG5cdFx0fSk7XG5cdFx0aWYgKG9yZGVyMi5qb2luKCcnKSAhPT0gJzAxMjM0NTY3ODknKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MzA1NlxuXHRcdHZhciB0ZXN0MyA9IHt9O1xuXHRcdCdhYmNkZWZnaGlqa2xtbm9wcXJzdCcuc3BsaXQoJycpLmZvckVhY2goZnVuY3Rpb24gKGxldHRlcikge1xuXHRcdFx0dGVzdDNbbGV0dGVyXSA9IGxldHRlcjtcblx0XHR9KTtcblx0XHRpZiAoT2JqZWN0LmtleXMoT2JqZWN0LmFzc2lnbih7fSwgdGVzdDMpKS5qb2luKCcnKSAhPT1cblx0XHRcdFx0J2FiY2RlZmdoaWprbG1ub3BxcnN0Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdHJldHVybiB0cnVlO1xuXHR9IGNhdGNoIChlcnIpIHtcblx0XHQvLyBXZSBkb24ndCBleHBlY3QgYW55IG9mIHRoZSBhYm92ZSB0byB0aHJvdywgYnV0IGJldHRlciB0byBiZSBzYWZlLlxuXHRcdHJldHVybiBmYWxzZTtcblx0fVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNob3VsZFVzZU5hdGl2ZSgpID8gT2JqZWN0LmFzc2lnbiA6IGZ1bmN0aW9uICh0YXJnZXQsIHNvdXJjZSkge1xuXHR2YXIgZnJvbTtcblx0dmFyIHRvID0gdG9PYmplY3QodGFyZ2V0KTtcblx0dmFyIHN5bWJvbHM7XG5cblx0Zm9yICh2YXIgcyA9IDE7IHMgPCBhcmd1bWVudHMubGVuZ3RoOyBzKyspIHtcblx0XHRmcm9tID0gT2JqZWN0KGFyZ3VtZW50c1tzXSk7XG5cblx0XHRmb3IgKHZhciBrZXkgaW4gZnJvbSkge1xuXHRcdFx0aWYgKGhhc093blByb3BlcnR5LmNhbGwoZnJvbSwga2V5KSkge1xuXHRcdFx0XHR0b1trZXldID0gZnJvbVtrZXldO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmIChnZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcblx0XHRcdHN5bWJvbHMgPSBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoZnJvbSk7XG5cdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IHN5bWJvbHMubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0aWYgKHByb3BJc0VudW1lcmFibGUuY2FsbChmcm9tLCBzeW1ib2xzW2ldKSkge1xuXHRcdFx0XHRcdHRvW3N5bWJvbHNbaV1dID0gZnJvbVtzeW1ib2xzW2ldXTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiB0bztcbn07XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzeW1ib2xPYnNlcnZhYmxlUG9ueWZpbGwocm9vdCkge1xuXHR2YXIgcmVzdWx0O1xuXHR2YXIgU3ltYm9sID0gcm9vdC5TeW1ib2w7XG5cblx0aWYgKHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicpIHtcblx0XHRpZiAoU3ltYm9sLm9ic2VydmFibGUpIHtcblx0XHRcdHJlc3VsdCA9IFN5bWJvbC5vYnNlcnZhYmxlO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRyZXN1bHQgPSBTeW1ib2woJ29ic2VydmFibGUnKTtcblx0XHRcdFN5bWJvbC5vYnNlcnZhYmxlID0gcmVzdWx0O1xuXHRcdH1cblx0fSBlbHNlIHtcblx0XHRyZXN1bHQgPSAnQEBvYnNlcnZhYmxlJztcblx0fVxuXG5cdHJldHVybiByZXN1bHQ7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBjaGVja0RDRSgpIHtcbiAgLyogZ2xvYmFsIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyAqL1xuICBpZiAoXG4gICAgdHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyA9PT0gJ3VuZGVmaW5lZCcgfHxcbiAgICB0eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fLmNoZWNrRENFICE9PSAnZnVuY3Rpb24nXG4gICkge1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIC8vIFRoaXMgYnJhbmNoIGlzIHVucmVhY2hhYmxlIGJlY2F1c2UgdGhpcyBmdW5jdGlvbiBpcyBvbmx5IGNhbGxlZFxuICAgIC8vIGluIHByb2R1Y3Rpb24sIGJ1dCB0aGUgY29uZGl0aW9uIGlzIHRydWUgb25seSBpbiBkZXZlbG9wbWVudC5cbiAgICAvLyBUaGVyZWZvcmUgaWYgdGhlIGJyYW5jaCBpcyBzdGlsbCBoZXJlLCBkZWFkIGNvZGUgZWxpbWluYXRpb24gd2Fzbid0XG4gICAgLy8gcHJvcGVybHkgYXBwbGllZC5cbiAgICAvLyBEb24ndCBjaGFuZ2UgdGhlIG1lc3NhZ2UuIFJlYWN0IERldlRvb2xzIHJlbGllcyBvbiBpdC4gQWxzbyBtYWtlIHN1cmVcbiAgICAvLyB0aGlzIG1lc3NhZ2UgZG9lc24ndCBvY2N1ciBlbHNld2hlcmUgaW4gdGhpcyBmdW5jdGlvbiwgb3IgaXQgd2lsbCBjYXVzZVxuICAgIC8vIGEgZmFsc2UgcG9zaXRpdmUuXG4gICAgdGhyb3cgbmV3IEVycm9yKCdeX14nKTtcbiAgfVxuICB0cnkge1xuICAgIC8vIFZlcmlmeSB0aGF0IHRoZSBjb2RlIGFib3ZlIGhhcyBiZWVuIGRlYWQgY29kZSBlbGltaW5hdGVkIChEQ0UnZCkuXG4gICAgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fLmNoZWNrRENFKGNoZWNrRENFKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgLy8gRGV2VG9vbHMgc2hvdWxkbid0IGNyYXNoIFJlYWN0LCBubyBtYXR0ZXIgd2hhdC5cbiAgICAvLyBXZSBzaG91bGQgc3RpbGwgcmVwb3J0IGluIGNhc2Ugd2UgYnJlYWsgdGhpcyBjb2RlLlxuICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgfVxufVxuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICAvLyBEQ0UgY2hlY2sgc2hvdWxkIGhhcHBlbiBiZWZvcmUgUmVhY3RET00gYnVuZGxlIGV4ZWN1dGVzIHNvIHRoYXRcbiAgLy8gRGV2VG9vbHMgY2FuIHJlcG9ydCBiYWQgbWluaWZpY2F0aW9uIGR1cmluZyBpbmplY3Rpb24uXG4gIGNoZWNrRENFKCk7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtZG9tLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWRvbS5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2luaGVyaXRzTG9vc2Uoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHtcbiAgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzLnByb3RvdHlwZSk7XG4gIHN1YkNsYXNzLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IHN1YkNsYXNzO1xuICBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzO1xufSIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5leHBvcnQgdmFyIFJlYWN0UmVkdXhDb250ZXh0ID0gUmVhY3QuY3JlYXRlQ29udGV4dChudWxsKTtcbmV4cG9ydCBkZWZhdWx0IFJlYWN0UmVkdXhDb250ZXh0OyIsImltcG9ydCBfaW5oZXJpdHNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHNMb29zZVwiO1xuaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyBSZWFjdFJlZHV4Q29udGV4dCB9IGZyb20gJy4vQ29udGV4dCc7XG5cbnZhciBQcm92aWRlciA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShQcm92aWRlciwgX0NvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gUHJvdmlkZXIocHJvcHMpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfdGhpcyA9IF9Db21wb25lbnQuY2FsbCh0aGlzLCBwcm9wcykgfHwgdGhpcztcbiAgICB2YXIgc3RvcmUgPSBwcm9wcy5zdG9yZTtcbiAgICBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgIHN0b3JlU3RhdGU6IHN0b3JlLmdldFN0YXRlKCksXG4gICAgICBzdG9yZTogc3RvcmVcbiAgICB9O1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBQcm92aWRlci5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgdGhpcy5faXNNb3VudGVkID0gdHJ1ZTtcbiAgICB0aGlzLnN1YnNjcmliZSgpO1xuICB9O1xuXG4gIF9wcm90by5jb21wb25lbnRXaWxsVW5tb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIGlmICh0aGlzLnVuc3Vic2NyaWJlKSB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgdGhpcy5faXNNb3VudGVkID0gZmFsc2U7XG4gIH07XG5cbiAgX3Byb3RvLmNvbXBvbmVudERpZFVwZGF0ZSA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZShwcmV2UHJvcHMpIHtcbiAgICBpZiAodGhpcy5wcm9wcy5zdG9yZSAhPT0gcHJldlByb3BzLnN0b3JlKSB7XG4gICAgICBpZiAodGhpcy51bnN1YnNjcmliZSkgdGhpcy51bnN1YnNjcmliZSgpO1xuICAgICAgdGhpcy5zdWJzY3JpYmUoKTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLnN1YnNjcmliZSA9IGZ1bmN0aW9uIHN1YnNjcmliZSgpIHtcbiAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgIHZhciBzdG9yZSA9IHRoaXMucHJvcHMuc3RvcmU7XG4gICAgdGhpcy51bnN1YnNjcmliZSA9IHN0b3JlLnN1YnNjcmliZShmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgbmV3U3RvcmVTdGF0ZSA9IHN0b3JlLmdldFN0YXRlKCk7XG5cbiAgICAgIGlmICghX3RoaXMyLl9pc01vdW50ZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBfdGhpczIuc2V0U3RhdGUoZnVuY3Rpb24gKHByb3ZpZGVyU3RhdGUpIHtcbiAgICAgICAgLy8gSWYgdGhlIHZhbHVlIGlzIHRoZSBzYW1lLCBza2lwIHRoZSB1bm5lY2Vzc2FyeSBzdGF0ZSB1cGRhdGUuXG4gICAgICAgIGlmIChwcm92aWRlclN0YXRlLnN0b3JlU3RhdGUgPT09IG5ld1N0b3JlU3RhdGUpIHtcbiAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgc3RvcmVTdGF0ZTogbmV3U3RvcmVTdGF0ZVxuICAgICAgICB9O1xuICAgICAgfSk7XG4gICAgfSk7IC8vIEFjdGlvbnMgbWlnaHQgaGF2ZSBiZWVuIGRpc3BhdGNoZWQgYmV0d2VlbiByZW5kZXIgYW5kIG1vdW50IC0gaGFuZGxlIHRob3NlXG5cbiAgICB2YXIgcG9zdE1vdW50U3RvcmVTdGF0ZSA9IHN0b3JlLmdldFN0YXRlKCk7XG5cbiAgICBpZiAocG9zdE1vdW50U3RvcmVTdGF0ZSAhPT0gdGhpcy5zdGF0ZS5zdG9yZVN0YXRlKSB7XG4gICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgc3RvcmVTdGF0ZTogcG9zdE1vdW50U3RvcmVTdGF0ZVxuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIENvbnRleHQgPSB0aGlzLnByb3BzLmNvbnRleHQgfHwgUmVhY3RSZWR1eENvbnRleHQ7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ29udGV4dC5Qcm92aWRlciwge1xuICAgICAgdmFsdWU6IHRoaXMuc3RhdGVcbiAgICB9LCB0aGlzLnByb3BzLmNoaWxkcmVuKTtcbiAgfTtcblxuICByZXR1cm4gUHJvdmlkZXI7XG59KENvbXBvbmVudCk7XG5cblByb3ZpZGVyLnByb3BUeXBlcyA9IHtcbiAgc3RvcmU6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgc3Vic2NyaWJlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIGRpc3BhdGNoOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIGdldFN0YXRlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkXG4gIH0pLFxuICBjb250ZXh0OiBQcm9wVHlwZXMub2JqZWN0LFxuICBjaGlsZHJlbjogUHJvcFR5cGVzLmFueVxufTtcbmV4cG9ydCBkZWZhdWx0IFByb3ZpZGVyOyIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9leHRlbmRzKCkge1xuICBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkge1xuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldO1xuXG4gICAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XG4gICAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0YXJnZXQ7XG4gIH07XG5cbiAgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCkge1xuICBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTtcbiAgdmFyIHRhcmdldCA9IHt9O1xuICB2YXIgc291cmNlS2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7XG4gIHZhciBrZXksIGk7XG5cbiAgZm9yIChpID0gMDsgaSA8IHNvdXJjZUtleXMubGVuZ3RoOyBpKyspIHtcbiAgICBrZXkgPSBzb3VyY2VLZXlzW2ldO1xuICAgIGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7XG4gICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59IiwiaW1wb3J0IF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2Fzc2VydFRoaXNJbml0aWFsaXplZFwiO1xuaW1wb3J0IF9pbmhlcml0c0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlXCI7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IGhvaXN0U3RhdGljcyBmcm9tICdob2lzdC1ub24tcmVhY3Qtc3RhdGljcyc7XG5pbXBvcnQgaW52YXJpYW50IGZyb20gJ2ludmFyaWFudCc7XG5pbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50LCBQdXJlQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgaXNWYWxpZEVsZW1lbnRUeXBlLCBpc0NvbnRleHRDb25zdW1lciB9IGZyb20gJ3JlYWN0LWlzJztcbmltcG9ydCB7IFJlYWN0UmVkdXhDb250ZXh0IH0gZnJvbSAnLi9Db250ZXh0JztcblxudmFyIHN0cmluZ2lmeUNvbXBvbmVudCA9IGZ1bmN0aW9uIHN0cmluZ2lmeUNvbXBvbmVudChDb21wKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KENvbXApO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICByZXR1cm4gU3RyaW5nKENvbXApO1xuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjb25uZWN0QWR2YW5jZWQoXG4vKlxuICBzZWxlY3RvckZhY3RvcnkgaXMgYSBmdW5jIHRoYXQgaXMgcmVzcG9uc2libGUgZm9yIHJldHVybmluZyB0aGUgc2VsZWN0b3IgZnVuY3Rpb24gdXNlZCB0b1xuICBjb21wdXRlIG5ldyBwcm9wcyBmcm9tIHN0YXRlLCBwcm9wcywgYW5kIGRpc3BhdGNoLiBGb3IgZXhhbXBsZTpcbiAgICAgZXhwb3J0IGRlZmF1bHQgY29ubmVjdEFkdmFuY2VkKChkaXNwYXRjaCwgb3B0aW9ucykgPT4gKHN0YXRlLCBwcm9wcykgPT4gKHtcbiAgICAgIHRoaW5nOiBzdGF0ZS50aGluZ3NbcHJvcHMudGhpbmdJZF0sXG4gICAgICBzYXZlVGhpbmc6IGZpZWxkcyA9PiBkaXNwYXRjaChhY3Rpb25DcmVhdG9ycy5zYXZlVGhpbmcocHJvcHMudGhpbmdJZCwgZmllbGRzKSksXG4gICAgfSkpKFlvdXJDb21wb25lbnQpXG4gICBBY2Nlc3MgdG8gZGlzcGF0Y2ggaXMgcHJvdmlkZWQgdG8gdGhlIGZhY3Rvcnkgc28gc2VsZWN0b3JGYWN0b3JpZXMgY2FuIGJpbmQgYWN0aW9uQ3JlYXRvcnNcbiAgb3V0c2lkZSBvZiB0aGVpciBzZWxlY3RvciBhcyBhbiBvcHRpbWl6YXRpb24uIE9wdGlvbnMgcGFzc2VkIHRvIGNvbm5lY3RBZHZhbmNlZCBhcmUgcGFzc2VkIHRvXG4gIHRoZSBzZWxlY3RvckZhY3RvcnksIGFsb25nIHdpdGggZGlzcGxheU5hbWUgYW5kIFdyYXBwZWRDb21wb25lbnQsIGFzIHRoZSBzZWNvbmQgYXJndW1lbnQuXG4gICBOb3RlIHRoYXQgc2VsZWN0b3JGYWN0b3J5IGlzIHJlc3BvbnNpYmxlIGZvciBhbGwgY2FjaGluZy9tZW1vaXphdGlvbiBvZiBpbmJvdW5kIGFuZCBvdXRib3VuZFxuICBwcm9wcy4gRG8gbm90IHVzZSBjb25uZWN0QWR2YW5jZWQgZGlyZWN0bHkgd2l0aG91dCBtZW1vaXppbmcgcmVzdWx0cyBiZXR3ZWVuIGNhbGxzIHRvIHlvdXJcbiAgc2VsZWN0b3IsIG90aGVyd2lzZSB0aGUgQ29ubmVjdCBjb21wb25lbnQgd2lsbCByZS1yZW5kZXIgb24gZXZlcnkgc3RhdGUgb3IgcHJvcHMgY2hhbmdlLlxuKi9cbnNlbGVjdG9yRmFjdG9yeSwgLy8gb3B0aW9ucyBvYmplY3Q6XG5fcmVmKSB7XG4gIGlmIChfcmVmID09PSB2b2lkIDApIHtcbiAgICBfcmVmID0ge307XG4gIH1cblxuICB2YXIgX3JlZjIgPSBfcmVmLFxuICAgICAgX3JlZjIkZ2V0RGlzcGxheU5hbWUgPSBfcmVmMi5nZXREaXNwbGF5TmFtZSxcbiAgICAgIGdldERpc3BsYXlOYW1lID0gX3JlZjIkZ2V0RGlzcGxheU5hbWUgPT09IHZvaWQgMCA/IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgcmV0dXJuIFwiQ29ubmVjdEFkdmFuY2VkKFwiICsgbmFtZSArIFwiKVwiO1xuICB9IDogX3JlZjIkZ2V0RGlzcGxheU5hbWUsXG4gICAgICBfcmVmMiRtZXRob2ROYW1lID0gX3JlZjIubWV0aG9kTmFtZSxcbiAgICAgIG1ldGhvZE5hbWUgPSBfcmVmMiRtZXRob2ROYW1lID09PSB2b2lkIDAgPyAnY29ubmVjdEFkdmFuY2VkJyA6IF9yZWYyJG1ldGhvZE5hbWUsXG4gICAgICBfcmVmMiRyZW5kZXJDb3VudFByb3AgPSBfcmVmMi5yZW5kZXJDb3VudFByb3AsXG4gICAgICByZW5kZXJDb3VudFByb3AgPSBfcmVmMiRyZW5kZXJDb3VudFByb3AgPT09IHZvaWQgMCA/IHVuZGVmaW5lZCA6IF9yZWYyJHJlbmRlckNvdW50UHJvcCxcbiAgICAgIF9yZWYyJHNob3VsZEhhbmRsZVN0YSA9IF9yZWYyLnNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlcyxcbiAgICAgIHNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlcyA9IF9yZWYyJHNob3VsZEhhbmRsZVN0YSA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9yZWYyJHNob3VsZEhhbmRsZVN0YSxcbiAgICAgIF9yZWYyJHN0b3JlS2V5ID0gX3JlZjIuc3RvcmVLZXksXG4gICAgICBzdG9yZUtleSA9IF9yZWYyJHN0b3JlS2V5ID09PSB2b2lkIDAgPyAnc3RvcmUnIDogX3JlZjIkc3RvcmVLZXksXG4gICAgICBfcmVmMiR3aXRoUmVmID0gX3JlZjIud2l0aFJlZixcbiAgICAgIHdpdGhSZWYgPSBfcmVmMiR3aXRoUmVmID09PSB2b2lkIDAgPyBmYWxzZSA6IF9yZWYyJHdpdGhSZWYsXG4gICAgICBfcmVmMiRmb3J3YXJkUmVmID0gX3JlZjIuZm9yd2FyZFJlZixcbiAgICAgIGZvcndhcmRSZWYgPSBfcmVmMiRmb3J3YXJkUmVmID09PSB2b2lkIDAgPyBmYWxzZSA6IF9yZWYyJGZvcndhcmRSZWYsXG4gICAgICBfcmVmMiRjb250ZXh0ID0gX3JlZjIuY29udGV4dCxcbiAgICAgIGNvbnRleHQgPSBfcmVmMiRjb250ZXh0ID09PSB2b2lkIDAgPyBSZWFjdFJlZHV4Q29udGV4dCA6IF9yZWYyJGNvbnRleHQsXG4gICAgICBjb25uZWN0T3B0aW9ucyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF9yZWYyLCBbXCJnZXREaXNwbGF5TmFtZVwiLCBcIm1ldGhvZE5hbWVcIiwgXCJyZW5kZXJDb3VudFByb3BcIiwgXCJzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXNcIiwgXCJzdG9yZUtleVwiLCBcIndpdGhSZWZcIiwgXCJmb3J3YXJkUmVmXCIsIFwiY29udGV4dFwiXSk7XG5cbiAgaW52YXJpYW50KHJlbmRlckNvdW50UHJvcCA9PT0gdW5kZWZpbmVkLCBcInJlbmRlckNvdW50UHJvcCBpcyByZW1vdmVkLiByZW5kZXIgY291bnRpbmcgaXMgYnVpbHQgaW50byB0aGUgbGF0ZXN0IFJlYWN0IGRldiB0b29scyBwcm9maWxpbmcgZXh0ZW5zaW9uXCIpO1xuICBpbnZhcmlhbnQoIXdpdGhSZWYsICd3aXRoUmVmIGlzIHJlbW92ZWQuIFRvIGFjY2VzcyB0aGUgd3JhcHBlZCBpbnN0YW5jZSwgdXNlIGEgcmVmIG9uIHRoZSBjb25uZWN0ZWQgY29tcG9uZW50Jyk7XG4gIHZhciBjdXN0b21TdG9yZVdhcm5pbmdNZXNzYWdlID0gJ1RvIHVzZSBhIGN1c3RvbSBSZWR1eCBzdG9yZSBmb3Igc3BlY2lmaWMgY29tcG9uZW50cywgIGNyZWF0ZSBhIGN1c3RvbSBSZWFjdCBjb250ZXh0IHdpdGggJyArIFwiUmVhY3QuY3JlYXRlQ29udGV4dCgpLCBhbmQgcGFzcyB0aGUgY29udGV4dCBvYmplY3QgdG8gUmVhY3QgUmVkdXgncyBQcm92aWRlciBhbmQgc3BlY2lmaWMgY29tcG9uZW50c1wiICsgJyBsaWtlOiAgPFByb3ZpZGVyIGNvbnRleHQ9e015Q29udGV4dH0+PENvbm5lY3RlZENvbXBvbmVudCBjb250ZXh0PXtNeUNvbnRleHR9IC8+PC9Qcm92aWRlcj4uICcgKyAnWW91IG1heSBhbHNvIHBhc3MgYSB7Y29udGV4dCA6IE15Q29udGV4dH0gb3B0aW9uIHRvIGNvbm5lY3QnO1xuICBpbnZhcmlhbnQoc3RvcmVLZXkgPT09ICdzdG9yZScsICdzdG9yZUtleSBoYXMgYmVlbiByZW1vdmVkIGFuZCBkb2VzIG5vdCBkbyBhbnl0aGluZy4gJyArIGN1c3RvbVN0b3JlV2FybmluZ01lc3NhZ2UpO1xuICB2YXIgQ29udGV4dCA9IGNvbnRleHQ7XG4gIHJldHVybiBmdW5jdGlvbiB3cmFwV2l0aENvbm5lY3QoV3JhcHBlZENvbXBvbmVudCkge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpbnZhcmlhbnQoaXNWYWxpZEVsZW1lbnRUeXBlKFdyYXBwZWRDb21wb25lbnQpLCBcIllvdSBtdXN0IHBhc3MgYSBjb21wb25lbnQgdG8gdGhlIGZ1bmN0aW9uIHJldHVybmVkIGJ5IFwiICsgKG1ldGhvZE5hbWUgKyBcIi4gSW5zdGVhZCByZWNlaXZlZCBcIiArIHN0cmluZ2lmeUNvbXBvbmVudChXcmFwcGVkQ29tcG9uZW50KSkpO1xuICAgIH1cblxuICAgIHZhciB3cmFwcGVkQ29tcG9uZW50TmFtZSA9IFdyYXBwZWRDb21wb25lbnQuZGlzcGxheU5hbWUgfHwgV3JhcHBlZENvbXBvbmVudC5uYW1lIHx8ICdDb21wb25lbnQnO1xuICAgIHZhciBkaXNwbGF5TmFtZSA9IGdldERpc3BsYXlOYW1lKHdyYXBwZWRDb21wb25lbnROYW1lKTtcblxuICAgIHZhciBzZWxlY3RvckZhY3RvcnlPcHRpb25zID0gX2V4dGVuZHMoe30sIGNvbm5lY3RPcHRpb25zLCB7XG4gICAgICBnZXREaXNwbGF5TmFtZTogZ2V0RGlzcGxheU5hbWUsXG4gICAgICBtZXRob2ROYW1lOiBtZXRob2ROYW1lLFxuICAgICAgcmVuZGVyQ291bnRQcm9wOiByZW5kZXJDb3VudFByb3AsXG4gICAgICBzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXM6IHNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlcyxcbiAgICAgIHN0b3JlS2V5OiBzdG9yZUtleSxcbiAgICAgIGRpc3BsYXlOYW1lOiBkaXNwbGF5TmFtZSxcbiAgICAgIHdyYXBwZWRDb21wb25lbnROYW1lOiB3cmFwcGVkQ29tcG9uZW50TmFtZSxcbiAgICAgIFdyYXBwZWRDb21wb25lbnQ6IFdyYXBwZWRDb21wb25lbnRcbiAgICB9KTtcblxuICAgIHZhciBwdXJlID0gY29ubmVjdE9wdGlvbnMucHVyZTtcbiAgICB2YXIgT3V0ZXJCYXNlQ29tcG9uZW50ID0gQ29tcG9uZW50O1xuXG4gICAgaWYgKHB1cmUpIHtcbiAgICAgIE91dGVyQmFzZUNvbXBvbmVudCA9IFB1cmVDb21wb25lbnQ7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbWFrZURlcml2ZWRQcm9wc1NlbGVjdG9yKCkge1xuICAgICAgdmFyIGxhc3RQcm9wcztcbiAgICAgIHZhciBsYXN0U3RhdGU7XG4gICAgICB2YXIgbGFzdERlcml2ZWRQcm9wcztcbiAgICAgIHZhciBsYXN0U3RvcmU7XG4gICAgICB2YXIgbGFzdFNlbGVjdG9yRmFjdG9yeU9wdGlvbnM7XG4gICAgICB2YXIgc291cmNlU2VsZWN0b3I7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gc2VsZWN0RGVyaXZlZFByb3BzKHN0YXRlLCBwcm9wcywgc3RvcmUsIHNlbGVjdG9yRmFjdG9yeU9wdGlvbnMpIHtcbiAgICAgICAgaWYgKHB1cmUgJiYgbGFzdFByb3BzID09PSBwcm9wcyAmJiBsYXN0U3RhdGUgPT09IHN0YXRlKSB7XG4gICAgICAgICAgcmV0dXJuIGxhc3REZXJpdmVkUHJvcHM7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc3RvcmUgIT09IGxhc3RTdG9yZSB8fCBsYXN0U2VsZWN0b3JGYWN0b3J5T3B0aW9ucyAhPT0gc2VsZWN0b3JGYWN0b3J5T3B0aW9ucykge1xuICAgICAgICAgIGxhc3RTdG9yZSA9IHN0b3JlO1xuICAgICAgICAgIGxhc3RTZWxlY3RvckZhY3RvcnlPcHRpb25zID0gc2VsZWN0b3JGYWN0b3J5T3B0aW9ucztcbiAgICAgICAgICBzb3VyY2VTZWxlY3RvciA9IHNlbGVjdG9yRmFjdG9yeShzdG9yZS5kaXNwYXRjaCwgc2VsZWN0b3JGYWN0b3J5T3B0aW9ucyk7XG4gICAgICAgIH1cblxuICAgICAgICBsYXN0UHJvcHMgPSBwcm9wcztcbiAgICAgICAgbGFzdFN0YXRlID0gc3RhdGU7XG4gICAgICAgIHZhciBuZXh0UHJvcHMgPSBzb3VyY2VTZWxlY3RvcihzdGF0ZSwgcHJvcHMpO1xuICAgICAgICBsYXN0RGVyaXZlZFByb3BzID0gbmV4dFByb3BzO1xuICAgICAgICByZXR1cm4gbGFzdERlcml2ZWRQcm9wcztcbiAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbWFrZUNoaWxkRWxlbWVudFNlbGVjdG9yKCkge1xuICAgICAgdmFyIGxhc3RDaGlsZFByb3BzLCBsYXN0Rm9yd2FyZFJlZiwgbGFzdENoaWxkRWxlbWVudCwgbGFzdENvbXBvbmVudDtcbiAgICAgIHJldHVybiBmdW5jdGlvbiBzZWxlY3RDaGlsZEVsZW1lbnQoV3JhcHBlZENvbXBvbmVudCwgY2hpbGRQcm9wcywgZm9yd2FyZFJlZikge1xuICAgICAgICBpZiAoY2hpbGRQcm9wcyAhPT0gbGFzdENoaWxkUHJvcHMgfHwgZm9yd2FyZFJlZiAhPT0gbGFzdEZvcndhcmRSZWYgfHwgbGFzdENvbXBvbmVudCAhPT0gV3JhcHBlZENvbXBvbmVudCkge1xuICAgICAgICAgIGxhc3RDaGlsZFByb3BzID0gY2hpbGRQcm9wcztcbiAgICAgICAgICBsYXN0Rm9yd2FyZFJlZiA9IGZvcndhcmRSZWY7XG4gICAgICAgICAgbGFzdENvbXBvbmVudCA9IFdyYXBwZWRDb21wb25lbnQ7XG4gICAgICAgICAgbGFzdENoaWxkRWxlbWVudCA9IFJlYWN0LmNyZWF0ZUVsZW1lbnQoV3JhcHBlZENvbXBvbmVudCwgX2V4dGVuZHMoe30sIGNoaWxkUHJvcHMsIHtcbiAgICAgICAgICAgIHJlZjogZm9yd2FyZFJlZlxuICAgICAgICAgIH0pKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBsYXN0Q2hpbGRFbGVtZW50O1xuICAgICAgfTtcbiAgICB9XG5cbiAgICB2YXIgQ29ubmVjdCA9XG4gICAgLyojX19QVVJFX18qL1xuICAgIGZ1bmN0aW9uIChfT3V0ZXJCYXNlQ29tcG9uZW50KSB7XG4gICAgICBfaW5oZXJpdHNMb29zZShDb25uZWN0LCBfT3V0ZXJCYXNlQ29tcG9uZW50KTtcblxuICAgICAgZnVuY3Rpb24gQ29ubmVjdChwcm9wcykge1xuICAgICAgICB2YXIgX3RoaXM7XG5cbiAgICAgICAgX3RoaXMgPSBfT3V0ZXJCYXNlQ29tcG9uZW50LmNhbGwodGhpcywgcHJvcHMpIHx8IHRoaXM7XG4gICAgICAgIGludmFyaWFudChmb3J3YXJkUmVmID8gIXByb3BzLndyYXBwZXJQcm9wc1tzdG9yZUtleV0gOiAhcHJvcHNbc3RvcmVLZXldLCAnUGFzc2luZyByZWR1eCBzdG9yZSBpbiBwcm9wcyBoYXMgYmVlbiByZW1vdmVkIGFuZCBkb2VzIG5vdCBkbyBhbnl0aGluZy4gJyArIGN1c3RvbVN0b3JlV2FybmluZ01lc3NhZ2UpO1xuICAgICAgICBfdGhpcy5zZWxlY3REZXJpdmVkUHJvcHMgPSBtYWtlRGVyaXZlZFByb3BzU2VsZWN0b3IoKTtcbiAgICAgICAgX3RoaXMuc2VsZWN0Q2hpbGRFbGVtZW50ID0gbWFrZUNoaWxkRWxlbWVudFNlbGVjdG9yKCk7XG4gICAgICAgIF90aGlzLmluZGlyZWN0UmVuZGVyV3JhcHBlZENvbXBvbmVudCA9IF90aGlzLmluZGlyZWN0UmVuZGVyV3JhcHBlZENvbXBvbmVudC5iaW5kKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgICAgfVxuXG4gICAgICB2YXIgX3Byb3RvID0gQ29ubmVjdC5wcm90b3R5cGU7XG5cbiAgICAgIF9wcm90by5pbmRpcmVjdFJlbmRlcldyYXBwZWRDb21wb25lbnQgPSBmdW5jdGlvbiBpbmRpcmVjdFJlbmRlcldyYXBwZWRDb21wb25lbnQodmFsdWUpIHtcbiAgICAgICAgLy8gY2FsbGluZyByZW5kZXJXcmFwcGVkQ29tcG9uZW50IG9uIHByb3RvdHlwZSBmcm9tIGluZGlyZWN0UmVuZGVyV3JhcHBlZENvbXBvbmVudCBib3VuZCB0byBgdGhpc2BcbiAgICAgICAgcmV0dXJuIHRoaXMucmVuZGVyV3JhcHBlZENvbXBvbmVudCh2YWx1ZSk7XG4gICAgICB9O1xuXG4gICAgICBfcHJvdG8ucmVuZGVyV3JhcHBlZENvbXBvbmVudCA9IGZ1bmN0aW9uIHJlbmRlcldyYXBwZWRDb21wb25lbnQodmFsdWUpIHtcbiAgICAgICAgaW52YXJpYW50KHZhbHVlLCBcIkNvdWxkIG5vdCBmaW5kIFxcXCJzdG9yZVxcXCIgaW4gdGhlIGNvbnRleHQgb2YgXCIgKyAoXCJcXFwiXCIgKyBkaXNwbGF5TmFtZSArIFwiXFxcIi4gRWl0aGVyIHdyYXAgdGhlIHJvb3QgY29tcG9uZW50IGluIGEgPFByb3ZpZGVyPiwgXCIpICsgXCJvciBwYXNzIGEgY3VzdG9tIFJlYWN0IGNvbnRleHQgcHJvdmlkZXIgdG8gPFByb3ZpZGVyPiBhbmQgdGhlIGNvcnJlc3BvbmRpbmcgXCIgKyAoXCJSZWFjdCBjb250ZXh0IGNvbnN1bWVyIHRvIFwiICsgZGlzcGxheU5hbWUgKyBcIiBpbiBjb25uZWN0IG9wdGlvbnMuXCIpKTtcbiAgICAgICAgdmFyIHN0b3JlU3RhdGUgPSB2YWx1ZS5zdG9yZVN0YXRlLFxuICAgICAgICAgICAgc3RvcmUgPSB2YWx1ZS5zdG9yZTtcbiAgICAgICAgdmFyIHdyYXBwZXJQcm9wcyA9IHRoaXMucHJvcHM7XG4gICAgICAgIHZhciBmb3J3YXJkZWRSZWY7XG5cbiAgICAgICAgaWYgKGZvcndhcmRSZWYpIHtcbiAgICAgICAgICB3cmFwcGVyUHJvcHMgPSB0aGlzLnByb3BzLndyYXBwZXJQcm9wcztcbiAgICAgICAgICBmb3J3YXJkZWRSZWYgPSB0aGlzLnByb3BzLmZvcndhcmRlZFJlZjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBkZXJpdmVkUHJvcHMgPSB0aGlzLnNlbGVjdERlcml2ZWRQcm9wcyhzdG9yZVN0YXRlLCB3cmFwcGVyUHJvcHMsIHN0b3JlLCBzZWxlY3RvckZhY3RvcnlPcHRpb25zKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2VsZWN0Q2hpbGRFbGVtZW50KFdyYXBwZWRDb21wb25lbnQsIGRlcml2ZWRQcm9wcywgZm9yd2FyZGVkUmVmKTtcbiAgICAgIH07XG5cbiAgICAgIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICAgIHZhciBDb250ZXh0VG9Vc2UgPSB0aGlzLnByb3BzLmNvbnRleHQgJiYgdGhpcy5wcm9wcy5jb250ZXh0LkNvbnN1bWVyICYmIGlzQ29udGV4dENvbnN1bWVyKFJlYWN0LmNyZWF0ZUVsZW1lbnQodGhpcy5wcm9wcy5jb250ZXh0LkNvbnN1bWVyLCBudWxsKSkgPyB0aGlzLnByb3BzLmNvbnRleHQgOiBDb250ZXh0O1xuICAgICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChDb250ZXh0VG9Vc2UuQ29uc3VtZXIsIG51bGwsIHRoaXMuaW5kaXJlY3RSZW5kZXJXcmFwcGVkQ29tcG9uZW50KTtcbiAgICAgIH07XG5cbiAgICAgIHJldHVybiBDb25uZWN0O1xuICAgIH0oT3V0ZXJCYXNlQ29tcG9uZW50KTtcblxuICAgIENvbm5lY3QuV3JhcHBlZENvbXBvbmVudCA9IFdyYXBwZWRDb21wb25lbnQ7XG4gICAgQ29ubmVjdC5kaXNwbGF5TmFtZSA9IGRpc3BsYXlOYW1lO1xuXG4gICAgaWYgKGZvcndhcmRSZWYpIHtcbiAgICAgIHZhciBmb3J3YXJkZWQgPSBSZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIGZvcndhcmRDb25uZWN0UmVmKHByb3BzLCByZWYpIHtcbiAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ29ubmVjdCwge1xuICAgICAgICAgIHdyYXBwZXJQcm9wczogcHJvcHMsXG4gICAgICAgICAgZm9yd2FyZGVkUmVmOiByZWZcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICAgIGZvcndhcmRlZC5kaXNwbGF5TmFtZSA9IGRpc3BsYXlOYW1lO1xuICAgICAgZm9yd2FyZGVkLldyYXBwZWRDb21wb25lbnQgPSBXcmFwcGVkQ29tcG9uZW50O1xuICAgICAgcmV0dXJuIGhvaXN0U3RhdGljcyhmb3J3YXJkZWQsIFdyYXBwZWRDb21wb25lbnQpO1xuICAgIH1cblxuICAgIHJldHVybiBob2lzdFN0YXRpY3MoQ29ubmVjdCwgV3JhcHBlZENvbXBvbmVudCk7XG4gIH07XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7XG4gIGlmIChzZWxmID09PSB2b2lkIDApIHtcbiAgICB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7XG4gIH1cblxuICByZXR1cm4gc2VsZjtcbn0iLCJ2YXIgaGFzT3duID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcblxuZnVuY3Rpb24gaXMoeCwgeSkge1xuICBpZiAoeCA9PT0geSkge1xuICAgIHJldHVybiB4ICE9PSAwIHx8IHkgIT09IDAgfHwgMSAvIHggPT09IDEgLyB5O1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB4ICE9PSB4ICYmIHkgIT09IHk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc2hhbGxvd0VxdWFsKG9iakEsIG9iakIpIHtcbiAgaWYgKGlzKG9iakEsIG9iakIpKSByZXR1cm4gdHJ1ZTtcblxuICBpZiAodHlwZW9mIG9iakEgIT09ICdvYmplY3QnIHx8IG9iakEgPT09IG51bGwgfHwgdHlwZW9mIG9iakIgIT09ICdvYmplY3QnIHx8IG9iakIgPT09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB2YXIga2V5c0EgPSBPYmplY3Qua2V5cyhvYmpBKTtcbiAgdmFyIGtleXNCID0gT2JqZWN0LmtleXMob2JqQik7XG4gIGlmIChrZXlzQS5sZW5ndGggIT09IGtleXNCLmxlbmd0aCkgcmV0dXJuIGZhbHNlO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwga2V5c0EubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoIWhhc093bi5jYWxsKG9iakIsIGtleXNBW2ldKSB8fCAhaXMob2JqQVtrZXlzQVtpXV0sIG9iakJba2V5c0FbaV1dKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufSIsImltcG9ydCB2ZXJpZnlQbGFpbk9iamVjdCBmcm9tICcuLi91dGlscy92ZXJpZnlQbGFpbk9iamVjdCc7XG5leHBvcnQgZnVuY3Rpb24gd3JhcE1hcFRvUHJvcHNDb25zdGFudChnZXRDb25zdGFudCkge1xuICByZXR1cm4gZnVuY3Rpb24gaW5pdENvbnN0YW50U2VsZWN0b3IoZGlzcGF0Y2gsIG9wdGlvbnMpIHtcbiAgICB2YXIgY29uc3RhbnQgPSBnZXRDb25zdGFudChkaXNwYXRjaCwgb3B0aW9ucyk7XG5cbiAgICBmdW5jdGlvbiBjb25zdGFudFNlbGVjdG9yKCkge1xuICAgICAgcmV0dXJuIGNvbnN0YW50O1xuICAgIH1cblxuICAgIGNvbnN0YW50U2VsZWN0b3IuZGVwZW5kc09uT3duUHJvcHMgPSBmYWxzZTtcbiAgICByZXR1cm4gY29uc3RhbnRTZWxlY3RvcjtcbiAgfTtcbn0gLy8gZGVwZW5kc09uT3duUHJvcHMgaXMgdXNlZCBieSBjcmVhdGVNYXBUb1Byb3BzUHJveHkgdG8gZGV0ZXJtaW5lIHdoZXRoZXIgdG8gcGFzcyBwcm9wcyBhcyBhcmdzXG4vLyB0byB0aGUgbWFwVG9Qcm9wcyBmdW5jdGlvbiBiZWluZyB3cmFwcGVkLiBJdCBpcyBhbHNvIHVzZWQgYnkgbWFrZVB1cmVQcm9wc1NlbGVjdG9yIHRvIGRldGVybWluZVxuLy8gd2hldGhlciBtYXBUb1Byb3BzIG5lZWRzIHRvIGJlIGludm9rZWQgd2hlbiBwcm9wcyBoYXZlIGNoYW5nZWQuXG4vL1xuLy8gQSBsZW5ndGggb2Ygb25lIHNpZ25hbHMgdGhhdCBtYXBUb1Byb3BzIGRvZXMgbm90IGRlcGVuZCBvbiBwcm9wcyBmcm9tIHRoZSBwYXJlbnQgY29tcG9uZW50LlxuLy8gQSBsZW5ndGggb2YgemVybyBpcyBhc3N1bWVkIHRvIG1lYW4gbWFwVG9Qcm9wcyBpcyBnZXR0aW5nIGFyZ3MgdmlhIGFyZ3VtZW50cyBvciAuLi5hcmdzIGFuZFxuLy8gdGhlcmVmb3JlIG5vdCByZXBvcnRpbmcgaXRzIGxlbmd0aCBhY2N1cmF0ZWx5Li5cblxuZXhwb3J0IGZ1bmN0aW9uIGdldERlcGVuZHNPbk93blByb3BzKG1hcFRvUHJvcHMpIHtcbiAgcmV0dXJuIG1hcFRvUHJvcHMuZGVwZW5kc09uT3duUHJvcHMgIT09IG51bGwgJiYgbWFwVG9Qcm9wcy5kZXBlbmRzT25Pd25Qcm9wcyAhPT0gdW5kZWZpbmVkID8gQm9vbGVhbihtYXBUb1Byb3BzLmRlcGVuZHNPbk93blByb3BzKSA6IG1hcFRvUHJvcHMubGVuZ3RoICE9PSAxO1xufSAvLyBVc2VkIGJ5IHdoZW5NYXBTdGF0ZVRvUHJvcHNJc0Z1bmN0aW9uIGFuZCB3aGVuTWFwRGlzcGF0Y2hUb1Byb3BzSXNGdW5jdGlvbixcbi8vIHRoaXMgZnVuY3Rpb24gd3JhcHMgbWFwVG9Qcm9wcyBpbiBhIHByb3h5IGZ1bmN0aW9uIHdoaWNoIGRvZXMgc2V2ZXJhbCB0aGluZ3M6XG4vL1xuLy8gICogRGV0ZWN0cyB3aGV0aGVyIHRoZSBtYXBUb1Byb3BzIGZ1bmN0aW9uIGJlaW5nIGNhbGxlZCBkZXBlbmRzIG9uIHByb3BzLCB3aGljaFxuLy8gICAgaXMgdXNlZCBieSBzZWxlY3RvckZhY3RvcnkgdG8gZGVjaWRlIGlmIGl0IHNob3VsZCByZWludm9rZSBvbiBwcm9wcyBjaGFuZ2VzLlxuLy9cbi8vICAqIE9uIGZpcnN0IGNhbGwsIGhhbmRsZXMgbWFwVG9Qcm9wcyBpZiByZXR1cm5zIGFub3RoZXIgZnVuY3Rpb24sIGFuZCB0cmVhdHMgdGhhdFxuLy8gICAgbmV3IGZ1bmN0aW9uIGFzIHRoZSB0cnVlIG1hcFRvUHJvcHMgZm9yIHN1YnNlcXVlbnQgY2FsbHMuXG4vL1xuLy8gICogT24gZmlyc3QgY2FsbCwgdmVyaWZpZXMgdGhlIGZpcnN0IHJlc3VsdCBpcyBhIHBsYWluIG9iamVjdCwgaW4gb3JkZXIgdG8gd2FyblxuLy8gICAgdGhlIGRldmVsb3BlciB0aGF0IHRoZWlyIG1hcFRvUHJvcHMgZnVuY3Rpb24gaXMgbm90IHJldHVybmluZyBhIHZhbGlkIHJlc3VsdC5cbi8vXG5cbmV4cG9ydCBmdW5jdGlvbiB3cmFwTWFwVG9Qcm9wc0Z1bmMobWFwVG9Qcm9wcywgbWV0aG9kTmFtZSkge1xuICByZXR1cm4gZnVuY3Rpb24gaW5pdFByb3h5U2VsZWN0b3IoZGlzcGF0Y2gsIF9yZWYpIHtcbiAgICB2YXIgZGlzcGxheU5hbWUgPSBfcmVmLmRpc3BsYXlOYW1lO1xuXG4gICAgdmFyIHByb3h5ID0gZnVuY3Rpb24gbWFwVG9Qcm9wc1Byb3h5KHN0YXRlT3JEaXNwYXRjaCwgb3duUHJvcHMpIHtcbiAgICAgIHJldHVybiBwcm94eS5kZXBlbmRzT25Pd25Qcm9wcyA/IHByb3h5Lm1hcFRvUHJvcHMoc3RhdGVPckRpc3BhdGNoLCBvd25Qcm9wcykgOiBwcm94eS5tYXBUb1Byb3BzKHN0YXRlT3JEaXNwYXRjaCk7XG4gICAgfTsgLy8gYWxsb3cgZGV0ZWN0RmFjdG9yeUFuZFZlcmlmeSB0byBnZXQgb3duUHJvcHNcblxuXG4gICAgcHJveHkuZGVwZW5kc09uT3duUHJvcHMgPSB0cnVlO1xuXG4gICAgcHJveHkubWFwVG9Qcm9wcyA9IGZ1bmN0aW9uIGRldGVjdEZhY3RvcnlBbmRWZXJpZnkoc3RhdGVPckRpc3BhdGNoLCBvd25Qcm9wcykge1xuICAgICAgcHJveHkubWFwVG9Qcm9wcyA9IG1hcFRvUHJvcHM7XG4gICAgICBwcm94eS5kZXBlbmRzT25Pd25Qcm9wcyA9IGdldERlcGVuZHNPbk93blByb3BzKG1hcFRvUHJvcHMpO1xuICAgICAgdmFyIHByb3BzID0gcHJveHkoc3RhdGVPckRpc3BhdGNoLCBvd25Qcm9wcyk7XG5cbiAgICAgIGlmICh0eXBlb2YgcHJvcHMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcHJveHkubWFwVG9Qcm9wcyA9IHByb3BzO1xuICAgICAgICBwcm94eS5kZXBlbmRzT25Pd25Qcm9wcyA9IGdldERlcGVuZHNPbk93blByb3BzKHByb3BzKTtcbiAgICAgICAgcHJvcHMgPSBwcm94eShzdGF0ZU9yRGlzcGF0Y2gsIG93blByb3BzKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHZlcmlmeVBsYWluT2JqZWN0KHByb3BzLCBkaXNwbGF5TmFtZSwgbWV0aG9kTmFtZSk7XG4gICAgICByZXR1cm4gcHJvcHM7XG4gICAgfTtcblxuICAgIHJldHVybiBwcm94eTtcbiAgfTtcbn0iLCJpbXBvcnQgeyBiaW5kQWN0aW9uQ3JlYXRvcnMgfSBmcm9tICdyZWR1eCc7XG5pbXBvcnQgeyB3cmFwTWFwVG9Qcm9wc0NvbnN0YW50LCB3cmFwTWFwVG9Qcm9wc0Z1bmMgfSBmcm9tICcuL3dyYXBNYXBUb1Byb3BzJztcbmV4cG9ydCBmdW5jdGlvbiB3aGVuTWFwRGlzcGF0Y2hUb1Byb3BzSXNGdW5jdGlvbihtYXBEaXNwYXRjaFRvUHJvcHMpIHtcbiAgcmV0dXJuIHR5cGVvZiBtYXBEaXNwYXRjaFRvUHJvcHMgPT09ICdmdW5jdGlvbicgPyB3cmFwTWFwVG9Qcm9wc0Z1bmMobWFwRGlzcGF0Y2hUb1Byb3BzLCAnbWFwRGlzcGF0Y2hUb1Byb3BzJykgOiB1bmRlZmluZWQ7XG59XG5leHBvcnQgZnVuY3Rpb24gd2hlbk1hcERpc3BhdGNoVG9Qcm9wc0lzTWlzc2luZyhtYXBEaXNwYXRjaFRvUHJvcHMpIHtcbiAgcmV0dXJuICFtYXBEaXNwYXRjaFRvUHJvcHMgPyB3cmFwTWFwVG9Qcm9wc0NvbnN0YW50KGZ1bmN0aW9uIChkaXNwYXRjaCkge1xuICAgIHJldHVybiB7XG4gICAgICBkaXNwYXRjaDogZGlzcGF0Y2hcbiAgICB9O1xuICB9KSA6IHVuZGVmaW5lZDtcbn1cbmV4cG9ydCBmdW5jdGlvbiB3aGVuTWFwRGlzcGF0Y2hUb1Byb3BzSXNPYmplY3QobWFwRGlzcGF0Y2hUb1Byb3BzKSB7XG4gIHJldHVybiBtYXBEaXNwYXRjaFRvUHJvcHMgJiYgdHlwZW9mIG1hcERpc3BhdGNoVG9Qcm9wcyA9PT0gJ29iamVjdCcgPyB3cmFwTWFwVG9Qcm9wc0NvbnN0YW50KGZ1bmN0aW9uIChkaXNwYXRjaCkge1xuICAgIHJldHVybiBiaW5kQWN0aW9uQ3JlYXRvcnMobWFwRGlzcGF0Y2hUb1Byb3BzLCBkaXNwYXRjaCk7XG4gIH0pIDogdW5kZWZpbmVkO1xufVxuZXhwb3J0IGRlZmF1bHQgW3doZW5NYXBEaXNwYXRjaFRvUHJvcHNJc0Z1bmN0aW9uLCB3aGVuTWFwRGlzcGF0Y2hUb1Byb3BzSXNNaXNzaW5nLCB3aGVuTWFwRGlzcGF0Y2hUb1Byb3BzSXNPYmplY3RdOyIsImltcG9ydCB7IHdyYXBNYXBUb1Byb3BzQ29uc3RhbnQsIHdyYXBNYXBUb1Byb3BzRnVuYyB9IGZyb20gJy4vd3JhcE1hcFRvUHJvcHMnO1xuZXhwb3J0IGZ1bmN0aW9uIHdoZW5NYXBTdGF0ZVRvUHJvcHNJc0Z1bmN0aW9uKG1hcFN0YXRlVG9Qcm9wcykge1xuICByZXR1cm4gdHlwZW9mIG1hcFN0YXRlVG9Qcm9wcyA9PT0gJ2Z1bmN0aW9uJyA/IHdyYXBNYXBUb1Byb3BzRnVuYyhtYXBTdGF0ZVRvUHJvcHMsICdtYXBTdGF0ZVRvUHJvcHMnKSA6IHVuZGVmaW5lZDtcbn1cbmV4cG9ydCBmdW5jdGlvbiB3aGVuTWFwU3RhdGVUb1Byb3BzSXNNaXNzaW5nKG1hcFN0YXRlVG9Qcm9wcykge1xuICByZXR1cm4gIW1hcFN0YXRlVG9Qcm9wcyA/IHdyYXBNYXBUb1Byb3BzQ29uc3RhbnQoZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB7fTtcbiAgfSkgOiB1bmRlZmluZWQ7XG59XG5leHBvcnQgZGVmYXVsdCBbd2hlbk1hcFN0YXRlVG9Qcm9wc0lzRnVuY3Rpb24sIHdoZW5NYXBTdGF0ZVRvUHJvcHNJc01pc3NpbmddOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IHZlcmlmeVBsYWluT2JqZWN0IGZyb20gJy4uL3V0aWxzL3ZlcmlmeVBsYWluT2JqZWN0JztcbmV4cG9ydCBmdW5jdGlvbiBkZWZhdWx0TWVyZ2VQcm9wcyhzdGF0ZVByb3BzLCBkaXNwYXRjaFByb3BzLCBvd25Qcm9wcykge1xuICByZXR1cm4gX2V4dGVuZHMoe30sIG93blByb3BzLCBzdGF0ZVByb3BzLCBkaXNwYXRjaFByb3BzKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiB3cmFwTWVyZ2VQcm9wc0Z1bmMobWVyZ2VQcm9wcykge1xuICByZXR1cm4gZnVuY3Rpb24gaW5pdE1lcmdlUHJvcHNQcm94eShkaXNwYXRjaCwgX3JlZikge1xuICAgIHZhciBkaXNwbGF5TmFtZSA9IF9yZWYuZGlzcGxheU5hbWUsXG4gICAgICAgIHB1cmUgPSBfcmVmLnB1cmUsXG4gICAgICAgIGFyZU1lcmdlZFByb3BzRXF1YWwgPSBfcmVmLmFyZU1lcmdlZFByb3BzRXF1YWw7XG4gICAgdmFyIGhhc1J1bk9uY2UgPSBmYWxzZTtcbiAgICB2YXIgbWVyZ2VkUHJvcHM7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIG1lcmdlUHJvcHNQcm94eShzdGF0ZVByb3BzLCBkaXNwYXRjaFByb3BzLCBvd25Qcm9wcykge1xuICAgICAgdmFyIG5leHRNZXJnZWRQcm9wcyA9IG1lcmdlUHJvcHMoc3RhdGVQcm9wcywgZGlzcGF0Y2hQcm9wcywgb3duUHJvcHMpO1xuXG4gICAgICBpZiAoaGFzUnVuT25jZSkge1xuICAgICAgICBpZiAoIXB1cmUgfHwgIWFyZU1lcmdlZFByb3BzRXF1YWwobmV4dE1lcmdlZFByb3BzLCBtZXJnZWRQcm9wcykpIG1lcmdlZFByb3BzID0gbmV4dE1lcmdlZFByb3BzO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaGFzUnVuT25jZSA9IHRydWU7XG4gICAgICAgIG1lcmdlZFByb3BzID0gbmV4dE1lcmdlZFByb3BzO1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgdmVyaWZ5UGxhaW5PYmplY3QobWVyZ2VkUHJvcHMsIGRpc3BsYXlOYW1lLCAnbWVyZ2VQcm9wcycpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbWVyZ2VkUHJvcHM7XG4gICAgfTtcbiAgfTtcbn1cbmV4cG9ydCBmdW5jdGlvbiB3aGVuTWVyZ2VQcm9wc0lzRnVuY3Rpb24obWVyZ2VQcm9wcykge1xuICByZXR1cm4gdHlwZW9mIG1lcmdlUHJvcHMgPT09ICdmdW5jdGlvbicgPyB3cmFwTWVyZ2VQcm9wc0Z1bmMobWVyZ2VQcm9wcykgOiB1bmRlZmluZWQ7XG59XG5leHBvcnQgZnVuY3Rpb24gd2hlbk1lcmdlUHJvcHNJc09taXR0ZWQobWVyZ2VQcm9wcykge1xuICByZXR1cm4gIW1lcmdlUHJvcHMgPyBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGRlZmF1bHRNZXJnZVByb3BzO1xuICB9IDogdW5kZWZpbmVkO1xufVxuZXhwb3J0IGRlZmF1bHQgW3doZW5NZXJnZVByb3BzSXNGdW5jdGlvbiwgd2hlbk1lcmdlUHJvcHNJc09taXR0ZWRdOyIsImltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IHZlcmlmeVN1YnNlbGVjdG9ycyBmcm9tICcuL3ZlcmlmeVN1YnNlbGVjdG9ycyc7XG5leHBvcnQgZnVuY3Rpb24gaW1wdXJlRmluYWxQcm9wc1NlbGVjdG9yRmFjdG9yeShtYXBTdGF0ZVRvUHJvcHMsIG1hcERpc3BhdGNoVG9Qcm9wcywgbWVyZ2VQcm9wcywgZGlzcGF0Y2gpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGltcHVyZUZpbmFsUHJvcHNTZWxlY3RvcihzdGF0ZSwgb3duUHJvcHMpIHtcbiAgICByZXR1cm4gbWVyZ2VQcm9wcyhtYXBTdGF0ZVRvUHJvcHMoc3RhdGUsIG93blByb3BzKSwgbWFwRGlzcGF0Y2hUb1Byb3BzKGRpc3BhdGNoLCBvd25Qcm9wcyksIG93blByb3BzKTtcbiAgfTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBwdXJlRmluYWxQcm9wc1NlbGVjdG9yRmFjdG9yeShtYXBTdGF0ZVRvUHJvcHMsIG1hcERpc3BhdGNoVG9Qcm9wcywgbWVyZ2VQcm9wcywgZGlzcGF0Y2gsIF9yZWYpIHtcbiAgdmFyIGFyZVN0YXRlc0VxdWFsID0gX3JlZi5hcmVTdGF0ZXNFcXVhbCxcbiAgICAgIGFyZU93blByb3BzRXF1YWwgPSBfcmVmLmFyZU93blByb3BzRXF1YWwsXG4gICAgICBhcmVTdGF0ZVByb3BzRXF1YWwgPSBfcmVmLmFyZVN0YXRlUHJvcHNFcXVhbDtcbiAgdmFyIGhhc1J1bkF0TGVhc3RPbmNlID0gZmFsc2U7XG4gIHZhciBzdGF0ZTtcbiAgdmFyIG93blByb3BzO1xuICB2YXIgc3RhdGVQcm9wcztcbiAgdmFyIGRpc3BhdGNoUHJvcHM7XG4gIHZhciBtZXJnZWRQcm9wcztcblxuICBmdW5jdGlvbiBoYW5kbGVGaXJzdENhbGwoZmlyc3RTdGF0ZSwgZmlyc3RPd25Qcm9wcykge1xuICAgIHN0YXRlID0gZmlyc3RTdGF0ZTtcbiAgICBvd25Qcm9wcyA9IGZpcnN0T3duUHJvcHM7XG4gICAgc3RhdGVQcm9wcyA9IG1hcFN0YXRlVG9Qcm9wcyhzdGF0ZSwgb3duUHJvcHMpO1xuICAgIGRpc3BhdGNoUHJvcHMgPSBtYXBEaXNwYXRjaFRvUHJvcHMoZGlzcGF0Y2gsIG93blByb3BzKTtcbiAgICBtZXJnZWRQcm9wcyA9IG1lcmdlUHJvcHMoc3RhdGVQcm9wcywgZGlzcGF0Y2hQcm9wcywgb3duUHJvcHMpO1xuICAgIGhhc1J1bkF0TGVhc3RPbmNlID0gdHJ1ZTtcbiAgICByZXR1cm4gbWVyZ2VkUHJvcHM7XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVOZXdQcm9wc0FuZE5ld1N0YXRlKCkge1xuICAgIHN0YXRlUHJvcHMgPSBtYXBTdGF0ZVRvUHJvcHMoc3RhdGUsIG93blByb3BzKTtcbiAgICBpZiAobWFwRGlzcGF0Y2hUb1Byb3BzLmRlcGVuZHNPbk93blByb3BzKSBkaXNwYXRjaFByb3BzID0gbWFwRGlzcGF0Y2hUb1Byb3BzKGRpc3BhdGNoLCBvd25Qcm9wcyk7XG4gICAgbWVyZ2VkUHJvcHMgPSBtZXJnZVByb3BzKHN0YXRlUHJvcHMsIGRpc3BhdGNoUHJvcHMsIG93blByb3BzKTtcbiAgICByZXR1cm4gbWVyZ2VkUHJvcHM7XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVOZXdQcm9wcygpIHtcbiAgICBpZiAobWFwU3RhdGVUb1Byb3BzLmRlcGVuZHNPbk93blByb3BzKSBzdGF0ZVByb3BzID0gbWFwU3RhdGVUb1Byb3BzKHN0YXRlLCBvd25Qcm9wcyk7XG4gICAgaWYgKG1hcERpc3BhdGNoVG9Qcm9wcy5kZXBlbmRzT25Pd25Qcm9wcykgZGlzcGF0Y2hQcm9wcyA9IG1hcERpc3BhdGNoVG9Qcm9wcyhkaXNwYXRjaCwgb3duUHJvcHMpO1xuICAgIG1lcmdlZFByb3BzID0gbWVyZ2VQcm9wcyhzdGF0ZVByb3BzLCBkaXNwYXRjaFByb3BzLCBvd25Qcm9wcyk7XG4gICAgcmV0dXJuIG1lcmdlZFByb3BzO1xuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlTmV3U3RhdGUoKSB7XG4gICAgdmFyIG5leHRTdGF0ZVByb3BzID0gbWFwU3RhdGVUb1Byb3BzKHN0YXRlLCBvd25Qcm9wcyk7XG4gICAgdmFyIHN0YXRlUHJvcHNDaGFuZ2VkID0gIWFyZVN0YXRlUHJvcHNFcXVhbChuZXh0U3RhdGVQcm9wcywgc3RhdGVQcm9wcyk7XG4gICAgc3RhdGVQcm9wcyA9IG5leHRTdGF0ZVByb3BzO1xuICAgIGlmIChzdGF0ZVByb3BzQ2hhbmdlZCkgbWVyZ2VkUHJvcHMgPSBtZXJnZVByb3BzKHN0YXRlUHJvcHMsIGRpc3BhdGNoUHJvcHMsIG93blByb3BzKTtcbiAgICByZXR1cm4gbWVyZ2VkUHJvcHM7XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVTdWJzZXF1ZW50Q2FsbHMobmV4dFN0YXRlLCBuZXh0T3duUHJvcHMpIHtcbiAgICB2YXIgcHJvcHNDaGFuZ2VkID0gIWFyZU93blByb3BzRXF1YWwobmV4dE93blByb3BzLCBvd25Qcm9wcyk7XG4gICAgdmFyIHN0YXRlQ2hhbmdlZCA9ICFhcmVTdGF0ZXNFcXVhbChuZXh0U3RhdGUsIHN0YXRlKTtcbiAgICBzdGF0ZSA9IG5leHRTdGF0ZTtcbiAgICBvd25Qcm9wcyA9IG5leHRPd25Qcm9wcztcbiAgICBpZiAocHJvcHNDaGFuZ2VkICYmIHN0YXRlQ2hhbmdlZCkgcmV0dXJuIGhhbmRsZU5ld1Byb3BzQW5kTmV3U3RhdGUoKTtcbiAgICBpZiAocHJvcHNDaGFuZ2VkKSByZXR1cm4gaGFuZGxlTmV3UHJvcHMoKTtcbiAgICBpZiAoc3RhdGVDaGFuZ2VkKSByZXR1cm4gaGFuZGxlTmV3U3RhdGUoKTtcbiAgICByZXR1cm4gbWVyZ2VkUHJvcHM7XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gcHVyZUZpbmFsUHJvcHNTZWxlY3RvcihuZXh0U3RhdGUsIG5leHRPd25Qcm9wcykge1xuICAgIHJldHVybiBoYXNSdW5BdExlYXN0T25jZSA/IGhhbmRsZVN1YnNlcXVlbnRDYWxscyhuZXh0U3RhdGUsIG5leHRPd25Qcm9wcykgOiBoYW5kbGVGaXJzdENhbGwobmV4dFN0YXRlLCBuZXh0T3duUHJvcHMpO1xuICB9O1xufSAvLyBUT0RPOiBBZGQgbW9yZSBjb21tZW50c1xuLy8gSWYgcHVyZSBpcyB0cnVlLCB0aGUgc2VsZWN0b3IgcmV0dXJuZWQgYnkgc2VsZWN0b3JGYWN0b3J5IHdpbGwgbWVtb2l6ZSBpdHMgcmVzdWx0cyxcbi8vIGFsbG93aW5nIGNvbm5lY3RBZHZhbmNlZCdzIHNob3VsZENvbXBvbmVudFVwZGF0ZSB0byByZXR1cm4gZmFsc2UgaWYgZmluYWxcbi8vIHByb3BzIGhhdmUgbm90IGNoYW5nZWQuIElmIGZhbHNlLCB0aGUgc2VsZWN0b3Igd2lsbCBhbHdheXMgcmV0dXJuIGEgbmV3XG4vLyBvYmplY3QgYW5kIHNob3VsZENvbXBvbmVudFVwZGF0ZSB3aWxsIGFsd2F5cyByZXR1cm4gdHJ1ZS5cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZmluYWxQcm9wc1NlbGVjdG9yRmFjdG9yeShkaXNwYXRjaCwgX3JlZjIpIHtcbiAgdmFyIGluaXRNYXBTdGF0ZVRvUHJvcHMgPSBfcmVmMi5pbml0TWFwU3RhdGVUb1Byb3BzLFxuICAgICAgaW5pdE1hcERpc3BhdGNoVG9Qcm9wcyA9IF9yZWYyLmluaXRNYXBEaXNwYXRjaFRvUHJvcHMsXG4gICAgICBpbml0TWVyZ2VQcm9wcyA9IF9yZWYyLmluaXRNZXJnZVByb3BzLFxuICAgICAgb3B0aW9ucyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF9yZWYyLCBbXCJpbml0TWFwU3RhdGVUb1Byb3BzXCIsIFwiaW5pdE1hcERpc3BhdGNoVG9Qcm9wc1wiLCBcImluaXRNZXJnZVByb3BzXCJdKTtcblxuICB2YXIgbWFwU3RhdGVUb1Byb3BzID0gaW5pdE1hcFN0YXRlVG9Qcm9wcyhkaXNwYXRjaCwgb3B0aW9ucyk7XG4gIHZhciBtYXBEaXNwYXRjaFRvUHJvcHMgPSBpbml0TWFwRGlzcGF0Y2hUb1Byb3BzKGRpc3BhdGNoLCBvcHRpb25zKTtcbiAgdmFyIG1lcmdlUHJvcHMgPSBpbml0TWVyZ2VQcm9wcyhkaXNwYXRjaCwgb3B0aW9ucyk7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICB2ZXJpZnlTdWJzZWxlY3RvcnMobWFwU3RhdGVUb1Byb3BzLCBtYXBEaXNwYXRjaFRvUHJvcHMsIG1lcmdlUHJvcHMsIG9wdGlvbnMuZGlzcGxheU5hbWUpO1xuICB9XG5cbiAgdmFyIHNlbGVjdG9yRmFjdG9yeSA9IG9wdGlvbnMucHVyZSA/IHB1cmVGaW5hbFByb3BzU2VsZWN0b3JGYWN0b3J5IDogaW1wdXJlRmluYWxQcm9wc1NlbGVjdG9yRmFjdG9yeTtcbiAgcmV0dXJuIHNlbGVjdG9yRmFjdG9yeShtYXBTdGF0ZVRvUHJvcHMsIG1hcERpc3BhdGNoVG9Qcm9wcywgbWVyZ2VQcm9wcywgZGlzcGF0Y2gsIG9wdGlvbnMpO1xufSIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgY29ubmVjdEFkdmFuY2VkIGZyb20gJy4uL2NvbXBvbmVudHMvY29ubmVjdEFkdmFuY2VkJztcbmltcG9ydCBzaGFsbG93RXF1YWwgZnJvbSAnLi4vdXRpbHMvc2hhbGxvd0VxdWFsJztcbmltcG9ydCBkZWZhdWx0TWFwRGlzcGF0Y2hUb1Byb3BzRmFjdG9yaWVzIGZyb20gJy4vbWFwRGlzcGF0Y2hUb1Byb3BzJztcbmltcG9ydCBkZWZhdWx0TWFwU3RhdGVUb1Byb3BzRmFjdG9yaWVzIGZyb20gJy4vbWFwU3RhdGVUb1Byb3BzJztcbmltcG9ydCBkZWZhdWx0TWVyZ2VQcm9wc0ZhY3RvcmllcyBmcm9tICcuL21lcmdlUHJvcHMnO1xuaW1wb3J0IGRlZmF1bHRTZWxlY3RvckZhY3RvcnkgZnJvbSAnLi9zZWxlY3RvckZhY3RvcnknO1xuLypcbiAgY29ubmVjdCBpcyBhIGZhY2FkZSBvdmVyIGNvbm5lY3RBZHZhbmNlZC4gSXQgdHVybnMgaXRzIGFyZ3MgaW50byBhIGNvbXBhdGlibGVcbiAgc2VsZWN0b3JGYWN0b3J5LCB3aGljaCBoYXMgdGhlIHNpZ25hdHVyZTpcblxuICAgIChkaXNwYXRjaCwgb3B0aW9ucykgPT4gKG5leHRTdGF0ZSwgbmV4dE93blByb3BzKSA9PiBuZXh0RmluYWxQcm9wc1xuICBcbiAgY29ubmVjdCBwYXNzZXMgaXRzIGFyZ3MgdG8gY29ubmVjdEFkdmFuY2VkIGFzIG9wdGlvbnMsIHdoaWNoIHdpbGwgaW4gdHVybiBwYXNzIHRoZW0gdG9cbiAgc2VsZWN0b3JGYWN0b3J5IGVhY2ggdGltZSBhIENvbm5lY3QgY29tcG9uZW50IGluc3RhbmNlIGlzIGluc3RhbnRpYXRlZCBvciBob3QgcmVsb2FkZWQuXG5cbiAgc2VsZWN0b3JGYWN0b3J5IHJldHVybnMgYSBmaW5hbCBwcm9wcyBzZWxlY3RvciBmcm9tIGl0cyBtYXBTdGF0ZVRvUHJvcHMsXG4gIG1hcFN0YXRlVG9Qcm9wc0ZhY3RvcmllcywgbWFwRGlzcGF0Y2hUb1Byb3BzLCBtYXBEaXNwYXRjaFRvUHJvcHNGYWN0b3JpZXMsIG1lcmdlUHJvcHMsXG4gIG1lcmdlUHJvcHNGYWN0b3JpZXMsIGFuZCBwdXJlIGFyZ3MuXG5cbiAgVGhlIHJlc3VsdGluZyBmaW5hbCBwcm9wcyBzZWxlY3RvciBpcyBjYWxsZWQgYnkgdGhlIENvbm5lY3QgY29tcG9uZW50IGluc3RhbmNlIHdoZW5ldmVyXG4gIGl0IHJlY2VpdmVzIG5ldyBwcm9wcyBvciBzdG9yZSBzdGF0ZS5cbiAqL1xuXG5mdW5jdGlvbiBtYXRjaChhcmcsIGZhY3RvcmllcywgbmFtZSkge1xuICBmb3IgKHZhciBpID0gZmFjdG9yaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgdmFyIHJlc3VsdCA9IGZhY3Rvcmllc1tpXShhcmcpO1xuICAgIGlmIChyZXN1bHQpIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKGRpc3BhdGNoLCBvcHRpb25zKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCB2YWx1ZSBvZiB0eXBlIFwiICsgdHlwZW9mIGFyZyArIFwiIGZvciBcIiArIG5hbWUgKyBcIiBhcmd1bWVudCB3aGVuIGNvbm5lY3RpbmcgY29tcG9uZW50IFwiICsgb3B0aW9ucy53cmFwcGVkQ29tcG9uZW50TmFtZSArIFwiLlwiKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gc3RyaWN0RXF1YWwoYSwgYikge1xuICByZXR1cm4gYSA9PT0gYjtcbn0gLy8gY3JlYXRlQ29ubmVjdCB3aXRoIGRlZmF1bHQgYXJncyBidWlsZHMgdGhlICdvZmZpY2lhbCcgY29ubmVjdCBiZWhhdmlvci4gQ2FsbGluZyBpdCB3aXRoXG4vLyBkaWZmZXJlbnQgb3B0aW9ucyBvcGVucyB1cCBzb21lIHRlc3RpbmcgYW5kIGV4dGVuc2liaWxpdHkgc2NlbmFyaW9zXG5cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUNvbm5lY3QoX3RlbXApIHtcbiAgdmFyIF9yZWYgPSBfdGVtcCA9PT0gdm9pZCAwID8ge30gOiBfdGVtcCxcbiAgICAgIF9yZWYkY29ubmVjdEhPQyA9IF9yZWYuY29ubmVjdEhPQyxcbiAgICAgIGNvbm5lY3RIT0MgPSBfcmVmJGNvbm5lY3RIT0MgPT09IHZvaWQgMCA/IGNvbm5lY3RBZHZhbmNlZCA6IF9yZWYkY29ubmVjdEhPQyxcbiAgICAgIF9yZWYkbWFwU3RhdGVUb1Byb3BzRiA9IF9yZWYubWFwU3RhdGVUb1Byb3BzRmFjdG9yaWVzLFxuICAgICAgbWFwU3RhdGVUb1Byb3BzRmFjdG9yaWVzID0gX3JlZiRtYXBTdGF0ZVRvUHJvcHNGID09PSB2b2lkIDAgPyBkZWZhdWx0TWFwU3RhdGVUb1Byb3BzRmFjdG9yaWVzIDogX3JlZiRtYXBTdGF0ZVRvUHJvcHNGLFxuICAgICAgX3JlZiRtYXBEaXNwYXRjaFRvUHJvID0gX3JlZi5tYXBEaXNwYXRjaFRvUHJvcHNGYWN0b3JpZXMsXG4gICAgICBtYXBEaXNwYXRjaFRvUHJvcHNGYWN0b3JpZXMgPSBfcmVmJG1hcERpc3BhdGNoVG9Qcm8gPT09IHZvaWQgMCA/IGRlZmF1bHRNYXBEaXNwYXRjaFRvUHJvcHNGYWN0b3JpZXMgOiBfcmVmJG1hcERpc3BhdGNoVG9Qcm8sXG4gICAgICBfcmVmJG1lcmdlUHJvcHNGYWN0b3IgPSBfcmVmLm1lcmdlUHJvcHNGYWN0b3JpZXMsXG4gICAgICBtZXJnZVByb3BzRmFjdG9yaWVzID0gX3JlZiRtZXJnZVByb3BzRmFjdG9yID09PSB2b2lkIDAgPyBkZWZhdWx0TWVyZ2VQcm9wc0ZhY3RvcmllcyA6IF9yZWYkbWVyZ2VQcm9wc0ZhY3RvcixcbiAgICAgIF9yZWYkc2VsZWN0b3JGYWN0b3J5ID0gX3JlZi5zZWxlY3RvckZhY3RvcnksXG4gICAgICBzZWxlY3RvckZhY3RvcnkgPSBfcmVmJHNlbGVjdG9yRmFjdG9yeSA9PT0gdm9pZCAwID8gZGVmYXVsdFNlbGVjdG9yRmFjdG9yeSA6IF9yZWYkc2VsZWN0b3JGYWN0b3J5O1xuXG4gIHJldHVybiBmdW5jdGlvbiBjb25uZWN0KG1hcFN0YXRlVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzLCBtZXJnZVByb3BzLCBfcmVmMikge1xuICAgIGlmIChfcmVmMiA9PT0gdm9pZCAwKSB7XG4gICAgICBfcmVmMiA9IHt9O1xuICAgIH1cblxuICAgIHZhciBfcmVmMyA9IF9yZWYyLFxuICAgICAgICBfcmVmMyRwdXJlID0gX3JlZjMucHVyZSxcbiAgICAgICAgcHVyZSA9IF9yZWYzJHB1cmUgPT09IHZvaWQgMCA/IHRydWUgOiBfcmVmMyRwdXJlLFxuICAgICAgICBfcmVmMyRhcmVTdGF0ZXNFcXVhbCA9IF9yZWYzLmFyZVN0YXRlc0VxdWFsLFxuICAgICAgICBhcmVTdGF0ZXNFcXVhbCA9IF9yZWYzJGFyZVN0YXRlc0VxdWFsID09PSB2b2lkIDAgPyBzdHJpY3RFcXVhbCA6IF9yZWYzJGFyZVN0YXRlc0VxdWFsLFxuICAgICAgICBfcmVmMyRhcmVPd25Qcm9wc0VxdWEgPSBfcmVmMy5hcmVPd25Qcm9wc0VxdWFsLFxuICAgICAgICBhcmVPd25Qcm9wc0VxdWFsID0gX3JlZjMkYXJlT3duUHJvcHNFcXVhID09PSB2b2lkIDAgPyBzaGFsbG93RXF1YWwgOiBfcmVmMyRhcmVPd25Qcm9wc0VxdWEsXG4gICAgICAgIF9yZWYzJGFyZVN0YXRlUHJvcHNFcSA9IF9yZWYzLmFyZVN0YXRlUHJvcHNFcXVhbCxcbiAgICAgICAgYXJlU3RhdGVQcm9wc0VxdWFsID0gX3JlZjMkYXJlU3RhdGVQcm9wc0VxID09PSB2b2lkIDAgPyBzaGFsbG93RXF1YWwgOiBfcmVmMyRhcmVTdGF0ZVByb3BzRXEsXG4gICAgICAgIF9yZWYzJGFyZU1lcmdlZFByb3BzRSA9IF9yZWYzLmFyZU1lcmdlZFByb3BzRXF1YWwsXG4gICAgICAgIGFyZU1lcmdlZFByb3BzRXF1YWwgPSBfcmVmMyRhcmVNZXJnZWRQcm9wc0UgPT09IHZvaWQgMCA/IHNoYWxsb3dFcXVhbCA6IF9yZWYzJGFyZU1lcmdlZFByb3BzRSxcbiAgICAgICAgZXh0cmFPcHRpb25zID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3JlZjMsIFtcInB1cmVcIiwgXCJhcmVTdGF0ZXNFcXVhbFwiLCBcImFyZU93blByb3BzRXF1YWxcIiwgXCJhcmVTdGF0ZVByb3BzRXF1YWxcIiwgXCJhcmVNZXJnZWRQcm9wc0VxdWFsXCJdKTtcblxuICAgIHZhciBpbml0TWFwU3RhdGVUb1Byb3BzID0gbWF0Y2gobWFwU3RhdGVUb1Byb3BzLCBtYXBTdGF0ZVRvUHJvcHNGYWN0b3JpZXMsICdtYXBTdGF0ZVRvUHJvcHMnKTtcbiAgICB2YXIgaW5pdE1hcERpc3BhdGNoVG9Qcm9wcyA9IG1hdGNoKG1hcERpc3BhdGNoVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzRmFjdG9yaWVzLCAnbWFwRGlzcGF0Y2hUb1Byb3BzJyk7XG4gICAgdmFyIGluaXRNZXJnZVByb3BzID0gbWF0Y2gobWVyZ2VQcm9wcywgbWVyZ2VQcm9wc0ZhY3RvcmllcywgJ21lcmdlUHJvcHMnKTtcbiAgICByZXR1cm4gY29ubmVjdEhPQyhzZWxlY3RvckZhY3RvcnksIF9leHRlbmRzKHtcbiAgICAgIC8vIHVzZWQgaW4gZXJyb3IgbWVzc2FnZXNcbiAgICAgIG1ldGhvZE5hbWU6ICdjb25uZWN0JyxcbiAgICAgIC8vIHVzZWQgdG8gY29tcHV0ZSBDb25uZWN0J3MgZGlzcGxheU5hbWUgZnJvbSB0aGUgd3JhcHBlZCBjb21wb25lbnQncyBkaXNwbGF5TmFtZS5cbiAgICAgIGdldERpc3BsYXlOYW1lOiBmdW5jdGlvbiBnZXREaXNwbGF5TmFtZShuYW1lKSB7XG4gICAgICAgIHJldHVybiBcIkNvbm5lY3QoXCIgKyBuYW1lICsgXCIpXCI7XG4gICAgICB9LFxuICAgICAgLy8gaWYgbWFwU3RhdGVUb1Byb3BzIGlzIGZhbHN5LCB0aGUgQ29ubmVjdCBjb21wb25lbnQgZG9lc24ndCBzdWJzY3JpYmUgdG8gc3RvcmUgc3RhdGUgY2hhbmdlc1xuICAgICAgc2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzOiBCb29sZWFuKG1hcFN0YXRlVG9Qcm9wcyksXG4gICAgICAvLyBwYXNzZWQgdGhyb3VnaCB0byBzZWxlY3RvckZhY3RvcnlcbiAgICAgIGluaXRNYXBTdGF0ZVRvUHJvcHM6IGluaXRNYXBTdGF0ZVRvUHJvcHMsXG4gICAgICBpbml0TWFwRGlzcGF0Y2hUb1Byb3BzOiBpbml0TWFwRGlzcGF0Y2hUb1Byb3BzLFxuICAgICAgaW5pdE1lcmdlUHJvcHM6IGluaXRNZXJnZVByb3BzLFxuICAgICAgcHVyZTogcHVyZSxcbiAgICAgIGFyZVN0YXRlc0VxdWFsOiBhcmVTdGF0ZXNFcXVhbCxcbiAgICAgIGFyZU93blByb3BzRXF1YWw6IGFyZU93blByb3BzRXF1YWwsXG4gICAgICBhcmVTdGF0ZVByb3BzRXF1YWw6IGFyZVN0YXRlUHJvcHNFcXVhbCxcbiAgICAgIGFyZU1lcmdlZFByb3BzRXF1YWw6IGFyZU1lcmdlZFByb3BzRXF1YWxcbiAgICB9LCBleHRyYU9wdGlvbnMpKTtcbiAgfTtcbn1cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZUNvbm5lY3QoKTsiLCJpbXBvcnQgUHJvdmlkZXIgZnJvbSAnLi9jb21wb25lbnRzL1Byb3ZpZGVyJztcbmltcG9ydCBjb25uZWN0QWR2YW5jZWQgZnJvbSAnLi9jb21wb25lbnRzL2Nvbm5lY3RBZHZhbmNlZCc7XG5pbXBvcnQgeyBSZWFjdFJlZHV4Q29udGV4dCB9IGZyb20gJy4vY29tcG9uZW50cy9Db250ZXh0JztcbmltcG9ydCBjb25uZWN0IGZyb20gJy4vY29ubmVjdC9jb25uZWN0JztcbmV4cG9ydCB7IFByb3ZpZGVyLCBjb25uZWN0QWR2YW5jZWQsIFJlYWN0UmVkdXhDb250ZXh0LCBjb25uZWN0IH07IiwiZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG5pbXBvcnQgd2FybmluZyBmcm9tIFwid2FybmluZ1wiO1xuaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tIFwicHJvcC10eXBlc1wiO1xuaW1wb3J0IHsgY3JlYXRlQnJvd3Nlckhpc3RvcnkgYXMgY3JlYXRlSGlzdG9yeSB9IGZyb20gXCJoaXN0b3J5XCI7XG5pbXBvcnQgUm91dGVyIGZyb20gXCIuL1JvdXRlclwiO1xuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciBhIDxSb3V0ZXI+IHRoYXQgdXNlcyBIVE1MNSBoaXN0b3J5LlxuICovXG5cbnZhciBCcm93c2VyUm91dGVyID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKEJyb3dzZXJSb3V0ZXIsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIEJyb3dzZXJSb3V0ZXIoKSB7XG4gICAgdmFyIF90ZW1wLCBfdGhpcywgX3JldDtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBCcm93c2VyUm91dGVyKTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHJldHVybiBfcmV0ID0gKF90ZW1wID0gKF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX1JlYWN0JENvbXBvbmVudC5jYWxsLmFwcGx5KF9SZWFjdCRDb21wb25lbnQsIFt0aGlzXS5jb25jYXQoYXJncykpKSwgX3RoaXMpLCBfdGhpcy5oaXN0b3J5ID0gY3JlYXRlSGlzdG9yeShfdGhpcy5wcm9wcyksIF90ZW1wKSwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oX3RoaXMsIF9yZXQpO1xuICB9XG5cbiAgQnJvd3NlclJvdXRlci5wcm90b3R5cGUuY29tcG9uZW50V2lsbE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbE1vdW50KCkge1xuICAgIHdhcm5pbmcoIXRoaXMucHJvcHMuaGlzdG9yeSwgXCI8QnJvd3NlclJvdXRlcj4gaWdub3JlcyB0aGUgaGlzdG9yeSBwcm9wLiBUbyB1c2UgYSBjdXN0b20gaGlzdG9yeSwgXCIgKyBcInVzZSBgaW1wb3J0IHsgUm91dGVyIH1gIGluc3RlYWQgb2YgYGltcG9ydCB7IEJyb3dzZXJSb3V0ZXIgYXMgUm91dGVyIH1gLlwiKTtcbiAgfTtcblxuICBCcm93c2VyUm91dGVyLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoUm91dGVyLCB7IGhpc3Rvcnk6IHRoaXMuaGlzdG9yeSwgY2hpbGRyZW46IHRoaXMucHJvcHMuY2hpbGRyZW4gfSk7XG4gIH07XG5cbiAgcmV0dXJuIEJyb3dzZXJSb3V0ZXI7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbkJyb3dzZXJSb3V0ZXIucHJvcFR5cGVzID0ge1xuICBiYXNlbmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgZm9yY2VSZWZyZXNoOiBQcm9wVHlwZXMuYm9vbCxcbiAgZ2V0VXNlckNvbmZpcm1hdGlvbjogUHJvcFR5cGVzLmZ1bmMsXG4gIGtleUxlbmd0aDogUHJvcFR5cGVzLm51bWJlcixcbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlXG59O1xuXG5cbmV4cG9ydCBkZWZhdWx0IEJyb3dzZXJSb3V0ZXI7IiwiZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG5pbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gXCJwcm9wLXR5cGVzXCI7XG5pbXBvcnQgd2FybmluZyBmcm9tIFwid2FybmluZ1wiO1xuaW1wb3J0IGludmFyaWFudCBmcm9tIFwiaW52YXJpYW50XCI7XG5pbXBvcnQgbWF0Y2hQYXRoIGZyb20gXCIuL21hdGNoUGF0aFwiO1xuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciByZW5kZXJpbmcgdGhlIGZpcnN0IDxSb3V0ZT4gdGhhdCBtYXRjaGVzLlxuICovXG5cbnZhciBTd2l0Y2ggPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoU3dpdGNoLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBTd2l0Y2goKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFN3aXRjaCk7XG5cbiAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gIFN3aXRjaC5wcm90b3R5cGUuY29tcG9uZW50V2lsbE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbE1vdW50KCkge1xuICAgIGludmFyaWFudCh0aGlzLmNvbnRleHQucm91dGVyLCBcIllvdSBzaG91bGQgbm90IHVzZSA8U3dpdGNoPiBvdXRzaWRlIGEgPFJvdXRlcj5cIik7XG4gIH07XG5cbiAgU3dpdGNoLnByb3RvdHlwZS5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcbiAgICB3YXJuaW5nKCEobmV4dFByb3BzLmxvY2F0aW9uICYmICF0aGlzLnByb3BzLmxvY2F0aW9uKSwgJzxTd2l0Y2g+IGVsZW1lbnRzIHNob3VsZCBub3QgY2hhbmdlIGZyb20gdW5jb250cm9sbGVkIHRvIGNvbnRyb2xsZWQgKG9yIHZpY2UgdmVyc2EpLiBZb3UgaW5pdGlhbGx5IHVzZWQgbm8gXCJsb2NhdGlvblwiIHByb3AgYW5kIHRoZW4gcHJvdmlkZWQgb25lIG9uIGEgc3Vic2VxdWVudCByZW5kZXIuJyk7XG5cbiAgICB3YXJuaW5nKCEoIW5leHRQcm9wcy5sb2NhdGlvbiAmJiB0aGlzLnByb3BzLmxvY2F0aW9uKSwgJzxTd2l0Y2g+IGVsZW1lbnRzIHNob3VsZCBub3QgY2hhbmdlIGZyb20gY29udHJvbGxlZCB0byB1bmNvbnRyb2xsZWQgKG9yIHZpY2UgdmVyc2EpLiBZb3UgcHJvdmlkZWQgYSBcImxvY2F0aW9uXCIgcHJvcCBpbml0aWFsbHkgYnV0IG9taXR0ZWQgaXQgb24gYSBzdWJzZXF1ZW50IHJlbmRlci4nKTtcbiAgfTtcblxuICBTd2l0Y2gucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgcm91dGUgPSB0aGlzLmNvbnRleHQucm91dGVyLnJvdXRlO1xuICAgIHZhciBjaGlsZHJlbiA9IHRoaXMucHJvcHMuY2hpbGRyZW47XG5cbiAgICB2YXIgbG9jYXRpb24gPSB0aGlzLnByb3BzLmxvY2F0aW9uIHx8IHJvdXRlLmxvY2F0aW9uO1xuXG4gICAgdmFyIG1hdGNoID0gdm9pZCAwLFxuICAgICAgICBjaGlsZCA9IHZvaWQgMDtcbiAgICBSZWFjdC5DaGlsZHJlbi5mb3JFYWNoKGNoaWxkcmVuLCBmdW5jdGlvbiAoZWxlbWVudCkge1xuICAgICAgaWYgKG1hdGNoID09IG51bGwgJiYgUmVhY3QuaXNWYWxpZEVsZW1lbnQoZWxlbWVudCkpIHtcbiAgICAgICAgdmFyIF9lbGVtZW50JHByb3BzID0gZWxlbWVudC5wcm9wcyxcbiAgICAgICAgICAgIHBhdGhQcm9wID0gX2VsZW1lbnQkcHJvcHMucGF0aCxcbiAgICAgICAgICAgIGV4YWN0ID0gX2VsZW1lbnQkcHJvcHMuZXhhY3QsXG4gICAgICAgICAgICBzdHJpY3QgPSBfZWxlbWVudCRwcm9wcy5zdHJpY3QsXG4gICAgICAgICAgICBzZW5zaXRpdmUgPSBfZWxlbWVudCRwcm9wcy5zZW5zaXRpdmUsXG4gICAgICAgICAgICBmcm9tID0gX2VsZW1lbnQkcHJvcHMuZnJvbTtcblxuICAgICAgICB2YXIgcGF0aCA9IHBhdGhQcm9wIHx8IGZyb207XG5cbiAgICAgICAgY2hpbGQgPSBlbGVtZW50O1xuICAgICAgICBtYXRjaCA9IG1hdGNoUGF0aChsb2NhdGlvbi5wYXRobmFtZSwgeyBwYXRoOiBwYXRoLCBleGFjdDogZXhhY3QsIHN0cmljdDogc3RyaWN0LCBzZW5zaXRpdmU6IHNlbnNpdGl2ZSB9LCByb3V0ZS5tYXRjaCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gbWF0Y2ggPyBSZWFjdC5jbG9uZUVsZW1lbnQoY2hpbGQsIHsgbG9jYXRpb246IGxvY2F0aW9uLCBjb21wdXRlZE1hdGNoOiBtYXRjaCB9KSA6IG51bGw7XG4gIH07XG5cbiAgcmV0dXJuIFN3aXRjaDtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuU3dpdGNoLmNvbnRleHRUeXBlcyA9IHtcbiAgcm91dGVyOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIHJvdXRlOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWRcbiAgfSkuaXNSZXF1aXJlZFxufTtcblN3aXRjaC5wcm9wVHlwZXMgPSB7XG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgbG9jYXRpb246IFByb3BUeXBlcy5vYmplY3Rcbn07XG5cblxuZXhwb3J0IGRlZmF1bHQgU3dpdGNoOyIsIi8vIFdyaXR0ZW4gaW4gdGhpcyByb3VuZCBhYm91dCB3YXkgZm9yIGJhYmVsLXRyYW5zZm9ybS1pbXBvcnRzXG5pbXBvcnQgU3dpdGNoIGZyb20gXCJyZWFjdC1yb3V0ZXIvZXMvU3dpdGNoXCI7XG5cbmV4cG9ydCBkZWZhdWx0IFN3aXRjaDsiLCIvKiogQGxpY2Vuc2UgUmVhY3QgdjE2LjguNFxuICogcmVhY3QucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7dmFyIGs9cmVxdWlyZShcIm9iamVjdC1hc3NpZ25cIiksbj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuZm9yLHA9bj9TeW1ib2wuZm9yKFwicmVhY3QuZWxlbWVudFwiKTo2MDEwMyxxPW4/U3ltYm9sLmZvcihcInJlYWN0LnBvcnRhbFwiKTo2MDEwNixyPW4/U3ltYm9sLmZvcihcInJlYWN0LmZyYWdtZW50XCIpOjYwMTA3LHQ9bj9TeW1ib2wuZm9yKFwicmVhY3Quc3RyaWN0X21vZGVcIik6NjAxMDgsdT1uP1N5bWJvbC5mb3IoXCJyZWFjdC5wcm9maWxlclwiKTo2MDExNCx2PW4/U3ltYm9sLmZvcihcInJlYWN0LnByb3ZpZGVyXCIpOjYwMTA5LHc9bj9TeW1ib2wuZm9yKFwicmVhY3QuY29udGV4dFwiKTo2MDExMCx4PW4/U3ltYm9sLmZvcihcInJlYWN0LmNvbmN1cnJlbnRfbW9kZVwiKTo2MDExMSx5PW4/U3ltYm9sLmZvcihcInJlYWN0LmZvcndhcmRfcmVmXCIpOjYwMTEyLHo9bj9TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VcIik6NjAxMTMsYWE9bj9TeW1ib2wuZm9yKFwicmVhY3QubWVtb1wiKTpcbjYwMTE1LGJhPW4/U3ltYm9sLmZvcihcInJlYWN0LmxhenlcIik6NjAxMTYsQT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuaXRlcmF0b3I7ZnVuY3Rpb24gY2EoYSxiLGQsYyxlLGcsaCxmKXtpZighYSl7YT12b2lkIDA7aWYodm9pZCAwPT09YilhPUVycm9yKFwiTWluaWZpZWQgZXhjZXB0aW9uIG9jY3VycmVkOyB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgZm9yIHRoZSBmdWxsIGVycm9yIG1lc3NhZ2UgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy5cIik7ZWxzZXt2YXIgbD1bZCxjLGUsZyxoLGZdLG09MDthPUVycm9yKGIucmVwbGFjZSgvJXMvZyxmdW5jdGlvbigpe3JldHVybiBsW20rK119KSk7YS5uYW1lPVwiSW52YXJpYW50IFZpb2xhdGlvblwifWEuZnJhbWVzVG9Qb3A9MTt0aHJvdyBhO319XG5mdW5jdGlvbiBCKGEpe2Zvcih2YXIgYj1hcmd1bWVudHMubGVuZ3RoLTEsZD1cImh0dHBzOi8vcmVhY3Rqcy5vcmcvZG9jcy9lcnJvci1kZWNvZGVyLmh0bWw/aW52YXJpYW50PVwiK2EsYz0wO2M8YjtjKyspZCs9XCImYXJnc1tdPVwiK2VuY29kZVVSSUNvbXBvbmVudChhcmd1bWVudHNbYysxXSk7Y2EoITEsXCJNaW5pZmllZCBSZWFjdCBlcnJvciAjXCIrYStcIjsgdmlzaXQgJXMgZm9yIHRoZSBmdWxsIG1lc3NhZ2Ugb3IgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50IGZvciBmdWxsIGVycm9ycyBhbmQgYWRkaXRpb25hbCBoZWxwZnVsIHdhcm5pbmdzLiBcIixkKX12YXIgQz17aXNNb3VudGVkOmZ1bmN0aW9uKCl7cmV0dXJuITF9LGVucXVldWVGb3JjZVVwZGF0ZTpmdW5jdGlvbigpe30sZW5xdWV1ZVJlcGxhY2VTdGF0ZTpmdW5jdGlvbigpe30sZW5xdWV1ZVNldFN0YXRlOmZ1bmN0aW9uKCl7fX0sRD17fTtcbmZ1bmN0aW9uIEUoYSxiLGQpe3RoaXMucHJvcHM9YTt0aGlzLmNvbnRleHQ9Yjt0aGlzLnJlZnM9RDt0aGlzLnVwZGF0ZXI9ZHx8Q31FLnByb3RvdHlwZS5pc1JlYWN0Q29tcG9uZW50PXt9O0UucHJvdG90eXBlLnNldFN0YXRlPWZ1bmN0aW9uKGEsYil7XCJvYmplY3RcIiE9PXR5cGVvZiBhJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYSYmbnVsbCE9YT9CKFwiODVcIik6dm9pZCAwO3RoaXMudXBkYXRlci5lbnF1ZXVlU2V0U3RhdGUodGhpcyxhLGIsXCJzZXRTdGF0ZVwiKX07RS5wcm90b3R5cGUuZm9yY2VVcGRhdGU9ZnVuY3Rpb24oYSl7dGhpcy51cGRhdGVyLmVucXVldWVGb3JjZVVwZGF0ZSh0aGlzLGEsXCJmb3JjZVVwZGF0ZVwiKX07ZnVuY3Rpb24gRigpe31GLnByb3RvdHlwZT1FLnByb3RvdHlwZTtmdW5jdGlvbiBHKGEsYixkKXt0aGlzLnByb3BzPWE7dGhpcy5jb250ZXh0PWI7dGhpcy5yZWZzPUQ7dGhpcy51cGRhdGVyPWR8fEN9dmFyIEg9Ry5wcm90b3R5cGU9bmV3IEY7XG5ILmNvbnN0cnVjdG9yPUc7ayhILEUucHJvdG90eXBlKTtILmlzUHVyZVJlYWN0Q29tcG9uZW50PSEwO3ZhciBJPXtjdXJyZW50Om51bGx9LEo9e2N1cnJlbnQ6bnVsbH0sSz1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LEw9e2tleTohMCxyZWY6ITAsX19zZWxmOiEwLF9fc291cmNlOiEwfTtcbmZ1bmN0aW9uIE0oYSxiLGQpe3ZhciBjPXZvaWQgMCxlPXt9LGc9bnVsbCxoPW51bGw7aWYobnVsbCE9Yilmb3IoYyBpbiB2b2lkIDAhPT1iLnJlZiYmKGg9Yi5yZWYpLHZvaWQgMCE9PWIua2V5JiYoZz1cIlwiK2Iua2V5KSxiKUsuY2FsbChiLGMpJiYhTC5oYXNPd25Qcm9wZXJ0eShjKSYmKGVbY109YltjXSk7dmFyIGY9YXJndW1lbnRzLmxlbmd0aC0yO2lmKDE9PT1mKWUuY2hpbGRyZW49ZDtlbHNlIGlmKDE8Zil7Zm9yKHZhciBsPUFycmF5KGYpLG09MDttPGY7bSsrKWxbbV09YXJndW1lbnRzW20rMl07ZS5jaGlsZHJlbj1sfWlmKGEmJmEuZGVmYXVsdFByb3BzKWZvcihjIGluIGY9YS5kZWZhdWx0UHJvcHMsZil2b2lkIDA9PT1lW2NdJiYoZVtjXT1mW2NdKTtyZXR1cm57JCR0eXBlb2Y6cCx0eXBlOmEsa2V5OmcscmVmOmgscHJvcHM6ZSxfb3duZXI6Si5jdXJyZW50fX1cbmZ1bmN0aW9uIGRhKGEsYil7cmV0dXJueyQkdHlwZW9mOnAsdHlwZTphLnR5cGUsa2V5OmIscmVmOmEucmVmLHByb3BzOmEucHJvcHMsX293bmVyOmEuX293bmVyfX1mdW5jdGlvbiBOKGEpe3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJmEuJCR0eXBlb2Y9PT1wfWZ1bmN0aW9uIGVzY2FwZShhKXt2YXIgYj17XCI9XCI6XCI9MFwiLFwiOlwiOlwiPTJcIn07cmV0dXJuXCIkXCIrKFwiXCIrYSkucmVwbGFjZSgvWz06XS9nLGZ1bmN0aW9uKGEpe3JldHVybiBiW2FdfSl9dmFyIE89L1xcLysvZyxQPVtdO2Z1bmN0aW9uIFEoYSxiLGQsYyl7aWYoUC5sZW5ndGgpe3ZhciBlPVAucG9wKCk7ZS5yZXN1bHQ9YTtlLmtleVByZWZpeD1iO2UuZnVuYz1kO2UuY29udGV4dD1jO2UuY291bnQ9MDtyZXR1cm4gZX1yZXR1cm57cmVzdWx0OmEsa2V5UHJlZml4OmIsZnVuYzpkLGNvbnRleHQ6Yyxjb3VudDowfX1cbmZ1bmN0aW9uIFIoYSl7YS5yZXN1bHQ9bnVsbDthLmtleVByZWZpeD1udWxsO2EuZnVuYz1udWxsO2EuY29udGV4dD1udWxsO2EuY291bnQ9MDsxMD5QLmxlbmd0aCYmUC5wdXNoKGEpfVxuZnVuY3Rpb24gUyhhLGIsZCxjKXt2YXIgZT10eXBlb2YgYTtpZihcInVuZGVmaW5lZFwiPT09ZXx8XCJib29sZWFuXCI9PT1lKWE9bnVsbDt2YXIgZz0hMTtpZihudWxsPT09YSlnPSEwO2Vsc2Ugc3dpdGNoKGUpe2Nhc2UgXCJzdHJpbmdcIjpjYXNlIFwibnVtYmVyXCI6Zz0hMDticmVhaztjYXNlIFwib2JqZWN0XCI6c3dpdGNoKGEuJCR0eXBlb2Ype2Nhc2UgcDpjYXNlIHE6Zz0hMH19aWYoZylyZXR1cm4gZChjLGEsXCJcIj09PWI/XCIuXCIrVChhLDApOmIpLDE7Zz0wO2I9XCJcIj09PWI/XCIuXCI6YitcIjpcIjtpZihBcnJheS5pc0FycmF5KGEpKWZvcih2YXIgaD0wO2g8YS5sZW5ndGg7aCsrKXtlPWFbaF07dmFyIGY9YitUKGUsaCk7Zys9UyhlLGYsZCxjKX1lbHNlIGlmKG51bGw9PT1hfHxcIm9iamVjdFwiIT09dHlwZW9mIGE/Zj1udWxsOihmPUEmJmFbQV18fGFbXCJAQGl0ZXJhdG9yXCJdLGY9XCJmdW5jdGlvblwiPT09dHlwZW9mIGY/ZjpudWxsKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZilmb3IoYT1mLmNhbGwoYSksaD1cbjA7IShlPWEubmV4dCgpKS5kb25lOyllPWUudmFsdWUsZj1iK1QoZSxoKyspLGcrPVMoZSxmLGQsYyk7ZWxzZVwib2JqZWN0XCI9PT1lJiYoZD1cIlwiK2EsQihcIjMxXCIsXCJbb2JqZWN0IE9iamVjdF1cIj09PWQ/XCJvYmplY3Qgd2l0aCBrZXlzIHtcIitPYmplY3Qua2V5cyhhKS5qb2luKFwiLCBcIikrXCJ9XCI6ZCxcIlwiKSk7cmV0dXJuIGd9ZnVuY3Rpb24gVShhLGIsZCl7cmV0dXJuIG51bGw9PWE/MDpTKGEsXCJcIixiLGQpfWZ1bmN0aW9uIFQoYSxiKXtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiZudWxsIT1hLmtleT9lc2NhcGUoYS5rZXkpOmIudG9TdHJpbmcoMzYpfWZ1bmN0aW9uIGVhKGEsYil7YS5mdW5jLmNhbGwoYS5jb250ZXh0LGIsYS5jb3VudCsrKX1cbmZ1bmN0aW9uIGZhKGEsYixkKXt2YXIgYz1hLnJlc3VsdCxlPWEua2V5UHJlZml4O2E9YS5mdW5jLmNhbGwoYS5jb250ZXh0LGIsYS5jb3VudCsrKTtBcnJheS5pc0FycmF5KGEpP1YoYSxjLGQsZnVuY3Rpb24oYSl7cmV0dXJuIGF9KTpudWxsIT1hJiYoTihhKSYmKGE9ZGEoYSxlKyghYS5rZXl8fGImJmIua2V5PT09YS5rZXk/XCJcIjooXCJcIithLmtleSkucmVwbGFjZShPLFwiJCYvXCIpK1wiL1wiKStkKSksYy5wdXNoKGEpKX1mdW5jdGlvbiBWKGEsYixkLGMsZSl7dmFyIGc9XCJcIjtudWxsIT1kJiYoZz0oXCJcIitkKS5yZXBsYWNlKE8sXCIkJi9cIikrXCIvXCIpO2I9UShiLGcsYyxlKTtVKGEsZmEsYik7UihiKX1mdW5jdGlvbiBXKCl7dmFyIGE9SS5jdXJyZW50O251bGw9PT1hP0IoXCIzMDdcIik6dm9pZCAwO3JldHVybiBhfVxudmFyIFg9e0NoaWxkcmVuOnttYXA6ZnVuY3Rpb24oYSxiLGQpe2lmKG51bGw9PWEpcmV0dXJuIGE7dmFyIGM9W107VihhLGMsbnVsbCxiLGQpO3JldHVybiBjfSxmb3JFYWNoOmZ1bmN0aW9uKGEsYixkKXtpZihudWxsPT1hKXJldHVybiBhO2I9UShudWxsLG51bGwsYixkKTtVKGEsZWEsYik7UihiKX0sY291bnQ6ZnVuY3Rpb24oYSl7cmV0dXJuIFUoYSxmdW5jdGlvbigpe3JldHVybiBudWxsfSxudWxsKX0sdG9BcnJheTpmdW5jdGlvbihhKXt2YXIgYj1bXTtWKGEsYixudWxsLGZ1bmN0aW9uKGEpe3JldHVybiBhfSk7cmV0dXJuIGJ9LG9ubHk6ZnVuY3Rpb24oYSl7TihhKT92b2lkIDA6QihcIjE0M1wiKTtyZXR1cm4gYX19LGNyZWF0ZVJlZjpmdW5jdGlvbigpe3JldHVybntjdXJyZW50Om51bGx9fSxDb21wb25lbnQ6RSxQdXJlQ29tcG9uZW50OkcsY3JlYXRlQ29udGV4dDpmdW5jdGlvbihhLGIpe3ZvaWQgMD09PWImJihiPW51bGwpO2E9eyQkdHlwZW9mOncsX2NhbGN1bGF0ZUNoYW5nZWRCaXRzOmIsXG5fY3VycmVudFZhbHVlOmEsX2N1cnJlbnRWYWx1ZTI6YSxfdGhyZWFkQ291bnQ6MCxQcm92aWRlcjpudWxsLENvbnN1bWVyOm51bGx9O2EuUHJvdmlkZXI9eyQkdHlwZW9mOnYsX2NvbnRleHQ6YX07cmV0dXJuIGEuQ29uc3VtZXI9YX0sZm9yd2FyZFJlZjpmdW5jdGlvbihhKXtyZXR1cm57JCR0eXBlb2Y6eSxyZW5kZXI6YX19LGxhenk6ZnVuY3Rpb24oYSl7cmV0dXJueyQkdHlwZW9mOmJhLF9jdG9yOmEsX3N0YXR1czotMSxfcmVzdWx0Om51bGx9fSxtZW1vOmZ1bmN0aW9uKGEsYil7cmV0dXJueyQkdHlwZW9mOmFhLHR5cGU6YSxjb21wYXJlOnZvaWQgMD09PWI/bnVsbDpifX0sdXNlQ2FsbGJhY2s6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gVygpLnVzZUNhbGxiYWNrKGEsYil9LHVzZUNvbnRleHQ6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gVygpLnVzZUNvbnRleHQoYSxiKX0sdXNlRWZmZWN0OmZ1bmN0aW9uKGEsYil7cmV0dXJuIFcoKS51c2VFZmZlY3QoYSxiKX0sdXNlSW1wZXJhdGl2ZUhhbmRsZTpmdW5jdGlvbihhLFxuYixkKXtyZXR1cm4gVygpLnVzZUltcGVyYXRpdmVIYW5kbGUoYSxiLGQpfSx1c2VEZWJ1Z1ZhbHVlOmZ1bmN0aW9uKCl7fSx1c2VMYXlvdXRFZmZlY3Q6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gVygpLnVzZUxheW91dEVmZmVjdChhLGIpfSx1c2VNZW1vOmZ1bmN0aW9uKGEsYil7cmV0dXJuIFcoKS51c2VNZW1vKGEsYil9LHVzZVJlZHVjZXI6ZnVuY3Rpb24oYSxiLGQpe3JldHVybiBXKCkudXNlUmVkdWNlcihhLGIsZCl9LHVzZVJlZjpmdW5jdGlvbihhKXtyZXR1cm4gVygpLnVzZVJlZihhKX0sdXNlU3RhdGU6ZnVuY3Rpb24oYSl7cmV0dXJuIFcoKS51c2VTdGF0ZShhKX0sRnJhZ21lbnQ6cixTdHJpY3RNb2RlOnQsU3VzcGVuc2U6eixjcmVhdGVFbGVtZW50Ok0sY2xvbmVFbGVtZW50OmZ1bmN0aW9uKGEsYixkKXtudWxsPT09YXx8dm9pZCAwPT09YT9CKFwiMjY3XCIsYSk6dm9pZCAwO3ZhciBjPXZvaWQgMCxlPWsoe30sYS5wcm9wcyksZz1hLmtleSxoPWEucmVmLGY9YS5fb3duZXI7aWYobnVsbCE9XG5iKXt2b2lkIDAhPT1iLnJlZiYmKGg9Yi5yZWYsZj1KLmN1cnJlbnQpO3ZvaWQgMCE9PWIua2V5JiYoZz1cIlwiK2Iua2V5KTt2YXIgbD12b2lkIDA7YS50eXBlJiZhLnR5cGUuZGVmYXVsdFByb3BzJiYobD1hLnR5cGUuZGVmYXVsdFByb3BzKTtmb3IoYyBpbiBiKUsuY2FsbChiLGMpJiYhTC5oYXNPd25Qcm9wZXJ0eShjKSYmKGVbY109dm9pZCAwPT09YltjXSYmdm9pZCAwIT09bD9sW2NdOmJbY10pfWM9YXJndW1lbnRzLmxlbmd0aC0yO2lmKDE9PT1jKWUuY2hpbGRyZW49ZDtlbHNlIGlmKDE8Yyl7bD1BcnJheShjKTtmb3IodmFyIG09MDttPGM7bSsrKWxbbV09YXJndW1lbnRzW20rMl07ZS5jaGlsZHJlbj1sfXJldHVybnskJHR5cGVvZjpwLHR5cGU6YS50eXBlLGtleTpnLHJlZjpoLHByb3BzOmUsX293bmVyOmZ9fSxjcmVhdGVGYWN0b3J5OmZ1bmN0aW9uKGEpe3ZhciBiPU0uYmluZChudWxsLGEpO2IudHlwZT1hO3JldHVybiBifSxpc1ZhbGlkRWxlbWVudDpOLHZlcnNpb246XCIxNi44LjRcIixcbnVuc3RhYmxlX0NvbmN1cnJlbnRNb2RlOngsdW5zdGFibGVfUHJvZmlsZXI6dSxfX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRDp7UmVhY3RDdXJyZW50RGlzcGF0Y2hlcjpJLFJlYWN0Q3VycmVudE93bmVyOkosYXNzaWduOmt9fSxZPXtkZWZhdWx0Olh9LFo9WSYmWHx8WTttb2R1bGUuZXhwb3J0cz1aLmRlZmF1bHR8fFo7XG4iLCIvKiogQGxpY2Vuc2UgUmVhY3QgdjE2LjguNFxuICogcmVhY3QtZG9tLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuLypcbiBNb2Rlcm5penIgMy4wLjBwcmUgKEN1c3RvbSBCdWlsZCkgfCBNSVRcbiovXG4ndXNlIHN0cmljdCc7dmFyIGFhPXJlcXVpcmUoXCJyZWFjdFwiKSxuPXJlcXVpcmUoXCJvYmplY3QtYXNzaWduXCIpLHI9cmVxdWlyZShcInNjaGVkdWxlclwiKTtmdW5jdGlvbiBiYShhLGIsYyxkLGUsZixnLGgpe2lmKCFhKXthPXZvaWQgMDtpZih2b2lkIDA9PT1iKWE9RXJyb3IoXCJNaW5pZmllZCBleGNlcHRpb24gb2NjdXJyZWQ7IHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCBmb3IgdGhlIGZ1bGwgZXJyb3IgbWVzc2FnZSBhbmQgYWRkaXRpb25hbCBoZWxwZnVsIHdhcm5pbmdzLlwiKTtlbHNle3ZhciBsPVtjLGQsZSxmLGcsaF0saz0wO2E9RXJyb3IoYi5yZXBsYWNlKC8lcy9nLGZ1bmN0aW9uKCl7cmV0dXJuIGxbaysrXX0pKTthLm5hbWU9XCJJbnZhcmlhbnQgVmlvbGF0aW9uXCJ9YS5mcmFtZXNUb1BvcD0xO3Rocm93IGE7fX1cbmZ1bmN0aW9uIHgoYSl7Zm9yKHZhciBiPWFyZ3VtZW50cy5sZW5ndGgtMSxjPVwiaHR0cHM6Ly9yZWFjdGpzLm9yZy9kb2NzL2Vycm9yLWRlY29kZXIuaHRtbD9pbnZhcmlhbnQ9XCIrYSxkPTA7ZDxiO2QrKyljKz1cIiZhcmdzW109XCIrZW5jb2RlVVJJQ29tcG9uZW50KGFyZ3VtZW50c1tkKzFdKTtiYSghMSxcIk1pbmlmaWVkIFJlYWN0IGVycm9yICNcIithK1wiOyB2aXNpdCAlcyBmb3IgdGhlIGZ1bGwgbWVzc2FnZSBvciB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgZm9yIGZ1bGwgZXJyb3JzIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuIFwiLGMpfWFhP3ZvaWQgMDp4KFwiMjI3XCIpO2Z1bmN0aW9uIGNhKGEsYixjLGQsZSxmLGcsaCxsKXt2YXIgaz1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsMyk7dHJ5e2IuYXBwbHkoYyxrKX1jYXRjaChtKXt0aGlzLm9uRXJyb3IobSl9fVxudmFyIGRhPSExLGVhPW51bGwsZmE9ITEsaGE9bnVsbCxpYT17b25FcnJvcjpmdW5jdGlvbihhKXtkYT0hMDtlYT1hfX07ZnVuY3Rpb24gamEoYSxiLGMsZCxlLGYsZyxoLGwpe2RhPSExO2VhPW51bGw7Y2EuYXBwbHkoaWEsYXJndW1lbnRzKX1mdW5jdGlvbiBrYShhLGIsYyxkLGUsZixnLGgsbCl7amEuYXBwbHkodGhpcyxhcmd1bWVudHMpO2lmKGRhKXtpZihkYSl7dmFyIGs9ZWE7ZGE9ITE7ZWE9bnVsbH1lbHNlIHgoXCIxOThcIiksaz12b2lkIDA7ZmF8fChmYT0hMCxoYT1rKX19dmFyIGxhPW51bGwsbWE9e307XG5mdW5jdGlvbiBuYSgpe2lmKGxhKWZvcih2YXIgYSBpbiBtYSl7dmFyIGI9bWFbYV0sYz1sYS5pbmRleE9mKGEpOy0xPGM/dm9pZCAwOngoXCI5NlwiLGEpO2lmKCFvYVtjXSl7Yi5leHRyYWN0RXZlbnRzP3ZvaWQgMDp4KFwiOTdcIixhKTtvYVtjXT1iO2M9Yi5ldmVudFR5cGVzO2Zvcih2YXIgZCBpbiBjKXt2YXIgZT12b2lkIDA7dmFyIGY9Y1tkXSxnPWIsaD1kO3BhLmhhc093blByb3BlcnR5KGgpP3goXCI5OVwiLGgpOnZvaWQgMDtwYVtoXT1mO3ZhciBsPWYucGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM7aWYobCl7Zm9yKGUgaW4gbClsLmhhc093blByb3BlcnR5KGUpJiZxYShsW2VdLGcsaCk7ZT0hMH1lbHNlIGYucmVnaXN0cmF0aW9uTmFtZT8ocWEoZi5yZWdpc3RyYXRpb25OYW1lLGcsaCksZT0hMCk6ZT0hMTtlP3ZvaWQgMDp4KFwiOThcIixkLGEpfX19fVxuZnVuY3Rpb24gcWEoYSxiLGMpe3JhW2FdP3goXCIxMDBcIixhKTp2b2lkIDA7cmFbYV09YjtzYVthXT1iLmV2ZW50VHlwZXNbY10uZGVwZW5kZW5jaWVzfXZhciBvYT1bXSxwYT17fSxyYT17fSxzYT17fSx0YT1udWxsLHVhPW51bGwsdmE9bnVsbDtmdW5jdGlvbiB3YShhLGIsYyl7dmFyIGQ9YS50eXBlfHxcInVua25vd24tZXZlbnRcIjthLmN1cnJlbnRUYXJnZXQ9dmEoYyk7a2EoZCxiLHZvaWQgMCxhKTthLmN1cnJlbnRUYXJnZXQ9bnVsbH1mdW5jdGlvbiB4YShhLGIpe251bGw9PWI/eChcIjMwXCIpOnZvaWQgMDtpZihudWxsPT1hKXJldHVybiBiO2lmKEFycmF5LmlzQXJyYXkoYSkpe2lmKEFycmF5LmlzQXJyYXkoYikpcmV0dXJuIGEucHVzaC5hcHBseShhLGIpLGE7YS5wdXNoKGIpO3JldHVybiBhfXJldHVybiBBcnJheS5pc0FycmF5KGIpP1thXS5jb25jYXQoYik6W2EsYl19XG5mdW5jdGlvbiB5YShhLGIsYyl7QXJyYXkuaXNBcnJheShhKT9hLmZvckVhY2goYixjKTphJiZiLmNhbGwoYyxhKX12YXIgemE9bnVsbDtmdW5jdGlvbiBBYShhKXtpZihhKXt2YXIgYj1hLl9kaXNwYXRjaExpc3RlbmVycyxjPWEuX2Rpc3BhdGNoSW5zdGFuY2VzO2lmKEFycmF5LmlzQXJyYXkoYikpZm9yKHZhciBkPTA7ZDxiLmxlbmd0aCYmIWEuaXNQcm9wYWdhdGlvblN0b3BwZWQoKTtkKyspd2EoYSxiW2RdLGNbZF0pO2Vsc2UgYiYmd2EoYSxiLGMpO2EuX2Rpc3BhdGNoTGlzdGVuZXJzPW51bGw7YS5fZGlzcGF0Y2hJbnN0YW5jZXM9bnVsbDthLmlzUGVyc2lzdGVudCgpfHxhLmNvbnN0cnVjdG9yLnJlbGVhc2UoYSl9fVxudmFyIEJhPXtpbmplY3RFdmVudFBsdWdpbk9yZGVyOmZ1bmN0aW9uKGEpe2xhP3goXCIxMDFcIik6dm9pZCAwO2xhPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGEpO25hKCl9LGluamVjdEV2ZW50UGx1Z2luc0J5TmFtZTpmdW5jdGlvbihhKXt2YXIgYj0hMSxjO2ZvcihjIGluIGEpaWYoYS5oYXNPd25Qcm9wZXJ0eShjKSl7dmFyIGQ9YVtjXTttYS5oYXNPd25Qcm9wZXJ0eShjKSYmbWFbY109PT1kfHwobWFbY10/eChcIjEwMlwiLGMpOnZvaWQgMCxtYVtjXT1kLGI9ITApfWImJm5hKCl9fTtcbmZ1bmN0aW9uIENhKGEsYil7dmFyIGM9YS5zdGF0ZU5vZGU7aWYoIWMpcmV0dXJuIG51bGw7dmFyIGQ9dGEoYyk7aWYoIWQpcmV0dXJuIG51bGw7Yz1kW2JdO2E6c3dpdGNoKGIpe2Nhc2UgXCJvbkNsaWNrXCI6Y2FzZSBcIm9uQ2xpY2tDYXB0dXJlXCI6Y2FzZSBcIm9uRG91YmxlQ2xpY2tcIjpjYXNlIFwib25Eb3VibGVDbGlja0NhcHR1cmVcIjpjYXNlIFwib25Nb3VzZURvd25cIjpjYXNlIFwib25Nb3VzZURvd25DYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VNb3ZlXCI6Y2FzZSBcIm9uTW91c2VNb3ZlQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlVXBcIjpjYXNlIFwib25Nb3VzZVVwQ2FwdHVyZVwiOihkPSFkLmRpc2FibGVkKXx8KGE9YS50eXBlLGQ9IShcImJ1dHRvblwiPT09YXx8XCJpbnB1dFwiPT09YXx8XCJzZWxlY3RcIj09PWF8fFwidGV4dGFyZWFcIj09PWEpKTthPSFkO2JyZWFrIGE7ZGVmYXVsdDphPSExfWlmKGEpcmV0dXJuIG51bGw7YyYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGM/eChcIjIzMVwiLGIsdHlwZW9mIGMpOnZvaWQgMDtcbnJldHVybiBjfWZ1bmN0aW9uIERhKGEpe251bGwhPT1hJiYoemE9eGEoemEsYSkpO2E9emE7emE9bnVsbDtpZihhJiYoeWEoYSxBYSksemE/eChcIjk1XCIpOnZvaWQgMCxmYSkpdGhyb3cgYT1oYSxmYT0hMSxoYT1udWxsLGE7fXZhciBFYT1NYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zbGljZSgyKSxGYT1cIl9fcmVhY3RJbnRlcm5hbEluc3RhbmNlJFwiK0VhLEdhPVwiX19yZWFjdEV2ZW50SGFuZGxlcnMkXCIrRWE7ZnVuY3Rpb24gSGEoYSl7aWYoYVtGYV0pcmV0dXJuIGFbRmFdO2Zvcig7IWFbRmFdOylpZihhLnBhcmVudE5vZGUpYT1hLnBhcmVudE5vZGU7ZWxzZSByZXR1cm4gbnVsbDthPWFbRmFdO3JldHVybiA1PT09YS50YWd8fDY9PT1hLnRhZz9hOm51bGx9ZnVuY3Rpb24gSWEoYSl7YT1hW0ZhXTtyZXR1cm4hYXx8NSE9PWEudGFnJiY2IT09YS50YWc/bnVsbDphfVxuZnVuY3Rpb24gSmEoYSl7aWYoNT09PWEudGFnfHw2PT09YS50YWcpcmV0dXJuIGEuc3RhdGVOb2RlO3goXCIzM1wiKX1mdW5jdGlvbiBLYShhKXtyZXR1cm4gYVtHYV18fG51bGx9ZnVuY3Rpb24gTGEoYSl7ZG8gYT1hLnJldHVybjt3aGlsZShhJiY1IT09YS50YWcpO3JldHVybiBhP2E6bnVsbH1mdW5jdGlvbiBNYShhLGIsYyl7aWYoYj1DYShhLGMuZGlzcGF0Y2hDb25maWcucGhhc2VkUmVnaXN0cmF0aW9uTmFtZXNbYl0pKWMuX2Rpc3BhdGNoTGlzdGVuZXJzPXhhKGMuX2Rpc3BhdGNoTGlzdGVuZXJzLGIpLGMuX2Rpc3BhdGNoSW5zdGFuY2VzPXhhKGMuX2Rpc3BhdGNoSW5zdGFuY2VzLGEpfVxuZnVuY3Rpb24gTmEoYSl7aWYoYSYmYS5kaXNwYXRjaENvbmZpZy5waGFzZWRSZWdpc3RyYXRpb25OYW1lcyl7Zm9yKHZhciBiPWEuX3RhcmdldEluc3QsYz1bXTtiOyljLnB1c2goYiksYj1MYShiKTtmb3IoYj1jLmxlbmd0aDswPGItLTspTWEoY1tiXSxcImNhcHR1cmVkXCIsYSk7Zm9yKGI9MDtiPGMubGVuZ3RoO2IrKylNYShjW2JdLFwiYnViYmxlZFwiLGEpfX1mdW5jdGlvbiBPYShhLGIsYyl7YSYmYyYmYy5kaXNwYXRjaENvbmZpZy5yZWdpc3RyYXRpb25OYW1lJiYoYj1DYShhLGMuZGlzcGF0Y2hDb25maWcucmVnaXN0cmF0aW9uTmFtZSkpJiYoYy5fZGlzcGF0Y2hMaXN0ZW5lcnM9eGEoYy5fZGlzcGF0Y2hMaXN0ZW5lcnMsYiksYy5fZGlzcGF0Y2hJbnN0YW5jZXM9eGEoYy5fZGlzcGF0Y2hJbnN0YW5jZXMsYSkpfWZ1bmN0aW9uIFBhKGEpe2EmJmEuZGlzcGF0Y2hDb25maWcucmVnaXN0cmF0aW9uTmFtZSYmT2EoYS5fdGFyZ2V0SW5zdCxudWxsLGEpfVxuZnVuY3Rpb24gUWEoYSl7eWEoYSxOYSl9dmFyIFJhPSEoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiB3aW5kb3d8fCF3aW5kb3cuZG9jdW1lbnR8fCF3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCk7ZnVuY3Rpb24gU2EoYSxiKXt2YXIgYz17fTtjW2EudG9Mb3dlckNhc2UoKV09Yi50b0xvd2VyQ2FzZSgpO2NbXCJXZWJraXRcIithXT1cIndlYmtpdFwiK2I7Y1tcIk1velwiK2FdPVwibW96XCIrYjtyZXR1cm4gY312YXIgVGE9e2FuaW1hdGlvbmVuZDpTYShcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uRW5kXCIpLGFuaW1hdGlvbml0ZXJhdGlvbjpTYShcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uSXRlcmF0aW9uXCIpLGFuaW1hdGlvbnN0YXJ0OlNhKFwiQW5pbWF0aW9uXCIsXCJBbmltYXRpb25TdGFydFwiKSx0cmFuc2l0aW9uZW5kOlNhKFwiVHJhbnNpdGlvblwiLFwiVHJhbnNpdGlvbkVuZFwiKX0sVWE9e30sVmE9e307XG5SYSYmKFZhPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIikuc3R5bGUsXCJBbmltYXRpb25FdmVudFwiaW4gd2luZG93fHwoZGVsZXRlIFRhLmFuaW1hdGlvbmVuZC5hbmltYXRpb24sZGVsZXRlIFRhLmFuaW1hdGlvbml0ZXJhdGlvbi5hbmltYXRpb24sZGVsZXRlIFRhLmFuaW1hdGlvbnN0YXJ0LmFuaW1hdGlvbiksXCJUcmFuc2l0aW9uRXZlbnRcImluIHdpbmRvd3x8ZGVsZXRlIFRhLnRyYW5zaXRpb25lbmQudHJhbnNpdGlvbik7ZnVuY3Rpb24gV2EoYSl7aWYoVWFbYV0pcmV0dXJuIFVhW2FdO2lmKCFUYVthXSlyZXR1cm4gYTt2YXIgYj1UYVthXSxjO2ZvcihjIGluIGIpaWYoYi5oYXNPd25Qcm9wZXJ0eShjKSYmYyBpbiBWYSlyZXR1cm4gVWFbYV09YltjXTtyZXR1cm4gYX1cbnZhciBYYT1XYShcImFuaW1hdGlvbmVuZFwiKSxZYT1XYShcImFuaW1hdGlvbml0ZXJhdGlvblwiKSxaYT1XYShcImFuaW1hdGlvbnN0YXJ0XCIpLCRhPVdhKFwidHJhbnNpdGlvbmVuZFwiKSxhYj1cImFib3J0IGNhbnBsYXkgY2FucGxheXRocm91Z2ggZHVyYXRpb25jaGFuZ2UgZW1wdGllZCBlbmNyeXB0ZWQgZW5kZWQgZXJyb3IgbG9hZGVkZGF0YSBsb2FkZWRtZXRhZGF0YSBsb2Fkc3RhcnQgcGF1c2UgcGxheSBwbGF5aW5nIHByb2dyZXNzIHJhdGVjaGFuZ2Ugc2Vla2VkIHNlZWtpbmcgc3RhbGxlZCBzdXNwZW5kIHRpbWV1cGRhdGUgdm9sdW1lY2hhbmdlIHdhaXRpbmdcIi5zcGxpdChcIiBcIiksYmI9bnVsbCxjYj1udWxsLGRiPW51bGw7XG5mdW5jdGlvbiBlYigpe2lmKGRiKXJldHVybiBkYjt2YXIgYSxiPWNiLGM9Yi5sZW5ndGgsZCxlPVwidmFsdWVcImluIGJiP2JiLnZhbHVlOmJiLnRleHRDb250ZW50LGY9ZS5sZW5ndGg7Zm9yKGE9MDthPGMmJmJbYV09PT1lW2FdO2ErKyk7dmFyIGc9Yy1hO2ZvcihkPTE7ZDw9ZyYmYltjLWRdPT09ZVtmLWRdO2QrKyk7cmV0dXJuIGRiPWUuc2xpY2UoYSwxPGQ/MS1kOnZvaWQgMCl9ZnVuY3Rpb24gZmIoKXtyZXR1cm4hMH1mdW5jdGlvbiBnYigpe3JldHVybiExfVxuZnVuY3Rpb24geShhLGIsYyxkKXt0aGlzLmRpc3BhdGNoQ29uZmlnPWE7dGhpcy5fdGFyZ2V0SW5zdD1iO3RoaXMubmF0aXZlRXZlbnQ9YzthPXRoaXMuY29uc3RydWN0b3IuSW50ZXJmYWNlO2Zvcih2YXIgZSBpbiBhKWEuaGFzT3duUHJvcGVydHkoZSkmJigoYj1hW2VdKT90aGlzW2VdPWIoYyk6XCJ0YXJnZXRcIj09PWU/dGhpcy50YXJnZXQ9ZDp0aGlzW2VdPWNbZV0pO3RoaXMuaXNEZWZhdWx0UHJldmVudGVkPShudWxsIT1jLmRlZmF1bHRQcmV2ZW50ZWQ/Yy5kZWZhdWx0UHJldmVudGVkOiExPT09Yy5yZXR1cm5WYWx1ZSk/ZmI6Z2I7dGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZD1nYjtyZXR1cm4gdGhpc31cbm4oeS5wcm90b3R5cGUse3ByZXZlbnREZWZhdWx0OmZ1bmN0aW9uKCl7dGhpcy5kZWZhdWx0UHJldmVudGVkPSEwO3ZhciBhPXRoaXMubmF0aXZlRXZlbnQ7YSYmKGEucHJldmVudERlZmF1bHQ/YS5wcmV2ZW50RGVmYXVsdCgpOlwidW5rbm93blwiIT09dHlwZW9mIGEucmV0dXJuVmFsdWUmJihhLnJldHVyblZhbHVlPSExKSx0aGlzLmlzRGVmYXVsdFByZXZlbnRlZD1mYil9LHN0b3BQcm9wYWdhdGlvbjpmdW5jdGlvbigpe3ZhciBhPXRoaXMubmF0aXZlRXZlbnQ7YSYmKGEuc3RvcFByb3BhZ2F0aW9uP2Euc3RvcFByb3BhZ2F0aW9uKCk6XCJ1bmtub3duXCIhPT10eXBlb2YgYS5jYW5jZWxCdWJibGUmJihhLmNhbmNlbEJ1YmJsZT0hMCksdGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZD1mYil9LHBlcnNpc3Q6ZnVuY3Rpb24oKXt0aGlzLmlzUGVyc2lzdGVudD1mYn0saXNQZXJzaXN0ZW50OmdiLGRlc3RydWN0b3I6ZnVuY3Rpb24oKXt2YXIgYT10aGlzLmNvbnN0cnVjdG9yLkludGVyZmFjZSxcbmI7Zm9yKGIgaW4gYSl0aGlzW2JdPW51bGw7dGhpcy5uYXRpdmVFdmVudD10aGlzLl90YXJnZXRJbnN0PXRoaXMuZGlzcGF0Y2hDb25maWc9bnVsbDt0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkPXRoaXMuaXNEZWZhdWx0UHJldmVudGVkPWdiO3RoaXMuX2Rpc3BhdGNoSW5zdGFuY2VzPXRoaXMuX2Rpc3BhdGNoTGlzdGVuZXJzPW51bGx9fSk7eS5JbnRlcmZhY2U9e3R5cGU6bnVsbCx0YXJnZXQ6bnVsbCxjdXJyZW50VGFyZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIG51bGx9LGV2ZW50UGhhc2U6bnVsbCxidWJibGVzOm51bGwsY2FuY2VsYWJsZTpudWxsLHRpbWVTdGFtcDpmdW5jdGlvbihhKXtyZXR1cm4gYS50aW1lU3RhbXB8fERhdGUubm93KCl9LGRlZmF1bHRQcmV2ZW50ZWQ6bnVsbCxpc1RydXN0ZWQ6bnVsbH07XG55LmV4dGVuZD1mdW5jdGlvbihhKXtmdW5jdGlvbiBiKCl7fWZ1bmN0aW9uIGMoKXtyZXR1cm4gZC5hcHBseSh0aGlzLGFyZ3VtZW50cyl9dmFyIGQ9dGhpcztiLnByb3RvdHlwZT1kLnByb3RvdHlwZTt2YXIgZT1uZXcgYjtuKGUsYy5wcm90b3R5cGUpO2MucHJvdG90eXBlPWU7Yy5wcm90b3R5cGUuY29uc3RydWN0b3I9YztjLkludGVyZmFjZT1uKHt9LGQuSW50ZXJmYWNlLGEpO2MuZXh0ZW5kPWQuZXh0ZW5kO2hiKGMpO3JldHVybiBjfTtoYih5KTtmdW5jdGlvbiBpYihhLGIsYyxkKXtpZih0aGlzLmV2ZW50UG9vbC5sZW5ndGgpe3ZhciBlPXRoaXMuZXZlbnRQb29sLnBvcCgpO3RoaXMuY2FsbChlLGEsYixjLGQpO3JldHVybiBlfXJldHVybiBuZXcgdGhpcyhhLGIsYyxkKX1mdW5jdGlvbiBqYihhKXthIGluc3RhbmNlb2YgdGhpcz92b2lkIDA6eChcIjI3OVwiKTthLmRlc3RydWN0b3IoKTsxMD50aGlzLmV2ZW50UG9vbC5sZW5ndGgmJnRoaXMuZXZlbnRQb29sLnB1c2goYSl9XG5mdW5jdGlvbiBoYihhKXthLmV2ZW50UG9vbD1bXTthLmdldFBvb2xlZD1pYjthLnJlbGVhc2U9amJ9dmFyIGtiPXkuZXh0ZW5kKHtkYXRhOm51bGx9KSxsYj15LmV4dGVuZCh7ZGF0YTpudWxsfSksbWI9WzksMTMsMjcsMzJdLG5iPVJhJiZcIkNvbXBvc2l0aW9uRXZlbnRcImluIHdpbmRvdyxvYj1udWxsO1JhJiZcImRvY3VtZW50TW9kZVwiaW4gZG9jdW1lbnQmJihvYj1kb2N1bWVudC5kb2N1bWVudE1vZGUpO1xudmFyIHBiPVJhJiZcIlRleHRFdmVudFwiaW4gd2luZG93JiYhb2IscWI9UmEmJighbmJ8fG9iJiY4PG9iJiYxMT49b2IpLHJiPVN0cmluZy5mcm9tQ2hhckNvZGUoMzIpLHNiPXtiZWZvcmVJbnB1dDp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvbkJlZm9yZUlucHV0XCIsY2FwdHVyZWQ6XCJvbkJlZm9yZUlucHV0Q2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6W1wiY29tcG9zaXRpb25lbmRcIixcImtleXByZXNzXCIsXCJ0ZXh0SW5wdXRcIixcInBhc3RlXCJdfSxjb21wb3NpdGlvbkVuZDp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvbkNvbXBvc2l0aW9uRW5kXCIsY2FwdHVyZWQ6XCJvbkNvbXBvc2l0aW9uRW5kQ2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6XCJibHVyIGNvbXBvc2l0aW9uZW5kIGtleWRvd24ga2V5cHJlc3Mga2V5dXAgbW91c2Vkb3duXCIuc3BsaXQoXCIgXCIpfSxjb21wb3NpdGlvblN0YXJ0OntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uQ29tcG9zaXRpb25TdGFydFwiLFxuY2FwdHVyZWQ6XCJvbkNvbXBvc2l0aW9uU3RhcnRDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpcImJsdXIgY29tcG9zaXRpb25zdGFydCBrZXlkb3duIGtleXByZXNzIGtleXVwIG1vdXNlZG93blwiLnNwbGl0KFwiIFwiKX0sY29tcG9zaXRpb25VcGRhdGU6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25Db21wb3NpdGlvblVwZGF0ZVwiLGNhcHR1cmVkOlwib25Db21wb3NpdGlvblVwZGF0ZUNhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOlwiYmx1ciBjb21wb3NpdGlvbnVwZGF0ZSBrZXlkb3duIGtleXByZXNzIGtleXVwIG1vdXNlZG93blwiLnNwbGl0KFwiIFwiKX19LHRiPSExO1xuZnVuY3Rpb24gdWIoYSxiKXtzd2l0Y2goYSl7Y2FzZSBcImtleXVwXCI6cmV0dXJuLTEhPT1tYi5pbmRleE9mKGIua2V5Q29kZSk7Y2FzZSBcImtleWRvd25cIjpyZXR1cm4gMjI5IT09Yi5rZXlDb2RlO2Nhc2UgXCJrZXlwcmVzc1wiOmNhc2UgXCJtb3VzZWRvd25cIjpjYXNlIFwiYmx1clwiOnJldHVybiEwO2RlZmF1bHQ6cmV0dXJuITF9fWZ1bmN0aW9uIHZiKGEpe2E9YS5kZXRhaWw7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZcImRhdGFcImluIGE/YS5kYXRhOm51bGx9dmFyIHdiPSExO2Z1bmN0aW9uIHhiKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJjb21wb3NpdGlvbmVuZFwiOnJldHVybiB2YihiKTtjYXNlIFwia2V5cHJlc3NcIjppZigzMiE9PWIud2hpY2gpcmV0dXJuIG51bGw7dGI9ITA7cmV0dXJuIHJiO2Nhc2UgXCJ0ZXh0SW5wdXRcIjpyZXR1cm4gYT1iLmRhdGEsYT09PXJiJiZ0Yj9udWxsOmE7ZGVmYXVsdDpyZXR1cm4gbnVsbH19XG5mdW5jdGlvbiB5YihhLGIpe2lmKHdiKXJldHVyblwiY29tcG9zaXRpb25lbmRcIj09PWF8fCFuYiYmdWIoYSxiKT8oYT1lYigpLGRiPWNiPWJiPW51bGwsd2I9ITEsYSk6bnVsbDtzd2l0Y2goYSl7Y2FzZSBcInBhc3RlXCI6cmV0dXJuIG51bGw7Y2FzZSBcImtleXByZXNzXCI6aWYoIShiLmN0cmxLZXl8fGIuYWx0S2V5fHxiLm1ldGFLZXkpfHxiLmN0cmxLZXkmJmIuYWx0S2V5KXtpZihiLmNoYXImJjE8Yi5jaGFyLmxlbmd0aClyZXR1cm4gYi5jaGFyO2lmKGIud2hpY2gpcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoYi53aGljaCl9cmV0dXJuIG51bGw7Y2FzZSBcImNvbXBvc2l0aW9uZW5kXCI6cmV0dXJuIHFiJiZcImtvXCIhPT1iLmxvY2FsZT9udWxsOmIuZGF0YTtkZWZhdWx0OnJldHVybiBudWxsfX1cbnZhciB6Yj17ZXZlbnRUeXBlczpzYixleHRyYWN0RXZlbnRzOmZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPXZvaWQgMDt2YXIgZj12b2lkIDA7aWYobmIpYjp7c3dpdGNoKGEpe2Nhc2UgXCJjb21wb3NpdGlvbnN0YXJ0XCI6ZT1zYi5jb21wb3NpdGlvblN0YXJ0O2JyZWFrIGI7Y2FzZSBcImNvbXBvc2l0aW9uZW5kXCI6ZT1zYi5jb21wb3NpdGlvbkVuZDticmVhayBiO2Nhc2UgXCJjb21wb3NpdGlvbnVwZGF0ZVwiOmU9c2IuY29tcG9zaXRpb25VcGRhdGU7YnJlYWsgYn1lPXZvaWQgMH1lbHNlIHdiP3ViKGEsYykmJihlPXNiLmNvbXBvc2l0aW9uRW5kKTpcImtleWRvd25cIj09PWEmJjIyOT09PWMua2V5Q29kZSYmKGU9c2IuY29tcG9zaXRpb25TdGFydCk7ZT8ocWImJlwia29cIiE9PWMubG9jYWxlJiYod2J8fGUhPT1zYi5jb21wb3NpdGlvblN0YXJ0P2U9PT1zYi5jb21wb3NpdGlvbkVuZCYmd2ImJihmPWViKCkpOihiYj1kLGNiPVwidmFsdWVcImluIGJiP2JiLnZhbHVlOmJiLnRleHRDb250ZW50LHdiPVxuITApKSxlPWtiLmdldFBvb2xlZChlLGIsYyxkKSxmP2UuZGF0YT1mOihmPXZiKGMpLG51bGwhPT1mJiYoZS5kYXRhPWYpKSxRYShlKSxmPWUpOmY9bnVsbDsoYT1wYj94YihhLGMpOnliKGEsYykpPyhiPWxiLmdldFBvb2xlZChzYi5iZWZvcmVJbnB1dCxiLGMsZCksYi5kYXRhPWEsUWEoYikpOmI9bnVsbDtyZXR1cm4gbnVsbD09PWY/YjpudWxsPT09Yj9mOltmLGJdfX0sQWI9bnVsbCxCYj1udWxsLENiPW51bGw7ZnVuY3Rpb24gRGIoYSl7aWYoYT11YShhKSl7XCJmdW5jdGlvblwiIT09dHlwZW9mIEFiP3goXCIyODBcIik6dm9pZCAwO3ZhciBiPXRhKGEuc3RhdGVOb2RlKTtBYihhLnN0YXRlTm9kZSxhLnR5cGUsYil9fWZ1bmN0aW9uIEViKGEpe0JiP0NiP0NiLnB1c2goYSk6Q2I9W2FdOkJiPWF9ZnVuY3Rpb24gRmIoKXtpZihCYil7dmFyIGE9QmIsYj1DYjtDYj1CYj1udWxsO0RiKGEpO2lmKGIpZm9yKGE9MDthPGIubGVuZ3RoO2ErKylEYihiW2FdKX19XG5mdW5jdGlvbiBHYihhLGIpe3JldHVybiBhKGIpfWZ1bmN0aW9uIEhiKGEsYixjKXtyZXR1cm4gYShiLGMpfWZ1bmN0aW9uIEliKCl7fXZhciBKYj0hMTtmdW5jdGlvbiBLYihhLGIpe2lmKEpiKXJldHVybiBhKGIpO0piPSEwO3RyeXtyZXR1cm4gR2IoYSxiKX1maW5hbGx5e2lmKEpiPSExLG51bGwhPT1CYnx8bnVsbCE9PUNiKUliKCksRmIoKX19dmFyIExiPXtjb2xvcjohMCxkYXRlOiEwLGRhdGV0aW1lOiEwLFwiZGF0ZXRpbWUtbG9jYWxcIjohMCxlbWFpbDohMCxtb250aDohMCxudW1iZXI6ITAscGFzc3dvcmQ6ITAscmFuZ2U6ITAsc2VhcmNoOiEwLHRlbDohMCx0ZXh0OiEwLHRpbWU6ITAsdXJsOiEwLHdlZWs6ITB9O2Z1bmN0aW9uIE1iKGEpe3ZhciBiPWEmJmEubm9kZU5hbWUmJmEubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtyZXR1cm5cImlucHV0XCI9PT1iPyEhTGJbYS50eXBlXTpcInRleHRhcmVhXCI9PT1iPyEwOiExfVxuZnVuY3Rpb24gTmIoYSl7YT1hLnRhcmdldHx8YS5zcmNFbGVtZW50fHx3aW5kb3c7YS5jb3JyZXNwb25kaW5nVXNlRWxlbWVudCYmKGE9YS5jb3JyZXNwb25kaW5nVXNlRWxlbWVudCk7cmV0dXJuIDM9PT1hLm5vZGVUeXBlP2EucGFyZW50Tm9kZTphfWZ1bmN0aW9uIE9iKGEpe2lmKCFSYSlyZXR1cm4hMTthPVwib25cIithO3ZhciBiPWEgaW4gZG9jdW1lbnQ7Ynx8KGI9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKSxiLnNldEF0dHJpYnV0ZShhLFwicmV0dXJuO1wiKSxiPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBiW2FdKTtyZXR1cm4gYn1mdW5jdGlvbiBQYihhKXt2YXIgYj1hLnR5cGU7cmV0dXJuKGE9YS5ub2RlTmFtZSkmJlwiaW5wdXRcIj09PWEudG9Mb3dlckNhc2UoKSYmKFwiY2hlY2tib3hcIj09PWJ8fFwicmFkaW9cIj09PWIpfVxuZnVuY3Rpb24gUWIoYSl7dmFyIGI9UGIoYSk/XCJjaGVja2VkXCI6XCJ2YWx1ZVwiLGM9T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihhLmNvbnN0cnVjdG9yLnByb3RvdHlwZSxiKSxkPVwiXCIrYVtiXTtpZighYS5oYXNPd25Qcm9wZXJ0eShiKSYmXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBjJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy5nZXQmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLnNldCl7dmFyIGU9Yy5nZXQsZj1jLnNldDtPYmplY3QuZGVmaW5lUHJvcGVydHkoYSxiLHtjb25maWd1cmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGUuY2FsbCh0aGlzKX0sc2V0OmZ1bmN0aW9uKGEpe2Q9XCJcIithO2YuY2FsbCh0aGlzLGEpfX0pO09iamVjdC5kZWZpbmVQcm9wZXJ0eShhLGIse2VudW1lcmFibGU6Yy5lbnVtZXJhYmxlfSk7cmV0dXJue2dldFZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIGR9LHNldFZhbHVlOmZ1bmN0aW9uKGEpe2Q9XCJcIithfSxzdG9wVHJhY2tpbmc6ZnVuY3Rpb24oKXthLl92YWx1ZVRyYWNrZXI9XG5udWxsO2RlbGV0ZSBhW2JdfX19fWZ1bmN0aW9uIFJiKGEpe2EuX3ZhbHVlVHJhY2tlcnx8KGEuX3ZhbHVlVHJhY2tlcj1RYihhKSl9ZnVuY3Rpb24gU2IoYSl7aWYoIWEpcmV0dXJuITE7dmFyIGI9YS5fdmFsdWVUcmFja2VyO2lmKCFiKXJldHVybiEwO3ZhciBjPWIuZ2V0VmFsdWUoKTt2YXIgZD1cIlwiO2EmJihkPVBiKGEpP2EuY2hlY2tlZD9cInRydWVcIjpcImZhbHNlXCI6YS52YWx1ZSk7YT1kO3JldHVybiBhIT09Yz8oYi5zZXRWYWx1ZShhKSwhMCk6ITF9dmFyIFRiPWFhLl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEO1RiLmhhc093blByb3BlcnR5KFwiUmVhY3RDdXJyZW50RGlzcGF0Y2hlclwiKXx8KFRiLlJlYWN0Q3VycmVudERpc3BhdGNoZXI9e2N1cnJlbnQ6bnVsbH0pO1xudmFyIFViPS9eKC4qKVtcXFxcXFwvXS8sej1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuZm9yLFZiPXo/U3ltYm9sLmZvcihcInJlYWN0LmVsZW1lbnRcIik6NjAxMDMsV2I9ej9TeW1ib2wuZm9yKFwicmVhY3QucG9ydGFsXCIpOjYwMTA2LFhiPXo/U3ltYm9sLmZvcihcInJlYWN0LmZyYWdtZW50XCIpOjYwMTA3LFliPXo/U3ltYm9sLmZvcihcInJlYWN0LnN0cmljdF9tb2RlXCIpOjYwMTA4LFpiPXo/U3ltYm9sLmZvcihcInJlYWN0LnByb2ZpbGVyXCIpOjYwMTE0LCRiPXo/U3ltYm9sLmZvcihcInJlYWN0LnByb3ZpZGVyXCIpOjYwMTA5LGFjPXo/U3ltYm9sLmZvcihcInJlYWN0LmNvbnRleHRcIik6NjAxMTAsYmM9ej9TeW1ib2wuZm9yKFwicmVhY3QuY29uY3VycmVudF9tb2RlXCIpOjYwMTExLGNjPXo/U3ltYm9sLmZvcihcInJlYWN0LmZvcndhcmRfcmVmXCIpOjYwMTEyLGRjPXo/U3ltYm9sLmZvcihcInJlYWN0LnN1c3BlbnNlXCIpOjYwMTEzLGVjPXo/U3ltYm9sLmZvcihcInJlYWN0Lm1lbW9cIik6XG42MDExNSxmYz16P1N5bWJvbC5mb3IoXCJyZWFjdC5sYXp5XCIpOjYwMTE2LGdjPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5pdGVyYXRvcjtmdW5jdGlvbiBoYyhhKXtpZihudWxsPT09YXx8XCJvYmplY3RcIiE9PXR5cGVvZiBhKXJldHVybiBudWxsO2E9Z2MmJmFbZ2NdfHxhW1wiQEBpdGVyYXRvclwiXTtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYT9hOm51bGx9XG5mdW5jdGlvbiBpYyhhKXtpZihudWxsPT1hKXJldHVybiBudWxsO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhKXJldHVybiBhLmRpc3BsYXlOYW1lfHxhLm5hbWV8fG51bGw7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBhKXJldHVybiBhO3N3aXRjaChhKXtjYXNlIGJjOnJldHVyblwiQ29uY3VycmVudE1vZGVcIjtjYXNlIFhiOnJldHVyblwiRnJhZ21lbnRcIjtjYXNlIFdiOnJldHVyblwiUG9ydGFsXCI7Y2FzZSBaYjpyZXR1cm5cIlByb2ZpbGVyXCI7Y2FzZSBZYjpyZXR1cm5cIlN0cmljdE1vZGVcIjtjYXNlIGRjOnJldHVyblwiU3VzcGVuc2VcIn1pZihcIm9iamVjdFwiPT09dHlwZW9mIGEpc3dpdGNoKGEuJCR0eXBlb2Ype2Nhc2UgYWM6cmV0dXJuXCJDb250ZXh0LkNvbnN1bWVyXCI7Y2FzZSAkYjpyZXR1cm5cIkNvbnRleHQuUHJvdmlkZXJcIjtjYXNlIGNjOnZhciBiPWEucmVuZGVyO2I9Yi5kaXNwbGF5TmFtZXx8Yi5uYW1lfHxcIlwiO3JldHVybiBhLmRpc3BsYXlOYW1lfHwoXCJcIiE9PWI/XCJGb3J3YXJkUmVmKFwiK2IrXG5cIilcIjpcIkZvcndhcmRSZWZcIik7Y2FzZSBlYzpyZXR1cm4gaWMoYS50eXBlKTtjYXNlIGZjOmlmKGE9MT09PWEuX3N0YXR1cz9hLl9yZXN1bHQ6bnVsbClyZXR1cm4gaWMoYSl9cmV0dXJuIG51bGx9ZnVuY3Rpb24gamMoYSl7dmFyIGI9XCJcIjtkb3thOnN3aXRjaChhLnRhZyl7Y2FzZSAzOmNhc2UgNDpjYXNlIDY6Y2FzZSA3OmNhc2UgMTA6Y2FzZSA5OnZhciBjPVwiXCI7YnJlYWsgYTtkZWZhdWx0OnZhciBkPWEuX2RlYnVnT3duZXIsZT1hLl9kZWJ1Z1NvdXJjZSxmPWljKGEudHlwZSk7Yz1udWxsO2QmJihjPWljKGQudHlwZSkpO2Q9ZjtmPVwiXCI7ZT9mPVwiIChhdCBcIitlLmZpbGVOYW1lLnJlcGxhY2UoVWIsXCJcIikrXCI6XCIrZS5saW5lTnVtYmVyK1wiKVwiOmMmJihmPVwiIChjcmVhdGVkIGJ5IFwiK2MrXCIpXCIpO2M9XCJcXG4gICAgaW4gXCIrKGR8fFwiVW5rbm93blwiKStmfWIrPWM7YT1hLnJldHVybn13aGlsZShhKTtyZXR1cm4gYn1cbnZhciBrYz0vXls6QS1aX2EtelxcdTAwQzAtXFx1MDBENlxcdTAwRDgtXFx1MDBGNlxcdTAwRjgtXFx1MDJGRlxcdTAzNzAtXFx1MDM3RFxcdTAzN0YtXFx1MUZGRlxcdTIwMEMtXFx1MjAwRFxcdTIwNzAtXFx1MjE4RlxcdTJDMDAtXFx1MkZFRlxcdTMwMDEtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZGRF1bOkEtWl9hLXpcXHUwMEMwLVxcdTAwRDZcXHUwMEQ4LVxcdTAwRjZcXHUwMEY4LVxcdTAyRkZcXHUwMzcwLVxcdTAzN0RcXHUwMzdGLVxcdTFGRkZcXHUyMDBDLVxcdTIwMERcXHUyMDcwLVxcdTIxOEZcXHUyQzAwLVxcdTJGRUZcXHUzMDAxLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRkRcXC0uMC05XFx1MDBCN1xcdTAzMDAtXFx1MDM2RlxcdTIwM0YtXFx1MjA0MF0qJC8sbGM9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSxtYz17fSxuYz17fTtcbmZ1bmN0aW9uIG9jKGEpe2lmKGxjLmNhbGwobmMsYSkpcmV0dXJuITA7aWYobGMuY2FsbChtYyxhKSlyZXR1cm4hMTtpZihrYy50ZXN0KGEpKXJldHVybiBuY1thXT0hMDttY1thXT0hMDtyZXR1cm4hMX1mdW5jdGlvbiBwYyhhLGIsYyxkKXtpZihudWxsIT09YyYmMD09PWMudHlwZSlyZXR1cm4hMTtzd2l0Y2godHlwZW9mIGIpe2Nhc2UgXCJmdW5jdGlvblwiOmNhc2UgXCJzeW1ib2xcIjpyZXR1cm4hMDtjYXNlIFwiYm9vbGVhblwiOmlmKGQpcmV0dXJuITE7aWYobnVsbCE9PWMpcmV0dXJuIWMuYWNjZXB0c0Jvb2xlYW5zO2E9YS50b0xvd2VyQ2FzZSgpLnNsaWNlKDAsNSk7cmV0dXJuXCJkYXRhLVwiIT09YSYmXCJhcmlhLVwiIT09YTtkZWZhdWx0OnJldHVybiExfX1cbmZ1bmN0aW9uIHFjKGEsYixjLGQpe2lmKG51bGw9PT1ifHxcInVuZGVmaW5lZFwiPT09dHlwZW9mIGJ8fHBjKGEsYixjLGQpKXJldHVybiEwO2lmKGQpcmV0dXJuITE7aWYobnVsbCE9PWMpc3dpdGNoKGMudHlwZSl7Y2FzZSAzOnJldHVybiFiO2Nhc2UgNDpyZXR1cm4hMT09PWI7Y2FzZSA1OnJldHVybiBpc05hTihiKTtjYXNlIDY6cmV0dXJuIGlzTmFOKGIpfHwxPmJ9cmV0dXJuITF9ZnVuY3Rpb24gQyhhLGIsYyxkLGUpe3RoaXMuYWNjZXB0c0Jvb2xlYW5zPTI9PT1ifHwzPT09Ynx8ND09PWI7dGhpcy5hdHRyaWJ1dGVOYW1lPWQ7dGhpcy5hdHRyaWJ1dGVOYW1lc3BhY2U9ZTt0aGlzLm11c3RVc2VQcm9wZXJ0eT1jO3RoaXMucHJvcGVydHlOYW1lPWE7dGhpcy50eXBlPWJ9dmFyIEQ9e307XG5cImNoaWxkcmVuIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MIGRlZmF1bHRWYWx1ZSBkZWZhdWx0Q2hlY2tlZCBpbm5lckhUTUwgc3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nIHN1cHByZXNzSHlkcmF0aW9uV2FybmluZyBzdHlsZVwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0RbYV09bmV3IEMoYSwwLCExLGEsbnVsbCl9KTtbW1wiYWNjZXB0Q2hhcnNldFwiLFwiYWNjZXB0LWNoYXJzZXRcIl0sW1wiY2xhc3NOYW1lXCIsXCJjbGFzc1wiXSxbXCJodG1sRm9yXCIsXCJmb3JcIl0sW1wiaHR0cEVxdWl2XCIsXCJodHRwLWVxdWl2XCJdXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWFbMF07RFtiXT1uZXcgQyhiLDEsITEsYVsxXSxudWxsKX0pO1tcImNvbnRlbnRFZGl0YWJsZVwiLFwiZHJhZ2dhYmxlXCIsXCJzcGVsbENoZWNrXCIsXCJ2YWx1ZVwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0RbYV09bmV3IEMoYSwyLCExLGEudG9Mb3dlckNhc2UoKSxudWxsKX0pO1xuW1wiYXV0b1JldmVyc2VcIixcImV4dGVybmFsUmVzb3VyY2VzUmVxdWlyZWRcIixcImZvY3VzYWJsZVwiLFwicHJlc2VydmVBbHBoYVwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0RbYV09bmV3IEMoYSwyLCExLGEsbnVsbCl9KTtcImFsbG93RnVsbFNjcmVlbiBhc3luYyBhdXRvRm9jdXMgYXV0b1BsYXkgY29udHJvbHMgZGVmYXVsdCBkZWZlciBkaXNhYmxlZCBmb3JtTm9WYWxpZGF0ZSBoaWRkZW4gbG9vcCBub01vZHVsZSBub1ZhbGlkYXRlIG9wZW4gcGxheXNJbmxpbmUgcmVhZE9ubHkgcmVxdWlyZWQgcmV2ZXJzZWQgc2NvcGVkIHNlYW1sZXNzIGl0ZW1TY29wZVwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0RbYV09bmV3IEMoYSwzLCExLGEudG9Mb3dlckNhc2UoKSxudWxsKX0pO1tcImNoZWNrZWRcIixcIm11bHRpcGxlXCIsXCJtdXRlZFwiLFwic2VsZWN0ZWRcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBDKGEsMywhMCxhLG51bGwpfSk7XG5bXCJjYXB0dXJlXCIsXCJkb3dubG9hZFwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0RbYV09bmV3IEMoYSw0LCExLGEsbnVsbCl9KTtbXCJjb2xzXCIsXCJyb3dzXCIsXCJzaXplXCIsXCJzcGFuXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQyhhLDYsITEsYSxudWxsKX0pO1tcInJvd1NwYW5cIixcInN0YXJ0XCJdLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQyhhLDUsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwpfSk7dmFyIHJjPS9bXFwtOl0oW2Etel0pL2c7ZnVuY3Rpb24gc2MoYSl7cmV0dXJuIGFbMV0udG9VcHBlckNhc2UoKX1cblwiYWNjZW50LWhlaWdodCBhbGlnbm1lbnQtYmFzZWxpbmUgYXJhYmljLWZvcm0gYmFzZWxpbmUtc2hpZnQgY2FwLWhlaWdodCBjbGlwLXBhdGggY2xpcC1ydWxlIGNvbG9yLWludGVycG9sYXRpb24gY29sb3ItaW50ZXJwb2xhdGlvbi1maWx0ZXJzIGNvbG9yLXByb2ZpbGUgY29sb3ItcmVuZGVyaW5nIGRvbWluYW50LWJhc2VsaW5lIGVuYWJsZS1iYWNrZ3JvdW5kIGZpbGwtb3BhY2l0eSBmaWxsLXJ1bGUgZmxvb2QtY29sb3IgZmxvb2Qtb3BhY2l0eSBmb250LWZhbWlseSBmb250LXNpemUgZm9udC1zaXplLWFkanVzdCBmb250LXN0cmV0Y2ggZm9udC1zdHlsZSBmb250LXZhcmlhbnQgZm9udC13ZWlnaHQgZ2x5cGgtbmFtZSBnbHlwaC1vcmllbnRhdGlvbi1ob3Jpem9udGFsIGdseXBoLW9yaWVudGF0aW9uLXZlcnRpY2FsIGhvcml6LWFkdi14IGhvcml6LW9yaWdpbi14IGltYWdlLXJlbmRlcmluZyBsZXR0ZXItc3BhY2luZyBsaWdodGluZy1jb2xvciBtYXJrZXItZW5kIG1hcmtlci1taWQgbWFya2VyLXN0YXJ0IG92ZXJsaW5lLXBvc2l0aW9uIG92ZXJsaW5lLXRoaWNrbmVzcyBwYWludC1vcmRlciBwYW5vc2UtMSBwb2ludGVyLWV2ZW50cyByZW5kZXJpbmctaW50ZW50IHNoYXBlLXJlbmRlcmluZyBzdG9wLWNvbG9yIHN0b3Atb3BhY2l0eSBzdHJpa2V0aHJvdWdoLXBvc2l0aW9uIHN0cmlrZXRocm91Z2gtdGhpY2tuZXNzIHN0cm9rZS1kYXNoYXJyYXkgc3Ryb2tlLWRhc2hvZmZzZXQgc3Ryb2tlLWxpbmVjYXAgc3Ryb2tlLWxpbmVqb2luIHN0cm9rZS1taXRlcmxpbWl0IHN0cm9rZS1vcGFjaXR5IHN0cm9rZS13aWR0aCB0ZXh0LWFuY2hvciB0ZXh0LWRlY29yYXRpb24gdGV4dC1yZW5kZXJpbmcgdW5kZXJsaW5lLXBvc2l0aW9uIHVuZGVybGluZS10aGlja25lc3MgdW5pY29kZS1iaWRpIHVuaWNvZGUtcmFuZ2UgdW5pdHMtcGVyLWVtIHYtYWxwaGFiZXRpYyB2LWhhbmdpbmcgdi1pZGVvZ3JhcGhpYyB2LW1hdGhlbWF0aWNhbCB2ZWN0b3ItZWZmZWN0IHZlcnQtYWR2LXkgdmVydC1vcmlnaW4teCB2ZXJ0LW9yaWdpbi15IHdvcmQtc3BhY2luZyB3cml0aW5nLW1vZGUgeG1sbnM6eGxpbmsgeC1oZWlnaHRcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2UocmMsXG5zYyk7RFtiXT1uZXcgQyhiLDEsITEsYSxudWxsKX0pO1wieGxpbms6YWN0dWF0ZSB4bGluazphcmNyb2xlIHhsaW5rOmhyZWYgeGxpbms6cm9sZSB4bGluazpzaG93IHhsaW5rOnRpdGxlIHhsaW5rOnR5cGVcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2UocmMsc2MpO0RbYl09bmV3IEMoYiwxLCExLGEsXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIpfSk7W1wieG1sOmJhc2VcIixcInhtbDpsYW5nXCIsXCJ4bWw6c3BhY2VcIl0uZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2UocmMsc2MpO0RbYl09bmV3IEMoYiwxLCExLGEsXCJodHRwOi8vd3d3LnczLm9yZy9YTUwvMTk5OC9uYW1lc3BhY2VcIil9KTtbXCJ0YWJJbmRleFwiLFwiY3Jvc3NPcmlnaW5cIl0uZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBDKGEsMSwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCl9KTtcbmZ1bmN0aW9uIHRjKGEsYixjLGQpe3ZhciBlPUQuaGFzT3duUHJvcGVydHkoYik/RFtiXTpudWxsO3ZhciBmPW51bGwhPT1lPzA9PT1lLnR5cGU6ZD8hMTohKDI8Yi5sZW5ndGgpfHxcIm9cIiE9PWJbMF0mJlwiT1wiIT09YlswXXx8XCJuXCIhPT1iWzFdJiZcIk5cIiE9PWJbMV0/ITE6ITA7Znx8KHFjKGIsYyxlLGQpJiYoYz1udWxsKSxkfHxudWxsPT09ZT9vYyhiKSYmKG51bGw9PT1jP2EucmVtb3ZlQXR0cmlidXRlKGIpOmEuc2V0QXR0cmlidXRlKGIsXCJcIitjKSk6ZS5tdXN0VXNlUHJvcGVydHk/YVtlLnByb3BlcnR5TmFtZV09bnVsbD09PWM/Mz09PWUudHlwZT8hMTpcIlwiOmM6KGI9ZS5hdHRyaWJ1dGVOYW1lLGQ9ZS5hdHRyaWJ1dGVOYW1lc3BhY2UsbnVsbD09PWM/YS5yZW1vdmVBdHRyaWJ1dGUoYik6KGU9ZS50eXBlLGM9Mz09PWV8fDQ9PT1lJiYhMD09PWM/XCJcIjpcIlwiK2MsZD9hLnNldEF0dHJpYnV0ZU5TKGQsYixjKTphLnNldEF0dHJpYnV0ZShiLGMpKSkpfVxuZnVuY3Rpb24gdWMoYSl7c3dpdGNoKHR5cGVvZiBhKXtjYXNlIFwiYm9vbGVhblwiOmNhc2UgXCJudW1iZXJcIjpjYXNlIFwib2JqZWN0XCI6Y2FzZSBcInN0cmluZ1wiOmNhc2UgXCJ1bmRlZmluZWRcIjpyZXR1cm4gYTtkZWZhdWx0OnJldHVyblwiXCJ9fWZ1bmN0aW9uIHZjKGEsYil7dmFyIGM9Yi5jaGVja2VkO3JldHVybiBuKHt9LGIse2RlZmF1bHRDaGVja2VkOnZvaWQgMCxkZWZhdWx0VmFsdWU6dm9pZCAwLHZhbHVlOnZvaWQgMCxjaGVja2VkOm51bGwhPWM/YzphLl93cmFwcGVyU3RhdGUuaW5pdGlhbENoZWNrZWR9KX1cbmZ1bmN0aW9uIHdjKGEsYil7dmFyIGM9bnVsbD09Yi5kZWZhdWx0VmFsdWU/XCJcIjpiLmRlZmF1bHRWYWx1ZSxkPW51bGwhPWIuY2hlY2tlZD9iLmNoZWNrZWQ6Yi5kZWZhdWx0Q2hlY2tlZDtjPXVjKG51bGwhPWIudmFsdWU/Yi52YWx1ZTpjKTthLl93cmFwcGVyU3RhdGU9e2luaXRpYWxDaGVja2VkOmQsaW5pdGlhbFZhbHVlOmMsY29udHJvbGxlZDpcImNoZWNrYm94XCI9PT1iLnR5cGV8fFwicmFkaW9cIj09PWIudHlwZT9udWxsIT1iLmNoZWNrZWQ6bnVsbCE9Yi52YWx1ZX19ZnVuY3Rpb24geGMoYSxiKXtiPWIuY2hlY2tlZDtudWxsIT1iJiZ0YyhhLFwiY2hlY2tlZFwiLGIsITEpfVxuZnVuY3Rpb24geWMoYSxiKXt4YyhhLGIpO3ZhciBjPXVjKGIudmFsdWUpLGQ9Yi50eXBlO2lmKG51bGwhPWMpaWYoXCJudW1iZXJcIj09PWQpe2lmKDA9PT1jJiZcIlwiPT09YS52YWx1ZXx8YS52YWx1ZSE9YylhLnZhbHVlPVwiXCIrY31lbHNlIGEudmFsdWUhPT1cIlwiK2MmJihhLnZhbHVlPVwiXCIrYyk7ZWxzZSBpZihcInN1Ym1pdFwiPT09ZHx8XCJyZXNldFwiPT09ZCl7YS5yZW1vdmVBdHRyaWJ1dGUoXCJ2YWx1ZVwiKTtyZXR1cm59Yi5oYXNPd25Qcm9wZXJ0eShcInZhbHVlXCIpP3pjKGEsYi50eXBlLGMpOmIuaGFzT3duUHJvcGVydHkoXCJkZWZhdWx0VmFsdWVcIikmJnpjKGEsYi50eXBlLHVjKGIuZGVmYXVsdFZhbHVlKSk7bnVsbD09Yi5jaGVja2VkJiZudWxsIT1iLmRlZmF1bHRDaGVja2VkJiYoYS5kZWZhdWx0Q2hlY2tlZD0hIWIuZGVmYXVsdENoZWNrZWQpfVxuZnVuY3Rpb24gQWMoYSxiLGMpe2lmKGIuaGFzT3duUHJvcGVydHkoXCJ2YWx1ZVwiKXx8Yi5oYXNPd25Qcm9wZXJ0eShcImRlZmF1bHRWYWx1ZVwiKSl7dmFyIGQ9Yi50eXBlO2lmKCEoXCJzdWJtaXRcIiE9PWQmJlwicmVzZXRcIiE9PWR8fHZvaWQgMCE9PWIudmFsdWUmJm51bGwhPT1iLnZhbHVlKSlyZXR1cm47Yj1cIlwiK2EuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWU7Y3x8Yj09PWEudmFsdWV8fChhLnZhbHVlPWIpO2EuZGVmYXVsdFZhbHVlPWJ9Yz1hLm5hbWU7XCJcIiE9PWMmJihhLm5hbWU9XCJcIik7YS5kZWZhdWx0Q2hlY2tlZD0hYS5kZWZhdWx0Q2hlY2tlZDthLmRlZmF1bHRDaGVja2VkPSEhYS5fd3JhcHBlclN0YXRlLmluaXRpYWxDaGVja2VkO1wiXCIhPT1jJiYoYS5uYW1lPWMpfVxuZnVuY3Rpb24gemMoYSxiLGMpe2lmKFwibnVtYmVyXCIhPT1ifHxhLm93bmVyRG9jdW1lbnQuYWN0aXZlRWxlbWVudCE9PWEpbnVsbD09Yz9hLmRlZmF1bHRWYWx1ZT1cIlwiK2EuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWU6YS5kZWZhdWx0VmFsdWUhPT1cIlwiK2MmJihhLmRlZmF1bHRWYWx1ZT1cIlwiK2MpfXZhciBCYz17Y2hhbmdlOntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uQ2hhbmdlXCIsY2FwdHVyZWQ6XCJvbkNoYW5nZUNhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOlwiYmx1ciBjaGFuZ2UgY2xpY2sgZm9jdXMgaW5wdXQga2V5ZG93biBrZXl1cCBzZWxlY3Rpb25jaGFuZ2VcIi5zcGxpdChcIiBcIil9fTtmdW5jdGlvbiBDYyhhLGIsYyl7YT15LmdldFBvb2xlZChCYy5jaGFuZ2UsYSxiLGMpO2EudHlwZT1cImNoYW5nZVwiO0ViKGMpO1FhKGEpO3JldHVybiBhfXZhciBEYz1udWxsLEVjPW51bGw7ZnVuY3Rpb24gRmMoYSl7RGEoYSl9XG5mdW5jdGlvbiBHYyhhKXt2YXIgYj1KYShhKTtpZihTYihiKSlyZXR1cm4gYX1mdW5jdGlvbiBIYyhhLGIpe2lmKFwiY2hhbmdlXCI9PT1hKXJldHVybiBifXZhciBJYz0hMTtSYSYmKEljPU9iKFwiaW5wdXRcIikmJighZG9jdW1lbnQuZG9jdW1lbnRNb2RlfHw5PGRvY3VtZW50LmRvY3VtZW50TW9kZSkpO2Z1bmN0aW9uIEpjKCl7RGMmJihEYy5kZXRhY2hFdmVudChcIm9ucHJvcGVydHljaGFuZ2VcIixLYyksRWM9RGM9bnVsbCl9ZnVuY3Rpb24gS2MoYSl7XCJ2YWx1ZVwiPT09YS5wcm9wZXJ0eU5hbWUmJkdjKEVjKSYmKGE9Q2MoRWMsYSxOYihhKSksS2IoRmMsYSkpfWZ1bmN0aW9uIExjKGEsYixjKXtcImZvY3VzXCI9PT1hPyhKYygpLERjPWIsRWM9YyxEYy5hdHRhY2hFdmVudChcIm9ucHJvcGVydHljaGFuZ2VcIixLYykpOlwiYmx1clwiPT09YSYmSmMoKX1mdW5jdGlvbiBNYyhhKXtpZihcInNlbGVjdGlvbmNoYW5nZVwiPT09YXx8XCJrZXl1cFwiPT09YXx8XCJrZXlkb3duXCI9PT1hKXJldHVybiBHYyhFYyl9XG5mdW5jdGlvbiBOYyhhLGIpe2lmKFwiY2xpY2tcIj09PWEpcmV0dXJuIEdjKGIpfWZ1bmN0aW9uIE9jKGEsYil7aWYoXCJpbnB1dFwiPT09YXx8XCJjaGFuZ2VcIj09PWEpcmV0dXJuIEdjKGIpfVxudmFyIFBjPXtldmVudFR5cGVzOkJjLF9pc0lucHV0RXZlbnRTdXBwb3J0ZWQ6SWMsZXh0cmFjdEV2ZW50czpmdW5jdGlvbihhLGIsYyxkKXt2YXIgZT1iP0phKGIpOndpbmRvdyxmPXZvaWQgMCxnPXZvaWQgMCxoPWUubm9kZU5hbWUmJmUubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcInNlbGVjdFwiPT09aHx8XCJpbnB1dFwiPT09aCYmXCJmaWxlXCI9PT1lLnR5cGU/Zj1IYzpNYihlKT9JYz9mPU9jOihmPU1jLGc9TGMpOihoPWUubm9kZU5hbWUpJiZcImlucHV0XCI9PT1oLnRvTG93ZXJDYXNlKCkmJihcImNoZWNrYm94XCI9PT1lLnR5cGV8fFwicmFkaW9cIj09PWUudHlwZSkmJihmPU5jKTtpZihmJiYoZj1mKGEsYikpKXJldHVybiBDYyhmLGMsZCk7ZyYmZyhhLGUsYik7XCJibHVyXCI9PT1hJiYoYT1lLl93cmFwcGVyU3RhdGUpJiZhLmNvbnRyb2xsZWQmJlwibnVtYmVyXCI9PT1lLnR5cGUmJnpjKGUsXCJudW1iZXJcIixlLnZhbHVlKX19LFFjPXkuZXh0ZW5kKHt2aWV3Om51bGwsZGV0YWlsOm51bGx9KSxSYz17QWx0OlwiYWx0S2V5XCIsXG5Db250cm9sOlwiY3RybEtleVwiLE1ldGE6XCJtZXRhS2V5XCIsU2hpZnQ6XCJzaGlmdEtleVwifTtmdW5jdGlvbiBTYyhhKXt2YXIgYj10aGlzLm5hdGl2ZUV2ZW50O3JldHVybiBiLmdldE1vZGlmaWVyU3RhdGU/Yi5nZXRNb2RpZmllclN0YXRlKGEpOihhPVJjW2FdKT8hIWJbYV06ITF9ZnVuY3Rpb24gVGMoKXtyZXR1cm4gU2N9XG52YXIgVWM9MCxWYz0wLFdjPSExLFhjPSExLFljPVFjLmV4dGVuZCh7c2NyZWVuWDpudWxsLHNjcmVlblk6bnVsbCxjbGllbnRYOm51bGwsY2xpZW50WTpudWxsLHBhZ2VYOm51bGwscGFnZVk6bnVsbCxjdHJsS2V5Om51bGwsc2hpZnRLZXk6bnVsbCxhbHRLZXk6bnVsbCxtZXRhS2V5Om51bGwsZ2V0TW9kaWZpZXJTdGF0ZTpUYyxidXR0b246bnVsbCxidXR0b25zOm51bGwscmVsYXRlZFRhcmdldDpmdW5jdGlvbihhKXtyZXR1cm4gYS5yZWxhdGVkVGFyZ2V0fHwoYS5mcm9tRWxlbWVudD09PWEuc3JjRWxlbWVudD9hLnRvRWxlbWVudDphLmZyb21FbGVtZW50KX0sbW92ZW1lbnRYOmZ1bmN0aW9uKGEpe2lmKFwibW92ZW1lbnRYXCJpbiBhKXJldHVybiBhLm1vdmVtZW50WDt2YXIgYj1VYztVYz1hLnNjcmVlblg7cmV0dXJuIFdjP1wibW91c2Vtb3ZlXCI9PT1hLnR5cGU/YS5zY3JlZW5YLWI6MDooV2M9ITAsMCl9LG1vdmVtZW50WTpmdW5jdGlvbihhKXtpZihcIm1vdmVtZW50WVwiaW4gYSlyZXR1cm4gYS5tb3ZlbWVudFk7XG52YXIgYj1WYztWYz1hLnNjcmVlblk7cmV0dXJuIFhjP1wibW91c2Vtb3ZlXCI9PT1hLnR5cGU/YS5zY3JlZW5ZLWI6MDooWGM9ITAsMCl9fSksWmM9WWMuZXh0ZW5kKHtwb2ludGVySWQ6bnVsbCx3aWR0aDpudWxsLGhlaWdodDpudWxsLHByZXNzdXJlOm51bGwsdGFuZ2VudGlhbFByZXNzdXJlOm51bGwsdGlsdFg6bnVsbCx0aWx0WTpudWxsLHR3aXN0Om51bGwscG9pbnRlclR5cGU6bnVsbCxpc1ByaW1hcnk6bnVsbH0pLCRjPXttb3VzZUVudGVyOntyZWdpc3RyYXRpb25OYW1lOlwib25Nb3VzZUVudGVyXCIsZGVwZW5kZW5jaWVzOltcIm1vdXNlb3V0XCIsXCJtb3VzZW92ZXJcIl19LG1vdXNlTGVhdmU6e3JlZ2lzdHJhdGlvbk5hbWU6XCJvbk1vdXNlTGVhdmVcIixkZXBlbmRlbmNpZXM6W1wibW91c2VvdXRcIixcIm1vdXNlb3ZlclwiXX0scG9pbnRlckVudGVyOntyZWdpc3RyYXRpb25OYW1lOlwib25Qb2ludGVyRW50ZXJcIixkZXBlbmRlbmNpZXM6W1wicG9pbnRlcm91dFwiLFwicG9pbnRlcm92ZXJcIl19LHBvaW50ZXJMZWF2ZTp7cmVnaXN0cmF0aW9uTmFtZTpcIm9uUG9pbnRlckxlYXZlXCIsXG5kZXBlbmRlbmNpZXM6W1wicG9pbnRlcm91dFwiLFwicG9pbnRlcm92ZXJcIl19fSxhZD17ZXZlbnRUeXBlczokYyxleHRyYWN0RXZlbnRzOmZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPVwibW91c2VvdmVyXCI9PT1hfHxcInBvaW50ZXJvdmVyXCI9PT1hLGY9XCJtb3VzZW91dFwiPT09YXx8XCJwb2ludGVyb3V0XCI9PT1hO2lmKGUmJihjLnJlbGF0ZWRUYXJnZXR8fGMuZnJvbUVsZW1lbnQpfHwhZiYmIWUpcmV0dXJuIG51bGw7ZT1kLndpbmRvdz09PWQ/ZDooZT1kLm93bmVyRG9jdW1lbnQpP2UuZGVmYXVsdFZpZXd8fGUucGFyZW50V2luZG93OndpbmRvdztmPyhmPWIsYj0oYj1jLnJlbGF0ZWRUYXJnZXR8fGMudG9FbGVtZW50KT9IYShiKTpudWxsKTpmPW51bGw7aWYoZj09PWIpcmV0dXJuIG51bGw7dmFyIGc9dm9pZCAwLGg9dm9pZCAwLGw9dm9pZCAwLGs9dm9pZCAwO2lmKFwibW91c2VvdXRcIj09PWF8fFwibW91c2VvdmVyXCI9PT1hKWc9WWMsaD0kYy5tb3VzZUxlYXZlLGw9JGMubW91c2VFbnRlcixrPVwibW91c2VcIjtcbmVsc2UgaWYoXCJwb2ludGVyb3V0XCI9PT1hfHxcInBvaW50ZXJvdmVyXCI9PT1hKWc9WmMsaD0kYy5wb2ludGVyTGVhdmUsbD0kYy5wb2ludGVyRW50ZXIsaz1cInBvaW50ZXJcIjt2YXIgbT1udWxsPT1mP2U6SmEoZik7ZT1udWxsPT1iP2U6SmEoYik7YT1nLmdldFBvb2xlZChoLGYsYyxkKTthLnR5cGU9aytcImxlYXZlXCI7YS50YXJnZXQ9bTthLnJlbGF0ZWRUYXJnZXQ9ZTtjPWcuZ2V0UG9vbGVkKGwsYixjLGQpO2MudHlwZT1rK1wiZW50ZXJcIjtjLnRhcmdldD1lO2MucmVsYXRlZFRhcmdldD1tO2Q9YjtpZihmJiZkKWE6e2I9ZjtlPWQ7az0wO2ZvcihnPWI7ZztnPUxhKGcpKWsrKztnPTA7Zm9yKGw9ZTtsO2w9TGEobCkpZysrO2Zvcig7MDxrLWc7KWI9TGEoYiksay0tO2Zvcig7MDxnLWs7KWU9TGEoZSksZy0tO2Zvcig7ay0tOyl7aWYoYj09PWV8fGI9PT1lLmFsdGVybmF0ZSlicmVhayBhO2I9TGEoYik7ZT1MYShlKX1iPW51bGx9ZWxzZSBiPW51bGw7ZT1iO2ZvcihiPVtdO2YmJmYhPT1lOyl7az1cbmYuYWx0ZXJuYXRlO2lmKG51bGwhPT1rJiZrPT09ZSlicmVhaztiLnB1c2goZik7Zj1MYShmKX1mb3IoZj1bXTtkJiZkIT09ZTspe2s9ZC5hbHRlcm5hdGU7aWYobnVsbCE9PWsmJms9PT1lKWJyZWFrO2YucHVzaChkKTtkPUxhKGQpfWZvcihkPTA7ZDxiLmxlbmd0aDtkKyspT2EoYltkXSxcImJ1YmJsZWRcIixhKTtmb3IoZD1mLmxlbmd0aDswPGQtLTspT2EoZltkXSxcImNhcHR1cmVkXCIsYyk7cmV0dXJuW2EsY119fTtmdW5jdGlvbiBiZChhLGIpe3JldHVybiBhPT09YiYmKDAhPT1hfHwxL2E9PT0xL2IpfHxhIT09YSYmYiE9PWJ9dmFyIGNkPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5mdW5jdGlvbiBkZChhLGIpe2lmKGJkKGEsYikpcmV0dXJuITA7aWYoXCJvYmplY3RcIiE9PXR5cGVvZiBhfHxudWxsPT09YXx8XCJvYmplY3RcIiE9PXR5cGVvZiBifHxudWxsPT09YilyZXR1cm4hMTt2YXIgYz1PYmplY3Qua2V5cyhhKSxkPU9iamVjdC5rZXlzKGIpO2lmKGMubGVuZ3RoIT09ZC5sZW5ndGgpcmV0dXJuITE7Zm9yKGQ9MDtkPGMubGVuZ3RoO2QrKylpZighY2QuY2FsbChiLGNbZF0pfHwhYmQoYVtjW2RdXSxiW2NbZF1dKSlyZXR1cm4hMTtyZXR1cm4hMH1mdW5jdGlvbiBlZChhKXt2YXIgYj1hO2lmKGEuYWx0ZXJuYXRlKWZvcig7Yi5yZXR1cm47KWI9Yi5yZXR1cm47ZWxzZXtpZigwIT09KGIuZWZmZWN0VGFnJjIpKXJldHVybiAxO2Zvcig7Yi5yZXR1cm47KWlmKGI9Yi5yZXR1cm4sMCE9PShiLmVmZmVjdFRhZyYyKSlyZXR1cm4gMX1yZXR1cm4gMz09PWIudGFnPzI6M31mdW5jdGlvbiBmZChhKXsyIT09ZWQoYSk/eChcIjE4OFwiKTp2b2lkIDB9XG5mdW5jdGlvbiBnZChhKXt2YXIgYj1hLmFsdGVybmF0ZTtpZighYilyZXR1cm4gYj1lZChhKSwzPT09Yj94KFwiMTg4XCIpOnZvaWQgMCwxPT09Yj9udWxsOmE7Zm9yKHZhciBjPWEsZD1iOzspe3ZhciBlPWMucmV0dXJuLGY9ZT9lLmFsdGVybmF0ZTpudWxsO2lmKCFlfHwhZilicmVhaztpZihlLmNoaWxkPT09Zi5jaGlsZCl7Zm9yKHZhciBnPWUuY2hpbGQ7Zzspe2lmKGc9PT1jKXJldHVybiBmZChlKSxhO2lmKGc9PT1kKXJldHVybiBmZChlKSxiO2c9Zy5zaWJsaW5nfXgoXCIxODhcIil9aWYoYy5yZXR1cm4hPT1kLnJldHVybiljPWUsZD1mO2Vsc2V7Zz0hMTtmb3IodmFyIGg9ZS5jaGlsZDtoOyl7aWYoaD09PWMpe2c9ITA7Yz1lO2Q9ZjticmVha31pZihoPT09ZCl7Zz0hMDtkPWU7Yz1mO2JyZWFrfWg9aC5zaWJsaW5nfWlmKCFnKXtmb3IoaD1mLmNoaWxkO2g7KXtpZihoPT09Yyl7Zz0hMDtjPWY7ZD1lO2JyZWFrfWlmKGg9PT1kKXtnPSEwO2Q9ZjtjPWU7YnJlYWt9aD1oLnNpYmxpbmd9Zz9cbnZvaWQgMDp4KFwiMTg5XCIpfX1jLmFsdGVybmF0ZSE9PWQ/eChcIjE5MFwiKTp2b2lkIDB9MyE9PWMudGFnP3goXCIxODhcIik6dm9pZCAwO3JldHVybiBjLnN0YXRlTm9kZS5jdXJyZW50PT09Yz9hOmJ9ZnVuY3Rpb24gaGQoYSl7YT1nZChhKTtpZighYSlyZXR1cm4gbnVsbDtmb3IodmFyIGI9YTs7KXtpZig1PT09Yi50YWd8fDY9PT1iLnRhZylyZXR1cm4gYjtpZihiLmNoaWxkKWIuY2hpbGQucmV0dXJuPWIsYj1iLmNoaWxkO2Vsc2V7aWYoYj09PWEpYnJlYWs7Zm9yKDshYi5zaWJsaW5nOyl7aWYoIWIucmV0dXJufHxiLnJldHVybj09PWEpcmV0dXJuIG51bGw7Yj1iLnJldHVybn1iLnNpYmxpbmcucmV0dXJuPWIucmV0dXJuO2I9Yi5zaWJsaW5nfX1yZXR1cm4gbnVsbH1cbnZhciBpZD15LmV4dGVuZCh7YW5pbWF0aW9uTmFtZTpudWxsLGVsYXBzZWRUaW1lOm51bGwscHNldWRvRWxlbWVudDpudWxsfSksamQ9eS5leHRlbmQoe2NsaXBib2FyZERhdGE6ZnVuY3Rpb24oYSl7cmV0dXJuXCJjbGlwYm9hcmREYXRhXCJpbiBhP2EuY2xpcGJvYXJkRGF0YTp3aW5kb3cuY2xpcGJvYXJkRGF0YX19KSxrZD1RYy5leHRlbmQoe3JlbGF0ZWRUYXJnZXQ6bnVsbH0pO2Z1bmN0aW9uIGxkKGEpe3ZhciBiPWEua2V5Q29kZTtcImNoYXJDb2RlXCJpbiBhPyhhPWEuY2hhckNvZGUsMD09PWEmJjEzPT09YiYmKGE9MTMpKTphPWI7MTA9PT1hJiYoYT0xMyk7cmV0dXJuIDMyPD1hfHwxMz09PWE/YTowfVxudmFyIG1kPXtFc2M6XCJFc2NhcGVcIixTcGFjZWJhcjpcIiBcIixMZWZ0OlwiQXJyb3dMZWZ0XCIsVXA6XCJBcnJvd1VwXCIsUmlnaHQ6XCJBcnJvd1JpZ2h0XCIsRG93bjpcIkFycm93RG93blwiLERlbDpcIkRlbGV0ZVwiLFdpbjpcIk9TXCIsTWVudTpcIkNvbnRleHRNZW51XCIsQXBwczpcIkNvbnRleHRNZW51XCIsU2Nyb2xsOlwiU2Nyb2xsTG9ja1wiLE1velByaW50YWJsZUtleTpcIlVuaWRlbnRpZmllZFwifSxuZD17ODpcIkJhY2tzcGFjZVwiLDk6XCJUYWJcIiwxMjpcIkNsZWFyXCIsMTM6XCJFbnRlclwiLDE2OlwiU2hpZnRcIiwxNzpcIkNvbnRyb2xcIiwxODpcIkFsdFwiLDE5OlwiUGF1c2VcIiwyMDpcIkNhcHNMb2NrXCIsMjc6XCJFc2NhcGVcIiwzMjpcIiBcIiwzMzpcIlBhZ2VVcFwiLDM0OlwiUGFnZURvd25cIiwzNTpcIkVuZFwiLDM2OlwiSG9tZVwiLDM3OlwiQXJyb3dMZWZ0XCIsMzg6XCJBcnJvd1VwXCIsMzk6XCJBcnJvd1JpZ2h0XCIsNDA6XCJBcnJvd0Rvd25cIiw0NTpcIkluc2VydFwiLDQ2OlwiRGVsZXRlXCIsMTEyOlwiRjFcIiwxMTM6XCJGMlwiLDExNDpcIkYzXCIsMTE1OlwiRjRcIixcbjExNjpcIkY1XCIsMTE3OlwiRjZcIiwxMTg6XCJGN1wiLDExOTpcIkY4XCIsMTIwOlwiRjlcIiwxMjE6XCJGMTBcIiwxMjI6XCJGMTFcIiwxMjM6XCJGMTJcIiwxNDQ6XCJOdW1Mb2NrXCIsMTQ1OlwiU2Nyb2xsTG9ja1wiLDIyNDpcIk1ldGFcIn0sb2Q9UWMuZXh0ZW5kKHtrZXk6ZnVuY3Rpb24oYSl7aWYoYS5rZXkpe3ZhciBiPW1kW2Eua2V5XXx8YS5rZXk7aWYoXCJVbmlkZW50aWZpZWRcIiE9PWIpcmV0dXJuIGJ9cmV0dXJuXCJrZXlwcmVzc1wiPT09YS50eXBlPyhhPWxkKGEpLDEzPT09YT9cIkVudGVyXCI6U3RyaW5nLmZyb21DaGFyQ29kZShhKSk6XCJrZXlkb3duXCI9PT1hLnR5cGV8fFwia2V5dXBcIj09PWEudHlwZT9uZFthLmtleUNvZGVdfHxcIlVuaWRlbnRpZmllZFwiOlwiXCJ9LGxvY2F0aW9uOm51bGwsY3RybEtleTpudWxsLHNoaWZ0S2V5Om51bGwsYWx0S2V5Om51bGwsbWV0YUtleTpudWxsLHJlcGVhdDpudWxsLGxvY2FsZTpudWxsLGdldE1vZGlmaWVyU3RhdGU6VGMsY2hhckNvZGU6ZnVuY3Rpb24oYSl7cmV0dXJuXCJrZXlwcmVzc1wiPT09XG5hLnR5cGU/bGQoYSk6MH0sa2V5Q29kZTpmdW5jdGlvbihhKXtyZXR1cm5cImtleWRvd25cIj09PWEudHlwZXx8XCJrZXl1cFwiPT09YS50eXBlP2Eua2V5Q29kZTowfSx3aGljaDpmdW5jdGlvbihhKXtyZXR1cm5cImtleXByZXNzXCI9PT1hLnR5cGU/bGQoYSk6XCJrZXlkb3duXCI9PT1hLnR5cGV8fFwia2V5dXBcIj09PWEudHlwZT9hLmtleUNvZGU6MH19KSxwZD1ZYy5leHRlbmQoe2RhdGFUcmFuc2ZlcjpudWxsfSkscWQ9UWMuZXh0ZW5kKHt0b3VjaGVzOm51bGwsdGFyZ2V0VG91Y2hlczpudWxsLGNoYW5nZWRUb3VjaGVzOm51bGwsYWx0S2V5Om51bGwsbWV0YUtleTpudWxsLGN0cmxLZXk6bnVsbCxzaGlmdEtleTpudWxsLGdldE1vZGlmaWVyU3RhdGU6VGN9KSxyZD15LmV4dGVuZCh7cHJvcGVydHlOYW1lOm51bGwsZWxhcHNlZFRpbWU6bnVsbCxwc2V1ZG9FbGVtZW50Om51bGx9KSxzZD1ZYy5leHRlbmQoe2RlbHRhWDpmdW5jdGlvbihhKXtyZXR1cm5cImRlbHRhWFwiaW4gYT9hLmRlbHRhWDpcIndoZWVsRGVsdGFYXCJpblxuYT8tYS53aGVlbERlbHRhWDowfSxkZWx0YVk6ZnVuY3Rpb24oYSl7cmV0dXJuXCJkZWx0YVlcImluIGE/YS5kZWx0YVk6XCJ3aGVlbERlbHRhWVwiaW4gYT8tYS53aGVlbERlbHRhWTpcIndoZWVsRGVsdGFcImluIGE/LWEud2hlZWxEZWx0YTowfSxkZWx0YVo6bnVsbCxkZWx0YU1vZGU6bnVsbH0pLHRkPVtbXCJhYm9ydFwiLFwiYWJvcnRcIl0sW1hhLFwiYW5pbWF0aW9uRW5kXCJdLFtZYSxcImFuaW1hdGlvbkl0ZXJhdGlvblwiXSxbWmEsXCJhbmltYXRpb25TdGFydFwiXSxbXCJjYW5wbGF5XCIsXCJjYW5QbGF5XCJdLFtcImNhbnBsYXl0aHJvdWdoXCIsXCJjYW5QbGF5VGhyb3VnaFwiXSxbXCJkcmFnXCIsXCJkcmFnXCJdLFtcImRyYWdlbnRlclwiLFwiZHJhZ0VudGVyXCJdLFtcImRyYWdleGl0XCIsXCJkcmFnRXhpdFwiXSxbXCJkcmFnbGVhdmVcIixcImRyYWdMZWF2ZVwiXSxbXCJkcmFnb3ZlclwiLFwiZHJhZ092ZXJcIl0sW1wiZHVyYXRpb25jaGFuZ2VcIixcImR1cmF0aW9uQ2hhbmdlXCJdLFtcImVtcHRpZWRcIixcImVtcHRpZWRcIl0sW1wiZW5jcnlwdGVkXCIsXCJlbmNyeXB0ZWRcIl0sXG5bXCJlbmRlZFwiLFwiZW5kZWRcIl0sW1wiZXJyb3JcIixcImVycm9yXCJdLFtcImdvdHBvaW50ZXJjYXB0dXJlXCIsXCJnb3RQb2ludGVyQ2FwdHVyZVwiXSxbXCJsb2FkXCIsXCJsb2FkXCJdLFtcImxvYWRlZGRhdGFcIixcImxvYWRlZERhdGFcIl0sW1wibG9hZGVkbWV0YWRhdGFcIixcImxvYWRlZE1ldGFkYXRhXCJdLFtcImxvYWRzdGFydFwiLFwibG9hZFN0YXJ0XCJdLFtcImxvc3Rwb2ludGVyY2FwdHVyZVwiLFwibG9zdFBvaW50ZXJDYXB0dXJlXCJdLFtcIm1vdXNlbW92ZVwiLFwibW91c2VNb3ZlXCJdLFtcIm1vdXNlb3V0XCIsXCJtb3VzZU91dFwiXSxbXCJtb3VzZW92ZXJcIixcIm1vdXNlT3ZlclwiXSxbXCJwbGF5aW5nXCIsXCJwbGF5aW5nXCJdLFtcInBvaW50ZXJtb3ZlXCIsXCJwb2ludGVyTW92ZVwiXSxbXCJwb2ludGVyb3V0XCIsXCJwb2ludGVyT3V0XCJdLFtcInBvaW50ZXJvdmVyXCIsXCJwb2ludGVyT3ZlclwiXSxbXCJwcm9ncmVzc1wiLFwicHJvZ3Jlc3NcIl0sW1wic2Nyb2xsXCIsXCJzY3JvbGxcIl0sW1wic2Vla2luZ1wiLFwic2Vla2luZ1wiXSxbXCJzdGFsbGVkXCIsXCJzdGFsbGVkXCJdLFxuW1wic3VzcGVuZFwiLFwic3VzcGVuZFwiXSxbXCJ0aW1ldXBkYXRlXCIsXCJ0aW1lVXBkYXRlXCJdLFtcInRvZ2dsZVwiLFwidG9nZ2xlXCJdLFtcInRvdWNobW92ZVwiLFwidG91Y2hNb3ZlXCJdLFskYSxcInRyYW5zaXRpb25FbmRcIl0sW1wid2FpdGluZ1wiLFwid2FpdGluZ1wiXSxbXCJ3aGVlbFwiLFwid2hlZWxcIl1dLHVkPXt9LHZkPXt9O2Z1bmN0aW9uIHdkKGEsYil7dmFyIGM9YVswXTthPWFbMV07dmFyIGQ9XCJvblwiKyhhWzBdLnRvVXBwZXJDYXNlKCkrYS5zbGljZSgxKSk7Yj17cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6ZCxjYXB0dXJlZDpkK1wiQ2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6W2NdLGlzSW50ZXJhY3RpdmU6Yn07dWRbYV09Yjt2ZFtjXT1ifVxuW1tcImJsdXJcIixcImJsdXJcIl0sW1wiY2FuY2VsXCIsXCJjYW5jZWxcIl0sW1wiY2xpY2tcIixcImNsaWNrXCJdLFtcImNsb3NlXCIsXCJjbG9zZVwiXSxbXCJjb250ZXh0bWVudVwiLFwiY29udGV4dE1lbnVcIl0sW1wiY29weVwiLFwiY29weVwiXSxbXCJjdXRcIixcImN1dFwiXSxbXCJhdXhjbGlja1wiLFwiYXV4Q2xpY2tcIl0sW1wiZGJsY2xpY2tcIixcImRvdWJsZUNsaWNrXCJdLFtcImRyYWdlbmRcIixcImRyYWdFbmRcIl0sW1wiZHJhZ3N0YXJ0XCIsXCJkcmFnU3RhcnRcIl0sW1wiZHJvcFwiLFwiZHJvcFwiXSxbXCJmb2N1c1wiLFwiZm9jdXNcIl0sW1wiaW5wdXRcIixcImlucHV0XCJdLFtcImludmFsaWRcIixcImludmFsaWRcIl0sW1wia2V5ZG93blwiLFwia2V5RG93blwiXSxbXCJrZXlwcmVzc1wiLFwia2V5UHJlc3NcIl0sW1wia2V5dXBcIixcImtleVVwXCJdLFtcIm1vdXNlZG93blwiLFwibW91c2VEb3duXCJdLFtcIm1vdXNldXBcIixcIm1vdXNlVXBcIl0sW1wicGFzdGVcIixcInBhc3RlXCJdLFtcInBhdXNlXCIsXCJwYXVzZVwiXSxbXCJwbGF5XCIsXCJwbGF5XCJdLFtcInBvaW50ZXJjYW5jZWxcIixcInBvaW50ZXJDYW5jZWxcIl0sXG5bXCJwb2ludGVyZG93blwiLFwicG9pbnRlckRvd25cIl0sW1wicG9pbnRlcnVwXCIsXCJwb2ludGVyVXBcIl0sW1wicmF0ZWNoYW5nZVwiLFwicmF0ZUNoYW5nZVwiXSxbXCJyZXNldFwiLFwicmVzZXRcIl0sW1wic2Vla2VkXCIsXCJzZWVrZWRcIl0sW1wic3VibWl0XCIsXCJzdWJtaXRcIl0sW1widG91Y2hjYW5jZWxcIixcInRvdWNoQ2FuY2VsXCJdLFtcInRvdWNoZW5kXCIsXCJ0b3VjaEVuZFwiXSxbXCJ0b3VjaHN0YXJ0XCIsXCJ0b3VjaFN0YXJ0XCJdLFtcInZvbHVtZWNoYW5nZVwiLFwidm9sdW1lQ2hhbmdlXCJdXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3dkKGEsITApfSk7dGQuZm9yRWFjaChmdW5jdGlvbihhKXt3ZChhLCExKX0pO1xudmFyIHhkPXtldmVudFR5cGVzOnVkLGlzSW50ZXJhY3RpdmVUb3BMZXZlbEV2ZW50VHlwZTpmdW5jdGlvbihhKXthPXZkW2FdO3JldHVybiB2b2lkIDAhPT1hJiYhMD09PWEuaXNJbnRlcmFjdGl2ZX0sZXh0cmFjdEV2ZW50czpmdW5jdGlvbihhLGIsYyxkKXt2YXIgZT12ZFthXTtpZighZSlyZXR1cm4gbnVsbDtzd2l0Y2goYSl7Y2FzZSBcImtleXByZXNzXCI6aWYoMD09PWxkKGMpKXJldHVybiBudWxsO2Nhc2UgXCJrZXlkb3duXCI6Y2FzZSBcImtleXVwXCI6YT1vZDticmVhaztjYXNlIFwiYmx1clwiOmNhc2UgXCJmb2N1c1wiOmE9a2Q7YnJlYWs7Y2FzZSBcImNsaWNrXCI6aWYoMj09PWMuYnV0dG9uKXJldHVybiBudWxsO2Nhc2UgXCJhdXhjbGlja1wiOmNhc2UgXCJkYmxjbGlja1wiOmNhc2UgXCJtb3VzZWRvd25cIjpjYXNlIFwibW91c2Vtb3ZlXCI6Y2FzZSBcIm1vdXNldXBcIjpjYXNlIFwibW91c2VvdXRcIjpjYXNlIFwibW91c2VvdmVyXCI6Y2FzZSBcImNvbnRleHRtZW51XCI6YT1ZYzticmVhaztjYXNlIFwiZHJhZ1wiOmNhc2UgXCJkcmFnZW5kXCI6Y2FzZSBcImRyYWdlbnRlclwiOmNhc2UgXCJkcmFnZXhpdFwiOmNhc2UgXCJkcmFnbGVhdmVcIjpjYXNlIFwiZHJhZ292ZXJcIjpjYXNlIFwiZHJhZ3N0YXJ0XCI6Y2FzZSBcImRyb3BcIjphPVxucGQ7YnJlYWs7Y2FzZSBcInRvdWNoY2FuY2VsXCI6Y2FzZSBcInRvdWNoZW5kXCI6Y2FzZSBcInRvdWNobW92ZVwiOmNhc2UgXCJ0b3VjaHN0YXJ0XCI6YT1xZDticmVhaztjYXNlIFhhOmNhc2UgWWE6Y2FzZSBaYTphPWlkO2JyZWFrO2Nhc2UgJGE6YT1yZDticmVhaztjYXNlIFwic2Nyb2xsXCI6YT1RYzticmVhaztjYXNlIFwid2hlZWxcIjphPXNkO2JyZWFrO2Nhc2UgXCJjb3B5XCI6Y2FzZSBcImN1dFwiOmNhc2UgXCJwYXN0ZVwiOmE9amQ7YnJlYWs7Y2FzZSBcImdvdHBvaW50ZXJjYXB0dXJlXCI6Y2FzZSBcImxvc3Rwb2ludGVyY2FwdHVyZVwiOmNhc2UgXCJwb2ludGVyY2FuY2VsXCI6Y2FzZSBcInBvaW50ZXJkb3duXCI6Y2FzZSBcInBvaW50ZXJtb3ZlXCI6Y2FzZSBcInBvaW50ZXJvdXRcIjpjYXNlIFwicG9pbnRlcm92ZXJcIjpjYXNlIFwicG9pbnRlcnVwXCI6YT1aYzticmVhaztkZWZhdWx0OmE9eX1iPWEuZ2V0UG9vbGVkKGUsYixjLGQpO1FhKGIpO3JldHVybiBifX0seWQ9eGQuaXNJbnRlcmFjdGl2ZVRvcExldmVsRXZlbnRUeXBlLFxuemQ9W107ZnVuY3Rpb24gQWQoYSl7dmFyIGI9YS50YXJnZXRJbnN0LGM9Yjtkb3tpZighYyl7YS5hbmNlc3RvcnMucHVzaChjKTticmVha312YXIgZDtmb3IoZD1jO2QucmV0dXJuOylkPWQucmV0dXJuO2Q9MyE9PWQudGFnP251bGw6ZC5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztpZighZClicmVhazthLmFuY2VzdG9ycy5wdXNoKGMpO2M9SGEoZCl9d2hpbGUoYyk7Zm9yKGM9MDtjPGEuYW5jZXN0b3JzLmxlbmd0aDtjKyspe2I9YS5hbmNlc3RvcnNbY107dmFyIGU9TmIoYS5uYXRpdmVFdmVudCk7ZD1hLnRvcExldmVsVHlwZTtmb3IodmFyIGY9YS5uYXRpdmVFdmVudCxnPW51bGwsaD0wO2g8b2EubGVuZ3RoO2grKyl7dmFyIGw9b2FbaF07bCYmKGw9bC5leHRyYWN0RXZlbnRzKGQsYixmLGUpKSYmKGc9eGEoZyxsKSl9RGEoZyl9fXZhciBCZD0hMDtcbmZ1bmN0aW9uIEUoYSxiKXtpZighYilyZXR1cm4gbnVsbDt2YXIgYz0oeWQoYSk/Q2Q6RGQpLmJpbmQobnVsbCxhKTtiLmFkZEV2ZW50TGlzdGVuZXIoYSxjLCExKX1mdW5jdGlvbiBFZChhLGIpe2lmKCFiKXJldHVybiBudWxsO3ZhciBjPSh5ZChhKT9DZDpEZCkuYmluZChudWxsLGEpO2IuYWRkRXZlbnRMaXN0ZW5lcihhLGMsITApfWZ1bmN0aW9uIENkKGEsYil7SGIoRGQsYSxiKX1cbmZ1bmN0aW9uIERkKGEsYil7aWYoQmQpe3ZhciBjPU5iKGIpO2M9SGEoYyk7bnVsbD09PWN8fFwibnVtYmVyXCIhPT10eXBlb2YgYy50YWd8fDI9PT1lZChjKXx8KGM9bnVsbCk7aWYoemQubGVuZ3RoKXt2YXIgZD16ZC5wb3AoKTtkLnRvcExldmVsVHlwZT1hO2QubmF0aXZlRXZlbnQ9YjtkLnRhcmdldEluc3Q9YzthPWR9ZWxzZSBhPXt0b3BMZXZlbFR5cGU6YSxuYXRpdmVFdmVudDpiLHRhcmdldEluc3Q6YyxhbmNlc3RvcnM6W119O3RyeXtLYihBZCxhKX1maW5hbGx5e2EudG9wTGV2ZWxUeXBlPW51bGwsYS5uYXRpdmVFdmVudD1udWxsLGEudGFyZ2V0SW5zdD1udWxsLGEuYW5jZXN0b3JzLmxlbmd0aD0wLDEwPnpkLmxlbmd0aCYmemQucHVzaChhKX19fXZhciBGZD17fSxHZD0wLEhkPVwiX3JlYWN0TGlzdGVuZXJzSURcIisoXCJcIitNYXRoLnJhbmRvbSgpKS5zbGljZSgyKTtcbmZ1bmN0aW9uIElkKGEpe09iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChhLEhkKXx8KGFbSGRdPUdkKyssRmRbYVtIZF1dPXt9KTtyZXR1cm4gRmRbYVtIZF1dfWZ1bmN0aW9uIEpkKGEpe2E9YXx8KFwidW5kZWZpbmVkXCIhPT10eXBlb2YgZG9jdW1lbnQ/ZG9jdW1lbnQ6dm9pZCAwKTtpZihcInVuZGVmaW5lZFwiPT09dHlwZW9mIGEpcmV0dXJuIG51bGw7dHJ5e3JldHVybiBhLmFjdGl2ZUVsZW1lbnR8fGEuYm9keX1jYXRjaChiKXtyZXR1cm4gYS5ib2R5fX1mdW5jdGlvbiBLZChhKXtmb3IoO2EmJmEuZmlyc3RDaGlsZDspYT1hLmZpcnN0Q2hpbGQ7cmV0dXJuIGF9XG5mdW5jdGlvbiBMZChhLGIpe3ZhciBjPUtkKGEpO2E9MDtmb3IodmFyIGQ7Yzspe2lmKDM9PT1jLm5vZGVUeXBlKXtkPWErYy50ZXh0Q29udGVudC5sZW5ndGg7aWYoYTw9YiYmZD49YilyZXR1cm57bm9kZTpjLG9mZnNldDpiLWF9O2E9ZH1hOntmb3IoO2M7KXtpZihjLm5leHRTaWJsaW5nKXtjPWMubmV4dFNpYmxpbmc7YnJlYWsgYX1jPWMucGFyZW50Tm9kZX1jPXZvaWQgMH1jPUtkKGMpfX1mdW5jdGlvbiBNZChhLGIpe3JldHVybiBhJiZiP2E9PT1iPyEwOmEmJjM9PT1hLm5vZGVUeXBlPyExOmImJjM9PT1iLm5vZGVUeXBlP01kKGEsYi5wYXJlbnROb2RlKTpcImNvbnRhaW5zXCJpbiBhP2EuY29udGFpbnMoYik6YS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbj8hIShhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKGIpJjE2KTohMTohMX1cbmZ1bmN0aW9uIE5kKCl7Zm9yKHZhciBhPXdpbmRvdyxiPUpkKCk7YiBpbnN0YW5jZW9mIGEuSFRNTElGcmFtZUVsZW1lbnQ7KXt0cnl7YT1iLmNvbnRlbnREb2N1bWVudC5kZWZhdWx0Vmlld31jYXRjaChjKXticmVha31iPUpkKGEuZG9jdW1lbnQpfXJldHVybiBifWZ1bmN0aW9uIE9kKGEpe3ZhciBiPWEmJmEubm9kZU5hbWUmJmEubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtyZXR1cm4gYiYmKFwiaW5wdXRcIj09PWImJihcInRleHRcIj09PWEudHlwZXx8XCJzZWFyY2hcIj09PWEudHlwZXx8XCJ0ZWxcIj09PWEudHlwZXx8XCJ1cmxcIj09PWEudHlwZXx8XCJwYXNzd29yZFwiPT09YS50eXBlKXx8XCJ0ZXh0YXJlYVwiPT09Ynx8XCJ0cnVlXCI9PT1hLmNvbnRlbnRFZGl0YWJsZSl9XG5mdW5jdGlvbiBQZCgpe3ZhciBhPU5kKCk7aWYoT2QoYSkpe2lmKFwic2VsZWN0aW9uU3RhcnRcImluIGEpdmFyIGI9e3N0YXJ0OmEuc2VsZWN0aW9uU3RhcnQsZW5kOmEuc2VsZWN0aW9uRW5kfTtlbHNlIGE6e2I9KGI9YS5vd25lckRvY3VtZW50KSYmYi5kZWZhdWx0Vmlld3x8d2luZG93O3ZhciBjPWIuZ2V0U2VsZWN0aW9uJiZiLmdldFNlbGVjdGlvbigpO2lmKGMmJjAhPT1jLnJhbmdlQ291bnQpe2I9Yy5hbmNob3JOb2RlO3ZhciBkPWMuYW5jaG9yT2Zmc2V0LGU9Yy5mb2N1c05vZGU7Yz1jLmZvY3VzT2Zmc2V0O3RyeXtiLm5vZGVUeXBlLGUubm9kZVR5cGV9Y2F0Y2goQSl7Yj1udWxsO2JyZWFrIGF9dmFyIGY9MCxnPS0xLGg9LTEsbD0wLGs9MCxtPWEscD1udWxsO2I6Zm9yKDs7KXtmb3IodmFyIHQ7Oyl7bSE9PWJ8fDAhPT1kJiYzIT09bS5ub2RlVHlwZXx8KGc9ZitkKTttIT09ZXx8MCE9PWMmJjMhPT1tLm5vZGVUeXBlfHwoaD1mK2MpOzM9PT1tLm5vZGVUeXBlJiYoZis9bS5ub2RlVmFsdWUubGVuZ3RoKTtcbmlmKG51bGw9PT0odD1tLmZpcnN0Q2hpbGQpKWJyZWFrO3A9bTttPXR9Zm9yKDs7KXtpZihtPT09YSlicmVhayBiO3A9PT1iJiYrK2w9PT1kJiYoZz1mKTtwPT09ZSYmKytrPT09YyYmKGg9Zik7aWYobnVsbCE9PSh0PW0ubmV4dFNpYmxpbmcpKWJyZWFrO209cDtwPW0ucGFyZW50Tm9kZX1tPXR9Yj0tMT09PWd8fC0xPT09aD9udWxsOntzdGFydDpnLGVuZDpofX1lbHNlIGI9bnVsbH1iPWJ8fHtzdGFydDowLGVuZDowfX1lbHNlIGI9bnVsbDtyZXR1cm57Zm9jdXNlZEVsZW06YSxzZWxlY3Rpb25SYW5nZTpifX1cbmZ1bmN0aW9uIFFkKGEpe3ZhciBiPU5kKCksYz1hLmZvY3VzZWRFbGVtLGQ9YS5zZWxlY3Rpb25SYW5nZTtpZihiIT09YyYmYyYmYy5vd25lckRvY3VtZW50JiZNZChjLm93bmVyRG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LGMpKXtpZihudWxsIT09ZCYmT2QoYykpaWYoYj1kLnN0YXJ0LGE9ZC5lbmQsdm9pZCAwPT09YSYmKGE9YiksXCJzZWxlY3Rpb25TdGFydFwiaW4gYyljLnNlbGVjdGlvblN0YXJ0PWIsYy5zZWxlY3Rpb25FbmQ9TWF0aC5taW4oYSxjLnZhbHVlLmxlbmd0aCk7ZWxzZSBpZihhPShiPWMub3duZXJEb2N1bWVudHx8ZG9jdW1lbnQpJiZiLmRlZmF1bHRWaWV3fHx3aW5kb3csYS5nZXRTZWxlY3Rpb24pe2E9YS5nZXRTZWxlY3Rpb24oKTt2YXIgZT1jLnRleHRDb250ZW50Lmxlbmd0aCxmPU1hdGgubWluKGQuc3RhcnQsZSk7ZD12b2lkIDA9PT1kLmVuZD9mOk1hdGgubWluKGQuZW5kLGUpOyFhLmV4dGVuZCYmZj5kJiYoZT1kLGQ9ZixmPWUpO2U9TGQoYyxmKTt2YXIgZz1MZChjLFxuZCk7ZSYmZyYmKDEhPT1hLnJhbmdlQ291bnR8fGEuYW5jaG9yTm9kZSE9PWUubm9kZXx8YS5hbmNob3JPZmZzZXQhPT1lLm9mZnNldHx8YS5mb2N1c05vZGUhPT1nLm5vZGV8fGEuZm9jdXNPZmZzZXQhPT1nLm9mZnNldCkmJihiPWIuY3JlYXRlUmFuZ2UoKSxiLnNldFN0YXJ0KGUubm9kZSxlLm9mZnNldCksYS5yZW1vdmVBbGxSYW5nZXMoKSxmPmQ/KGEuYWRkUmFuZ2UoYiksYS5leHRlbmQoZy5ub2RlLGcub2Zmc2V0KSk6KGIuc2V0RW5kKGcubm9kZSxnLm9mZnNldCksYS5hZGRSYW5nZShiKSkpfWI9W107Zm9yKGE9YzthPWEucGFyZW50Tm9kZTspMT09PWEubm9kZVR5cGUmJmIucHVzaCh7ZWxlbWVudDphLGxlZnQ6YS5zY3JvbGxMZWZ0LHRvcDphLnNjcm9sbFRvcH0pO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBjLmZvY3VzJiZjLmZvY3VzKCk7Zm9yKGM9MDtjPGIubGVuZ3RoO2MrKylhPWJbY10sYS5lbGVtZW50LnNjcm9sbExlZnQ9YS5sZWZ0LGEuZWxlbWVudC5zY3JvbGxUb3A9YS50b3B9fVxudmFyIFJkPVJhJiZcImRvY3VtZW50TW9kZVwiaW4gZG9jdW1lbnQmJjExPj1kb2N1bWVudC5kb2N1bWVudE1vZGUsU2Q9e3NlbGVjdDp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvblNlbGVjdFwiLGNhcHR1cmVkOlwib25TZWxlY3RDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpcImJsdXIgY29udGV4dG1lbnUgZHJhZ2VuZCBmb2N1cyBrZXlkb3duIGtleXVwIG1vdXNlZG93biBtb3VzZXVwIHNlbGVjdGlvbmNoYW5nZVwiLnNwbGl0KFwiIFwiKX19LFRkPW51bGwsVWQ9bnVsbCxWZD1udWxsLFdkPSExO1xuZnVuY3Rpb24gWGQoYSxiKXt2YXIgYz1iLndpbmRvdz09PWI/Yi5kb2N1bWVudDo5PT09Yi5ub2RlVHlwZT9iOmIub3duZXJEb2N1bWVudDtpZihXZHx8bnVsbD09VGR8fFRkIT09SmQoYykpcmV0dXJuIG51bGw7Yz1UZDtcInNlbGVjdGlvblN0YXJ0XCJpbiBjJiZPZChjKT9jPXtzdGFydDpjLnNlbGVjdGlvblN0YXJ0LGVuZDpjLnNlbGVjdGlvbkVuZH06KGM9KGMub3duZXJEb2N1bWVudCYmYy5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3fHx3aW5kb3cpLmdldFNlbGVjdGlvbigpLGM9e2FuY2hvck5vZGU6Yy5hbmNob3JOb2RlLGFuY2hvck9mZnNldDpjLmFuY2hvck9mZnNldCxmb2N1c05vZGU6Yy5mb2N1c05vZGUsZm9jdXNPZmZzZXQ6Yy5mb2N1c09mZnNldH0pO3JldHVybiBWZCYmZGQoVmQsYyk/bnVsbDooVmQ9YyxhPXkuZ2V0UG9vbGVkKFNkLnNlbGVjdCxVZCxhLGIpLGEudHlwZT1cInNlbGVjdFwiLGEudGFyZ2V0PVRkLFFhKGEpLGEpfVxudmFyIFlkPXtldmVudFR5cGVzOlNkLGV4dHJhY3RFdmVudHM6ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9ZC53aW5kb3c9PT1kP2QuZG9jdW1lbnQ6OT09PWQubm9kZVR5cGU/ZDpkLm93bmVyRG9jdW1lbnQsZjtpZighKGY9IWUpKXthOntlPUlkKGUpO2Y9c2Eub25TZWxlY3Q7Zm9yKHZhciBnPTA7ZzxmLmxlbmd0aDtnKyspe3ZhciBoPWZbZ107aWYoIWUuaGFzT3duUHJvcGVydHkoaCl8fCFlW2hdKXtlPSExO2JyZWFrIGF9fWU9ITB9Zj0hZX1pZihmKXJldHVybiBudWxsO2U9Yj9KYShiKTp3aW5kb3c7c3dpdGNoKGEpe2Nhc2UgXCJmb2N1c1wiOmlmKE1iKGUpfHxcInRydWVcIj09PWUuY29udGVudEVkaXRhYmxlKVRkPWUsVWQ9YixWZD1udWxsO2JyZWFrO2Nhc2UgXCJibHVyXCI6VmQ9VWQ9VGQ9bnVsbDticmVhaztjYXNlIFwibW91c2Vkb3duXCI6V2Q9ITA7YnJlYWs7Y2FzZSBcImNvbnRleHRtZW51XCI6Y2FzZSBcIm1vdXNldXBcIjpjYXNlIFwiZHJhZ2VuZFwiOnJldHVybiBXZD0hMSxYZChjLGQpO2Nhc2UgXCJzZWxlY3Rpb25jaGFuZ2VcIjppZihSZClicmVhaztcbmNhc2UgXCJrZXlkb3duXCI6Y2FzZSBcImtleXVwXCI6cmV0dXJuIFhkKGMsZCl9cmV0dXJuIG51bGx9fTtCYS5pbmplY3RFdmVudFBsdWdpbk9yZGVyKFwiUmVzcG9uZGVyRXZlbnRQbHVnaW4gU2ltcGxlRXZlbnRQbHVnaW4gRW50ZXJMZWF2ZUV2ZW50UGx1Z2luIENoYW5nZUV2ZW50UGx1Z2luIFNlbGVjdEV2ZW50UGx1Z2luIEJlZm9yZUlucHV0RXZlbnRQbHVnaW5cIi5zcGxpdChcIiBcIikpO3RhPUthO3VhPUlhO3ZhPUphO0JhLmluamVjdEV2ZW50UGx1Z2luc0J5TmFtZSh7U2ltcGxlRXZlbnRQbHVnaW46eGQsRW50ZXJMZWF2ZUV2ZW50UGx1Z2luOmFkLENoYW5nZUV2ZW50UGx1Z2luOlBjLFNlbGVjdEV2ZW50UGx1Z2luOllkLEJlZm9yZUlucHV0RXZlbnRQbHVnaW46emJ9KTtmdW5jdGlvbiBaZChhKXt2YXIgYj1cIlwiO2FhLkNoaWxkcmVuLmZvckVhY2goYSxmdW5jdGlvbihhKXtudWxsIT1hJiYoYis9YSl9KTtyZXR1cm4gYn1cbmZ1bmN0aW9uICRkKGEsYil7YT1uKHtjaGlsZHJlbjp2b2lkIDB9LGIpO2lmKGI9WmQoYi5jaGlsZHJlbikpYS5jaGlsZHJlbj1iO3JldHVybiBhfWZ1bmN0aW9uIGFlKGEsYixjLGQpe2E9YS5vcHRpb25zO2lmKGIpe2I9e307Zm9yKHZhciBlPTA7ZTxjLmxlbmd0aDtlKyspYltcIiRcIitjW2VdXT0hMDtmb3IoYz0wO2M8YS5sZW5ndGg7YysrKWU9Yi5oYXNPd25Qcm9wZXJ0eShcIiRcIithW2NdLnZhbHVlKSxhW2NdLnNlbGVjdGVkIT09ZSYmKGFbY10uc2VsZWN0ZWQ9ZSksZSYmZCYmKGFbY10uZGVmYXVsdFNlbGVjdGVkPSEwKX1lbHNle2M9XCJcIit1YyhjKTtiPW51bGw7Zm9yKGU9MDtlPGEubGVuZ3RoO2UrKyl7aWYoYVtlXS52YWx1ZT09PWMpe2FbZV0uc2VsZWN0ZWQ9ITA7ZCYmKGFbZV0uZGVmYXVsdFNlbGVjdGVkPSEwKTtyZXR1cm59bnVsbCE9PWJ8fGFbZV0uZGlzYWJsZWR8fChiPWFbZV0pfW51bGwhPT1iJiYoYi5zZWxlY3RlZD0hMCl9fVxuZnVuY3Rpb24gYmUoYSxiKXtudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MP3goXCI5MVwiKTp2b2lkIDA7cmV0dXJuIG4oe30sYix7dmFsdWU6dm9pZCAwLGRlZmF1bHRWYWx1ZTp2b2lkIDAsY2hpbGRyZW46XCJcIithLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlfSl9ZnVuY3Rpb24gY2UoYSxiKXt2YXIgYz1iLnZhbHVlO251bGw9PWMmJihjPWIuZGVmYXVsdFZhbHVlLGI9Yi5jaGlsZHJlbixudWxsIT1iJiYobnVsbCE9Yz94KFwiOTJcIik6dm9pZCAwLEFycmF5LmlzQXJyYXkoYikmJigxPj1iLmxlbmd0aD92b2lkIDA6eChcIjkzXCIpLGI9YlswXSksYz1iKSxudWxsPT1jJiYoYz1cIlwiKSk7YS5fd3JhcHBlclN0YXRlPXtpbml0aWFsVmFsdWU6dWMoYyl9fVxuZnVuY3Rpb24gZGUoYSxiKXt2YXIgYz11YyhiLnZhbHVlKSxkPXVjKGIuZGVmYXVsdFZhbHVlKTtudWxsIT1jJiYoYz1cIlwiK2MsYyE9PWEudmFsdWUmJihhLnZhbHVlPWMpLG51bGw9PWIuZGVmYXVsdFZhbHVlJiZhLmRlZmF1bHRWYWx1ZSE9PWMmJihhLmRlZmF1bHRWYWx1ZT1jKSk7bnVsbCE9ZCYmKGEuZGVmYXVsdFZhbHVlPVwiXCIrZCl9ZnVuY3Rpb24gZWUoYSl7dmFyIGI9YS50ZXh0Q29udGVudDtiPT09YS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZSYmKGEudmFsdWU9Yil9dmFyIGZlPXtodG1sOlwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiLG1hdGhtbDpcImh0dHA6Ly93d3cudzMub3JnLzE5OTgvTWF0aC9NYXRoTUxcIixzdmc6XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wifTtcbmZ1bmN0aW9uIGdlKGEpe3N3aXRjaChhKXtjYXNlIFwic3ZnXCI6cmV0dXJuXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiO2Nhc2UgXCJtYXRoXCI6cmV0dXJuXCJodHRwOi8vd3d3LnczLm9yZy8xOTk4L01hdGgvTWF0aE1MXCI7ZGVmYXVsdDpyZXR1cm5cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIn19ZnVuY3Rpb24gaGUoYSxiKXtyZXR1cm4gbnVsbD09YXx8XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCI9PT1hP2dlKGIpOlwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIj09PWEmJlwiZm9yZWlnbk9iamVjdFwiPT09Yj9cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIjphfVxudmFyIGllPXZvaWQgMCxqZT1mdW5jdGlvbihhKXtyZXR1cm5cInVuZGVmaW5lZFwiIT09dHlwZW9mIE1TQXBwJiZNU0FwcC5leGVjVW5zYWZlTG9jYWxGdW5jdGlvbj9mdW5jdGlvbihiLGMsZCxlKXtNU0FwcC5leGVjVW5zYWZlTG9jYWxGdW5jdGlvbihmdW5jdGlvbigpe3JldHVybiBhKGIsYyxkLGUpfSl9OmF9KGZ1bmN0aW9uKGEsYil7aWYoYS5uYW1lc3BhY2VVUkkhPT1mZS5zdmd8fFwiaW5uZXJIVE1MXCJpbiBhKWEuaW5uZXJIVE1MPWI7ZWxzZXtpZT1pZXx8ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtpZS5pbm5lckhUTUw9XCI8c3ZnPlwiK2IrXCI8L3N2Zz5cIjtmb3IoYj1pZS5maXJzdENoaWxkO2EuZmlyc3RDaGlsZDspYS5yZW1vdmVDaGlsZChhLmZpcnN0Q2hpbGQpO2Zvcig7Yi5maXJzdENoaWxkOylhLmFwcGVuZENoaWxkKGIuZmlyc3RDaGlsZCl9fSk7XG5mdW5jdGlvbiBrZShhLGIpe2lmKGIpe3ZhciBjPWEuZmlyc3RDaGlsZDtpZihjJiZjPT09YS5sYXN0Q2hpbGQmJjM9PT1jLm5vZGVUeXBlKXtjLm5vZGVWYWx1ZT1iO3JldHVybn19YS50ZXh0Q29udGVudD1ifVxudmFyIGxlPXthbmltYXRpb25JdGVyYXRpb25Db3VudDohMCxib3JkZXJJbWFnZU91dHNldDohMCxib3JkZXJJbWFnZVNsaWNlOiEwLGJvcmRlckltYWdlV2lkdGg6ITAsYm94RmxleDohMCxib3hGbGV4R3JvdXA6ITAsYm94T3JkaW5hbEdyb3VwOiEwLGNvbHVtbkNvdW50OiEwLGNvbHVtbnM6ITAsZmxleDohMCxmbGV4R3JvdzohMCxmbGV4UG9zaXRpdmU6ITAsZmxleFNocmluazohMCxmbGV4TmVnYXRpdmU6ITAsZmxleE9yZGVyOiEwLGdyaWRBcmVhOiEwLGdyaWRSb3c6ITAsZ3JpZFJvd0VuZDohMCxncmlkUm93U3BhbjohMCxncmlkUm93U3RhcnQ6ITAsZ3JpZENvbHVtbjohMCxncmlkQ29sdW1uRW5kOiEwLGdyaWRDb2x1bW5TcGFuOiEwLGdyaWRDb2x1bW5TdGFydDohMCxmb250V2VpZ2h0OiEwLGxpbmVDbGFtcDohMCxsaW5lSGVpZ2h0OiEwLG9wYWNpdHk6ITAsb3JkZXI6ITAsb3JwaGFuczohMCx0YWJTaXplOiEwLHdpZG93czohMCx6SW5kZXg6ITAsem9vbTohMCxmaWxsT3BhY2l0eTohMCxcbmZsb29kT3BhY2l0eTohMCxzdG9wT3BhY2l0eTohMCxzdHJva2VEYXNoYXJyYXk6ITAsc3Ryb2tlRGFzaG9mZnNldDohMCxzdHJva2VNaXRlcmxpbWl0OiEwLHN0cm9rZU9wYWNpdHk6ITAsc3Ryb2tlV2lkdGg6ITB9LG1lPVtcIldlYmtpdFwiLFwibXNcIixcIk1velwiLFwiT1wiXTtPYmplY3Qua2V5cyhsZSkuZm9yRWFjaChmdW5jdGlvbihhKXttZS5mb3JFYWNoKGZ1bmN0aW9uKGIpe2I9YithLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpK2Euc3Vic3RyaW5nKDEpO2xlW2JdPWxlW2FdfSl9KTtmdW5jdGlvbiBuZShhLGIsYyl7cmV0dXJuIG51bGw9PWJ8fFwiYm9vbGVhblwiPT09dHlwZW9mIGJ8fFwiXCI9PT1iP1wiXCI6Y3x8XCJudW1iZXJcIiE9PXR5cGVvZiBifHwwPT09Ynx8bGUuaGFzT3duUHJvcGVydHkoYSkmJmxlW2FdPyhcIlwiK2IpLnRyaW0oKTpiK1wicHhcIn1cbmZ1bmN0aW9uIG9lKGEsYil7YT1hLnN0eWxlO2Zvcih2YXIgYyBpbiBiKWlmKGIuaGFzT3duUHJvcGVydHkoYykpe3ZhciBkPTA9PT1jLmluZGV4T2YoXCItLVwiKSxlPW5lKGMsYltjXSxkKTtcImZsb2F0XCI9PT1jJiYoYz1cImNzc0Zsb2F0XCIpO2Q/YS5zZXRQcm9wZXJ0eShjLGUpOmFbY109ZX19dmFyIHBlPW4oe21lbnVpdGVtOiEwfSx7YXJlYTohMCxiYXNlOiEwLGJyOiEwLGNvbDohMCxlbWJlZDohMCxocjohMCxpbWc6ITAsaW5wdXQ6ITAsa2V5Z2VuOiEwLGxpbms6ITAsbWV0YTohMCxwYXJhbTohMCxzb3VyY2U6ITAsdHJhY2s6ITAsd2JyOiEwfSk7XG5mdW5jdGlvbiBxZShhLGIpe2ImJihwZVthXSYmKG51bGwhPWIuY2hpbGRyZW58fG51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw/eChcIjEzN1wiLGEsXCJcIik6dm9pZCAwKSxudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiYobnVsbCE9Yi5jaGlsZHJlbj94KFwiNjBcIik6dm9pZCAwLFwib2JqZWN0XCI9PT10eXBlb2YgYi5kYW5nZXJvdXNseVNldElubmVySFRNTCYmXCJfX2h0bWxcImluIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw/dm9pZCAwOngoXCI2MVwiKSksbnVsbCE9Yi5zdHlsZSYmXCJvYmplY3RcIiE9PXR5cGVvZiBiLnN0eWxlP3goXCI2MlwiLFwiXCIpOnZvaWQgMCl9XG5mdW5jdGlvbiByZShhLGIpe2lmKC0xPT09YS5pbmRleE9mKFwiLVwiKSlyZXR1cm5cInN0cmluZ1wiPT09dHlwZW9mIGIuaXM7c3dpdGNoKGEpe2Nhc2UgXCJhbm5vdGF0aW9uLXhtbFwiOmNhc2UgXCJjb2xvci1wcm9maWxlXCI6Y2FzZSBcImZvbnQtZmFjZVwiOmNhc2UgXCJmb250LWZhY2Utc3JjXCI6Y2FzZSBcImZvbnQtZmFjZS11cmlcIjpjYXNlIFwiZm9udC1mYWNlLWZvcm1hdFwiOmNhc2UgXCJmb250LWZhY2UtbmFtZVwiOmNhc2UgXCJtaXNzaW5nLWdseXBoXCI6cmV0dXJuITE7ZGVmYXVsdDpyZXR1cm4hMH19XG5mdW5jdGlvbiBzZShhLGIpe2E9OT09PWEubm9kZVR5cGV8fDExPT09YS5ub2RlVHlwZT9hOmEub3duZXJEb2N1bWVudDt2YXIgYz1JZChhKTtiPXNhW2JdO2Zvcih2YXIgZD0wO2Q8Yi5sZW5ndGg7ZCsrKXt2YXIgZT1iW2RdO2lmKCFjLmhhc093blByb3BlcnR5KGUpfHwhY1tlXSl7c3dpdGNoKGUpe2Nhc2UgXCJzY3JvbGxcIjpFZChcInNjcm9sbFwiLGEpO2JyZWFrO2Nhc2UgXCJmb2N1c1wiOmNhc2UgXCJibHVyXCI6RWQoXCJmb2N1c1wiLGEpO0VkKFwiYmx1clwiLGEpO2MuYmx1cj0hMDtjLmZvY3VzPSEwO2JyZWFrO2Nhc2UgXCJjYW5jZWxcIjpjYXNlIFwiY2xvc2VcIjpPYihlKSYmRWQoZSxhKTticmVhaztjYXNlIFwiaW52YWxpZFwiOmNhc2UgXCJzdWJtaXRcIjpjYXNlIFwicmVzZXRcIjpicmVhaztkZWZhdWx0Oi0xPT09YWIuaW5kZXhPZihlKSYmRShlLGEpfWNbZV09ITB9fX1mdW5jdGlvbiB0ZSgpe312YXIgdWU9bnVsbCx2ZT1udWxsO1xuZnVuY3Rpb24gd2UoYSxiKXtzd2l0Y2goYSl7Y2FzZSBcImJ1dHRvblwiOmNhc2UgXCJpbnB1dFwiOmNhc2UgXCJzZWxlY3RcIjpjYXNlIFwidGV4dGFyZWFcIjpyZXR1cm4hIWIuYXV0b0ZvY3VzfXJldHVybiExfWZ1bmN0aW9uIHhlKGEsYil7cmV0dXJuXCJ0ZXh0YXJlYVwiPT09YXx8XCJvcHRpb25cIj09PWF8fFwibm9zY3JpcHRcIj09PWF8fFwic3RyaW5nXCI9PT10eXBlb2YgYi5jaGlsZHJlbnx8XCJudW1iZXJcIj09PXR5cGVvZiBiLmNoaWxkcmVufHxcIm9iamVjdFwiPT09dHlwZW9mIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwmJm51bGwhPT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiZudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MLl9faHRtbH1cbnZhciB5ZT1cImZ1bmN0aW9uXCI9PT10eXBlb2Ygc2V0VGltZW91dD9zZXRUaW1lb3V0OnZvaWQgMCx6ZT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgY2xlYXJUaW1lb3V0P2NsZWFyVGltZW91dDp2b2lkIDAsQWU9ci51bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrLEJlPXIudW5zdGFibGVfY2FuY2VsQ2FsbGJhY2s7XG5mdW5jdGlvbiBDZShhLGIsYyxkLGUpe2FbR2FdPWU7XCJpbnB1dFwiPT09YyYmXCJyYWRpb1wiPT09ZS50eXBlJiZudWxsIT1lLm5hbWUmJnhjKGEsZSk7cmUoYyxkKTtkPXJlKGMsZSk7Zm9yKHZhciBmPTA7ZjxiLmxlbmd0aDtmKz0yKXt2YXIgZz1iW2ZdLGg9YltmKzFdO1wic3R5bGVcIj09PWc/b2UoYSxoKTpcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI9PT1nP2plKGEsaCk6XCJjaGlsZHJlblwiPT09Zz9rZShhLGgpOnRjKGEsZyxoLGQpfXN3aXRjaChjKXtjYXNlIFwiaW5wdXRcIjp5YyhhLGUpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmRlKGEsZSk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmI9YS5fd3JhcHBlclN0YXRlLndhc011bHRpcGxlLGEuX3dyYXBwZXJTdGF0ZS53YXNNdWx0aXBsZT0hIWUubXVsdGlwbGUsYz1lLnZhbHVlLG51bGwhPWM/YWUoYSwhIWUubXVsdGlwbGUsYywhMSk6YiE9PSEhZS5tdWx0aXBsZSYmKG51bGwhPWUuZGVmYXVsdFZhbHVlP2FlKGEsISFlLm11bHRpcGxlLGUuZGVmYXVsdFZhbHVlLFxuITApOmFlKGEsISFlLm11bHRpcGxlLGUubXVsdGlwbGU/W106XCJcIiwhMSkpfX1mdW5jdGlvbiBEZShhKXtmb3IoYT1hLm5leHRTaWJsaW5nO2EmJjEhPT1hLm5vZGVUeXBlJiYzIT09YS5ub2RlVHlwZTspYT1hLm5leHRTaWJsaW5nO3JldHVybiBhfWZ1bmN0aW9uIEVlKGEpe2ZvcihhPWEuZmlyc3RDaGlsZDthJiYxIT09YS5ub2RlVHlwZSYmMyE9PWEubm9kZVR5cGU7KWE9YS5uZXh0U2libGluZztyZXR1cm4gYX1uZXcgU2V0O3ZhciBGZT1bXSxHZT0tMTtmdW5jdGlvbiBGKGEpezA+R2V8fChhLmN1cnJlbnQ9RmVbR2VdLEZlW0dlXT1udWxsLEdlLS0pfWZ1bmN0aW9uIEcoYSxiKXtHZSsrO0ZlW0dlXT1hLmN1cnJlbnQ7YS5jdXJyZW50PWJ9dmFyIEhlPXt9LEg9e2N1cnJlbnQ6SGV9LEk9e2N1cnJlbnQ6ITF9LEllPUhlO1xuZnVuY3Rpb24gSmUoYSxiKXt2YXIgYz1hLnR5cGUuY29udGV4dFR5cGVzO2lmKCFjKXJldHVybiBIZTt2YXIgZD1hLnN0YXRlTm9kZTtpZihkJiZkLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQ9PT1iKXJldHVybiBkLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0O3ZhciBlPXt9LGY7Zm9yKGYgaW4gYyllW2ZdPWJbZl07ZCYmKGE9YS5zdGF0ZU5vZGUsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0PWIsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dD1lKTtyZXR1cm4gZX1mdW5jdGlvbiBKKGEpe2E9YS5jaGlsZENvbnRleHRUeXBlcztyZXR1cm4gbnVsbCE9PWEmJnZvaWQgMCE9PWF9ZnVuY3Rpb24gS2UoYSl7RihJLGEpO0YoSCxhKX1mdW5jdGlvbiBMZShhKXtGKEksYSk7RihILGEpfVxuZnVuY3Rpb24gTWUoYSxiLGMpe0guY3VycmVudCE9PUhlP3goXCIxNjhcIik6dm9pZCAwO0coSCxiLGEpO0coSSxjLGEpfWZ1bmN0aW9uIE5lKGEsYixjKXt2YXIgZD1hLnN0YXRlTm9kZTthPWIuY2hpbGRDb250ZXh0VHlwZXM7aWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIGQuZ2V0Q2hpbGRDb250ZXh0KXJldHVybiBjO2Q9ZC5nZXRDaGlsZENvbnRleHQoKTtmb3IodmFyIGUgaW4gZCllIGluIGE/dm9pZCAwOngoXCIxMDhcIixpYyhiKXx8XCJVbmtub3duXCIsZSk7cmV0dXJuIG4oe30sYyxkKX1mdW5jdGlvbiBPZShhKXt2YXIgYj1hLnN0YXRlTm9kZTtiPWImJmIuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHR8fEhlO0llPUguY3VycmVudDtHKEgsYixhKTtHKEksSS5jdXJyZW50LGEpO3JldHVybiEwfVxuZnVuY3Rpb24gUGUoYSxiLGMpe3ZhciBkPWEuc3RhdGVOb2RlO2Q/dm9pZCAwOngoXCIxNjlcIik7Yz8oYj1OZShhLGIsSWUpLGQuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQ9YixGKEksYSksRihILGEpLEcoSCxiLGEpKTpGKEksYSk7RyhJLGMsYSl9dmFyIFFlPW51bGwsUmU9bnVsbDtmdW5jdGlvbiBTZShhKXtyZXR1cm4gZnVuY3Rpb24oYil7dHJ5e3JldHVybiBhKGIpfWNhdGNoKGMpe319fVxuZnVuY3Rpb24gVGUoYSl7aWYoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18pcmV0dXJuITE7dmFyIGI9X19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fO2lmKGIuaXNEaXNhYmxlZHx8IWIuc3VwcG9ydHNGaWJlcilyZXR1cm4hMDt0cnl7dmFyIGM9Yi5pbmplY3QoYSk7UWU9U2UoZnVuY3Rpb24oYSl7cmV0dXJuIGIub25Db21taXRGaWJlclJvb3QoYyxhKX0pO1JlPVNlKGZ1bmN0aW9uKGEpe3JldHVybiBiLm9uQ29tbWl0RmliZXJVbm1vdW50KGMsYSl9KX1jYXRjaChkKXt9cmV0dXJuITB9XG5mdW5jdGlvbiBVZShhLGIsYyxkKXt0aGlzLnRhZz1hO3RoaXMua2V5PWM7dGhpcy5zaWJsaW5nPXRoaXMuY2hpbGQ9dGhpcy5yZXR1cm49dGhpcy5zdGF0ZU5vZGU9dGhpcy50eXBlPXRoaXMuZWxlbWVudFR5cGU9bnVsbDt0aGlzLmluZGV4PTA7dGhpcy5yZWY9bnVsbDt0aGlzLnBlbmRpbmdQcm9wcz1iO3RoaXMuY29udGV4dERlcGVuZGVuY2llcz10aGlzLm1lbW9pemVkU3RhdGU9dGhpcy51cGRhdGVRdWV1ZT10aGlzLm1lbW9pemVkUHJvcHM9bnVsbDt0aGlzLm1vZGU9ZDt0aGlzLmVmZmVjdFRhZz0wO3RoaXMubGFzdEVmZmVjdD10aGlzLmZpcnN0RWZmZWN0PXRoaXMubmV4dEVmZmVjdD1udWxsO3RoaXMuY2hpbGRFeHBpcmF0aW9uVGltZT10aGlzLmV4cGlyYXRpb25UaW1lPTA7dGhpcy5hbHRlcm5hdGU9bnVsbH1mdW5jdGlvbiBLKGEsYixjLGQpe3JldHVybiBuZXcgVWUoYSxiLGMsZCl9XG5mdW5jdGlvbiBWZShhKXthPWEucHJvdG90eXBlO3JldHVybiEoIWF8fCFhLmlzUmVhY3RDb21wb25lbnQpfWZ1bmN0aW9uIFdlKGEpe2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhKXJldHVybiBWZShhKT8xOjA7aWYodm9pZCAwIT09YSYmbnVsbCE9PWEpe2E9YS4kJHR5cGVvZjtpZihhPT09Y2MpcmV0dXJuIDExO2lmKGE9PT1lYylyZXR1cm4gMTR9cmV0dXJuIDJ9XG5mdW5jdGlvbiBYZShhLGIpe3ZhciBjPWEuYWx0ZXJuYXRlO251bGw9PT1jPyhjPUsoYS50YWcsYixhLmtleSxhLm1vZGUpLGMuZWxlbWVudFR5cGU9YS5lbGVtZW50VHlwZSxjLnR5cGU9YS50eXBlLGMuc3RhdGVOb2RlPWEuc3RhdGVOb2RlLGMuYWx0ZXJuYXRlPWEsYS5hbHRlcm5hdGU9Yyk6KGMucGVuZGluZ1Byb3BzPWIsYy5lZmZlY3RUYWc9MCxjLm5leHRFZmZlY3Q9bnVsbCxjLmZpcnN0RWZmZWN0PW51bGwsYy5sYXN0RWZmZWN0PW51bGwpO2MuY2hpbGRFeHBpcmF0aW9uVGltZT1hLmNoaWxkRXhwaXJhdGlvblRpbWU7Yy5leHBpcmF0aW9uVGltZT1hLmV4cGlyYXRpb25UaW1lO2MuY2hpbGQ9YS5jaGlsZDtjLm1lbW9pemVkUHJvcHM9YS5tZW1vaXplZFByb3BzO2MubWVtb2l6ZWRTdGF0ZT1hLm1lbW9pemVkU3RhdGU7Yy51cGRhdGVRdWV1ZT1hLnVwZGF0ZVF1ZXVlO2MuY29udGV4dERlcGVuZGVuY2llcz1hLmNvbnRleHREZXBlbmRlbmNpZXM7Yy5zaWJsaW5nPWEuc2libGluZztcbmMuaW5kZXg9YS5pbmRleDtjLnJlZj1hLnJlZjtyZXR1cm4gY31cbmZ1bmN0aW9uIFllKGEsYixjLGQsZSxmKXt2YXIgZz0yO2Q9YTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSlWZShhKSYmKGc9MSk7ZWxzZSBpZihcInN0cmluZ1wiPT09dHlwZW9mIGEpZz01O2Vsc2UgYTpzd2l0Y2goYSl7Y2FzZSBYYjpyZXR1cm4gWmUoYy5jaGlsZHJlbixlLGYsYik7Y2FzZSBiYzpyZXR1cm4gJGUoYyxlfDMsZixiKTtjYXNlIFliOnJldHVybiAkZShjLGV8MixmLGIpO2Nhc2UgWmI6cmV0dXJuIGE9SygxMixjLGIsZXw0KSxhLmVsZW1lbnRUeXBlPVpiLGEudHlwZT1aYixhLmV4cGlyYXRpb25UaW1lPWYsYTtjYXNlIGRjOnJldHVybiBhPUsoMTMsYyxiLGUpLGEuZWxlbWVudFR5cGU9ZGMsYS50eXBlPWRjLGEuZXhwaXJhdGlvblRpbWU9ZixhO2RlZmF1bHQ6aWYoXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSlzd2l0Y2goYS4kJHR5cGVvZil7Y2FzZSAkYjpnPTEwO2JyZWFrIGE7Y2FzZSBhYzpnPTk7YnJlYWsgYTtjYXNlIGNjOmc9MTE7YnJlYWsgYTtjYXNlIGVjOmc9XG4xNDticmVhayBhO2Nhc2UgZmM6Zz0xNjtkPW51bGw7YnJlYWsgYX14KFwiMTMwXCIsbnVsbD09YT9hOnR5cGVvZiBhLFwiXCIpfWI9SyhnLGMsYixlKTtiLmVsZW1lbnRUeXBlPWE7Yi50eXBlPWQ7Yi5leHBpcmF0aW9uVGltZT1mO3JldHVybiBifWZ1bmN0aW9uIFplKGEsYixjLGQpe2E9Syg3LGEsZCxiKTthLmV4cGlyYXRpb25UaW1lPWM7cmV0dXJuIGF9ZnVuY3Rpb24gJGUoYSxiLGMsZCl7YT1LKDgsYSxkLGIpO2I9MD09PShiJjEpP1liOmJjO2EuZWxlbWVudFR5cGU9YjthLnR5cGU9YjthLmV4cGlyYXRpb25UaW1lPWM7cmV0dXJuIGF9ZnVuY3Rpb24gYWYoYSxiLGMpe2E9Syg2LGEsbnVsbCxiKTthLmV4cGlyYXRpb25UaW1lPWM7cmV0dXJuIGF9XG5mdW5jdGlvbiBiZihhLGIsYyl7Yj1LKDQsbnVsbCE9PWEuY2hpbGRyZW4/YS5jaGlsZHJlbjpbXSxhLmtleSxiKTtiLmV4cGlyYXRpb25UaW1lPWM7Yi5zdGF0ZU5vZGU9e2NvbnRhaW5lckluZm86YS5jb250YWluZXJJbmZvLHBlbmRpbmdDaGlsZHJlbjpudWxsLGltcGxlbWVudGF0aW9uOmEuaW1wbGVtZW50YXRpb259O3JldHVybiBifWZ1bmN0aW9uIGNmKGEsYil7YS5kaWRFcnJvcj0hMTt2YXIgYz1hLmVhcmxpZXN0UGVuZGluZ1RpbWU7MD09PWM/YS5lYXJsaWVzdFBlbmRpbmdUaW1lPWEubGF0ZXN0UGVuZGluZ1RpbWU9YjpjPGI/YS5lYXJsaWVzdFBlbmRpbmdUaW1lPWI6YS5sYXRlc3RQZW5kaW5nVGltZT5iJiYoYS5sYXRlc3RQZW5kaW5nVGltZT1iKTtkZihiLGEpfVxuZnVuY3Rpb24gZWYoYSxiKXthLmRpZEVycm9yPSExO2lmKDA9PT1iKWEuZWFybGllc3RQZW5kaW5nVGltZT0wLGEubGF0ZXN0UGVuZGluZ1RpbWU9MCxhLmVhcmxpZXN0U3VzcGVuZGVkVGltZT0wLGEubGF0ZXN0U3VzcGVuZGVkVGltZT0wLGEubGF0ZXN0UGluZ2VkVGltZT0wO2Vsc2V7YjxhLmxhdGVzdFBpbmdlZFRpbWUmJihhLmxhdGVzdFBpbmdlZFRpbWU9MCk7dmFyIGM9YS5sYXRlc3RQZW5kaW5nVGltZTswIT09YyYmKGM+Yj9hLmVhcmxpZXN0UGVuZGluZ1RpbWU9YS5sYXRlc3RQZW5kaW5nVGltZT0wOmEuZWFybGllc3RQZW5kaW5nVGltZT5iJiYoYS5lYXJsaWVzdFBlbmRpbmdUaW1lPWEubGF0ZXN0UGVuZGluZ1RpbWUpKTtjPWEuZWFybGllc3RTdXNwZW5kZWRUaW1lOzA9PT1jP2NmKGEsYik6YjxhLmxhdGVzdFN1c3BlbmRlZFRpbWU/KGEuZWFybGllc3RTdXNwZW5kZWRUaW1lPTAsYS5sYXRlc3RTdXNwZW5kZWRUaW1lPTAsYS5sYXRlc3RQaW5nZWRUaW1lPTAsY2YoYSxiKSk6XG5iPmMmJmNmKGEsYil9ZGYoMCxhKX1mdW5jdGlvbiBmZihhLGIpe2EuZGlkRXJyb3I9ITE7YS5sYXRlc3RQaW5nZWRUaW1lPj1iJiYoYS5sYXRlc3RQaW5nZWRUaW1lPTApO3ZhciBjPWEuZWFybGllc3RQZW5kaW5nVGltZSxkPWEubGF0ZXN0UGVuZGluZ1RpbWU7Yz09PWI/YS5lYXJsaWVzdFBlbmRpbmdUaW1lPWQ9PT1iP2EubGF0ZXN0UGVuZGluZ1RpbWU9MDpkOmQ9PT1iJiYoYS5sYXRlc3RQZW5kaW5nVGltZT1jKTtjPWEuZWFybGllc3RTdXNwZW5kZWRUaW1lO2Q9YS5sYXRlc3RTdXNwZW5kZWRUaW1lOzA9PT1jP2EuZWFybGllc3RTdXNwZW5kZWRUaW1lPWEubGF0ZXN0U3VzcGVuZGVkVGltZT1iOmM8Yj9hLmVhcmxpZXN0U3VzcGVuZGVkVGltZT1iOmQ+YiYmKGEubGF0ZXN0U3VzcGVuZGVkVGltZT1iKTtkZihiLGEpfVxuZnVuY3Rpb24gZ2YoYSxiKXt2YXIgYz1hLmVhcmxpZXN0UGVuZGluZ1RpbWU7YT1hLmVhcmxpZXN0U3VzcGVuZGVkVGltZTtjPmImJihiPWMpO2E+YiYmKGI9YSk7cmV0dXJuIGJ9ZnVuY3Rpb24gZGYoYSxiKXt2YXIgYz1iLmVhcmxpZXN0U3VzcGVuZGVkVGltZSxkPWIubGF0ZXN0U3VzcGVuZGVkVGltZSxlPWIuZWFybGllc3RQZW5kaW5nVGltZSxmPWIubGF0ZXN0UGluZ2VkVGltZTtlPTAhPT1lP2U6ZjswPT09ZSYmKDA9PT1hfHxkPGEpJiYoZT1kKTthPWU7MCE9PWEmJmM+YSYmKGE9Yyk7Yi5uZXh0RXhwaXJhdGlvblRpbWVUb1dvcmtPbj1lO2IuZXhwaXJhdGlvblRpbWU9YX1mdW5jdGlvbiBMKGEsYil7aWYoYSYmYS5kZWZhdWx0UHJvcHMpe2I9bih7fSxiKTthPWEuZGVmYXVsdFByb3BzO2Zvcih2YXIgYyBpbiBhKXZvaWQgMD09PWJbY10mJihiW2NdPWFbY10pfXJldHVybiBifVxuZnVuY3Rpb24gaGYoYSl7dmFyIGI9YS5fcmVzdWx0O3N3aXRjaChhLl9zdGF0dXMpe2Nhc2UgMTpyZXR1cm4gYjtjYXNlIDI6dGhyb3cgYjtjYXNlIDA6dGhyb3cgYjtkZWZhdWx0OmEuX3N0YXR1cz0wO2I9YS5fY3RvcjtiPWIoKTtiLnRoZW4oZnVuY3Rpb24oYil7MD09PWEuX3N0YXR1cyYmKGI9Yi5kZWZhdWx0LGEuX3N0YXR1cz0xLGEuX3Jlc3VsdD1iKX0sZnVuY3Rpb24oYil7MD09PWEuX3N0YXR1cyYmKGEuX3N0YXR1cz0yLGEuX3Jlc3VsdD1iKX0pO3N3aXRjaChhLl9zdGF0dXMpe2Nhc2UgMTpyZXR1cm4gYS5fcmVzdWx0O2Nhc2UgMjp0aHJvdyBhLl9yZXN1bHQ7fWEuX3Jlc3VsdD1iO3Rocm93IGI7fX12YXIgamY9KG5ldyBhYS5Db21wb25lbnQpLnJlZnM7XG5mdW5jdGlvbiBrZihhLGIsYyxkKXtiPWEubWVtb2l6ZWRTdGF0ZTtjPWMoZCxiKTtjPW51bGw9PT1jfHx2b2lkIDA9PT1jP2I6bih7fSxiLGMpO2EubWVtb2l6ZWRTdGF0ZT1jO2Q9YS51cGRhdGVRdWV1ZTtudWxsIT09ZCYmMD09PWEuZXhwaXJhdGlvblRpbWUmJihkLmJhc2VTdGF0ZT1jKX1cbnZhciB0Zj17aXNNb3VudGVkOmZ1bmN0aW9uKGEpe3JldHVybihhPWEuX3JlYWN0SW50ZXJuYWxGaWJlcik/Mj09PWVkKGEpOiExfSxlbnF1ZXVlU2V0U3RhdGU6ZnVuY3Rpb24oYSxiLGMpe2E9YS5fcmVhY3RJbnRlcm5hbEZpYmVyO3ZhciBkPWxmKCk7ZD1tZihkLGEpO3ZhciBlPW5mKGQpO2UucGF5bG9hZD1iO3ZvaWQgMCE9PWMmJm51bGwhPT1jJiYoZS5jYWxsYmFjaz1jKTtvZigpO3BmKGEsZSk7cWYoYSxkKX0sZW5xdWV1ZVJlcGxhY2VTdGF0ZTpmdW5jdGlvbihhLGIsYyl7YT1hLl9yZWFjdEludGVybmFsRmliZXI7dmFyIGQ9bGYoKTtkPW1mKGQsYSk7dmFyIGU9bmYoZCk7ZS50YWc9cmY7ZS5wYXlsb2FkPWI7dm9pZCAwIT09YyYmbnVsbCE9PWMmJihlLmNhbGxiYWNrPWMpO29mKCk7cGYoYSxlKTtxZihhLGQpfSxlbnF1ZXVlRm9yY2VVcGRhdGU6ZnVuY3Rpb24oYSxiKXthPWEuX3JlYWN0SW50ZXJuYWxGaWJlcjt2YXIgYz1sZigpO2M9bWYoYyxhKTt2YXIgZD1uZihjKTtkLnRhZz1cbnNmO3ZvaWQgMCE9PWImJm51bGwhPT1iJiYoZC5jYWxsYmFjaz1iKTtvZigpO3BmKGEsZCk7cWYoYSxjKX19O2Z1bmN0aW9uIHVmKGEsYixjLGQsZSxmLGcpe2E9YS5zdGF0ZU5vZGU7cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIGEuc2hvdWxkQ29tcG9uZW50VXBkYXRlP2Euc2hvdWxkQ29tcG9uZW50VXBkYXRlKGQsZixnKTpiLnByb3RvdHlwZSYmYi5wcm90b3R5cGUuaXNQdXJlUmVhY3RDb21wb25lbnQ/IWRkKGMsZCl8fCFkZChlLGYpOiEwfVxuZnVuY3Rpb24gdmYoYSxiLGMpe3ZhciBkPSExLGU9SGU7dmFyIGY9Yi5jb250ZXh0VHlwZTtcIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mP2Y9TShmKTooZT1KKGIpP0llOkguY3VycmVudCxkPWIuY29udGV4dFR5cGVzLGY9KGQ9bnVsbCE9PWQmJnZvaWQgMCE9PWQpP0plKGEsZSk6SGUpO2I9bmV3IGIoYyxmKTthLm1lbW9pemVkU3RhdGU9bnVsbCE9PWIuc3RhdGUmJnZvaWQgMCE9PWIuc3RhdGU/Yi5zdGF0ZTpudWxsO2IudXBkYXRlcj10ZjthLnN0YXRlTm9kZT1iO2IuX3JlYWN0SW50ZXJuYWxGaWJlcj1hO2QmJihhPWEuc3RhdGVOb2RlLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dD1lLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQ9Zik7cmV0dXJuIGJ9XG5mdW5jdGlvbiB3ZihhLGIsYyxkKXthPWIuc3RhdGU7XCJmdW5jdGlvblwiPT09dHlwZW9mIGIuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmYi5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKGMsZCk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGIuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJmIuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMoYyxkKTtiLnN0YXRlIT09YSYmdGYuZW5xdWV1ZVJlcGxhY2VTdGF0ZShiLGIuc3RhdGUsbnVsbCl9XG5mdW5jdGlvbiB4ZihhLGIsYyxkKXt2YXIgZT1hLnN0YXRlTm9kZTtlLnByb3BzPWM7ZS5zdGF0ZT1hLm1lbW9pemVkU3RhdGU7ZS5yZWZzPWpmO3ZhciBmPWIuY29udGV4dFR5cGU7XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09Zj9lLmNvbnRleHQ9TShmKTooZj1KKGIpP0llOkguY3VycmVudCxlLmNvbnRleHQ9SmUoYSxmKSk7Zj1hLnVwZGF0ZVF1ZXVlO251bGwhPT1mJiYoeWYoYSxmLGMsZSxkKSxlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZSk7Zj1iLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcztcImZ1bmN0aW9uXCI9PT10eXBlb2YgZiYmKGtmKGEsYixmLGMpLGUuc3RhdGU9YS5tZW1vaXplZFN0YXRlKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHN8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZcImZ1bmN0aW9uXCIhPT1cbnR5cGVvZiBlLmNvbXBvbmVudFdpbGxNb3VudHx8KGI9ZS5zdGF0ZSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5jb21wb25lbnRXaWxsTW91bnQmJmUuY29tcG9uZW50V2lsbE1vdW50KCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50KCksYiE9PWUuc3RhdGUmJnRmLmVucXVldWVSZXBsYWNlU3RhdGUoZSxlLnN0YXRlLG51bGwpLGY9YS51cGRhdGVRdWV1ZSxudWxsIT09ZiYmKHlmKGEsZixjLGUsZCksZS5zdGF0ZT1hLm1lbW9pemVkU3RhdGUpKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5jb21wb25lbnREaWRNb3VudCYmKGEuZWZmZWN0VGFnfD00KX12YXIgemY9QXJyYXkuaXNBcnJheTtcbmZ1bmN0aW9uIEFmKGEsYixjKXthPWMucmVmO2lmKG51bGwhPT1hJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYSYmXCJvYmplY3RcIiE9PXR5cGVvZiBhKXtpZihjLl9vd25lcil7Yz1jLl9vd25lcjt2YXIgZD12b2lkIDA7YyYmKDEhPT1jLnRhZz94KFwiMzA5XCIpOnZvaWQgMCxkPWMuc3RhdGVOb2RlKTtkP3ZvaWQgMDp4KFwiMTQ3XCIsYSk7dmFyIGU9XCJcIithO2lmKG51bGwhPT1iJiZudWxsIT09Yi5yZWYmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBiLnJlZiYmYi5yZWYuX3N0cmluZ1JlZj09PWUpcmV0dXJuIGIucmVmO2I9ZnVuY3Rpb24oYSl7dmFyIGI9ZC5yZWZzO2I9PT1qZiYmKGI9ZC5yZWZzPXt9KTtudWxsPT09YT9kZWxldGUgYltlXTpiW2VdPWF9O2IuX3N0cmluZ1JlZj1lO3JldHVybiBifVwic3RyaW5nXCIhPT10eXBlb2YgYT94KFwiMjg0XCIpOnZvaWQgMDtjLl9vd25lcj92b2lkIDA6eChcIjI5MFwiLGEpfXJldHVybiBhfVxuZnVuY3Rpb24gQmYoYSxiKXtcInRleHRhcmVhXCIhPT1hLnR5cGUmJngoXCIzMVwiLFwiW29iamVjdCBPYmplY3RdXCI9PT1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYik/XCJvYmplY3Qgd2l0aCBrZXlzIHtcIitPYmplY3Qua2V5cyhiKS5qb2luKFwiLCBcIikrXCJ9XCI6YixcIlwiKX1cbmZ1bmN0aW9uIENmKGEpe2Z1bmN0aW9uIGIoYixjKXtpZihhKXt2YXIgZD1iLmxhc3RFZmZlY3Q7bnVsbCE9PWQ/KGQubmV4dEVmZmVjdD1jLGIubGFzdEVmZmVjdD1jKTpiLmZpcnN0RWZmZWN0PWIubGFzdEVmZmVjdD1jO2MubmV4dEVmZmVjdD1udWxsO2MuZWZmZWN0VGFnPTh9fWZ1bmN0aW9uIGMoYyxkKXtpZighYSlyZXR1cm4gbnVsbDtmb3IoO251bGwhPT1kOyliKGMsZCksZD1kLnNpYmxpbmc7cmV0dXJuIG51bGx9ZnVuY3Rpb24gZChhLGIpe2ZvcihhPW5ldyBNYXA7bnVsbCE9PWI7KW51bGwhPT1iLmtleT9hLnNldChiLmtleSxiKTphLnNldChiLmluZGV4LGIpLGI9Yi5zaWJsaW5nO3JldHVybiBhfWZ1bmN0aW9uIGUoYSxiLGMpe2E9WGUoYSxiLGMpO2EuaW5kZXg9MDthLnNpYmxpbmc9bnVsbDtyZXR1cm4gYX1mdW5jdGlvbiBmKGIsYyxkKXtiLmluZGV4PWQ7aWYoIWEpcmV0dXJuIGM7ZD1iLmFsdGVybmF0ZTtpZihudWxsIT09ZClyZXR1cm4gZD1kLmluZGV4LGQ8Yz8oYi5lZmZlY3RUYWc9XG4yLGMpOmQ7Yi5lZmZlY3RUYWc9MjtyZXR1cm4gY31mdW5jdGlvbiBnKGIpe2EmJm51bGw9PT1iLmFsdGVybmF0ZSYmKGIuZWZmZWN0VGFnPTIpO3JldHVybiBifWZ1bmN0aW9uIGgoYSxiLGMsZCl7aWYobnVsbD09PWJ8fDYhPT1iLnRhZylyZXR1cm4gYj1hZihjLGEubW9kZSxkKSxiLnJldHVybj1hLGI7Yj1lKGIsYyxkKTtiLnJldHVybj1hO3JldHVybiBifWZ1bmN0aW9uIGwoYSxiLGMsZCl7aWYobnVsbCE9PWImJmIuZWxlbWVudFR5cGU9PT1jLnR5cGUpcmV0dXJuIGQ9ZShiLGMucHJvcHMsZCksZC5yZWY9QWYoYSxiLGMpLGQucmV0dXJuPWEsZDtkPVllKGMudHlwZSxjLmtleSxjLnByb3BzLG51bGwsYS5tb2RlLGQpO2QucmVmPUFmKGEsYixjKTtkLnJldHVybj1hO3JldHVybiBkfWZ1bmN0aW9uIGsoYSxiLGMsZCl7aWYobnVsbD09PWJ8fDQhPT1iLnRhZ3x8Yi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyE9PWMuY29udGFpbmVySW5mb3x8Yi5zdGF0ZU5vZGUuaW1wbGVtZW50YXRpb24hPT1cbmMuaW1wbGVtZW50YXRpb24pcmV0dXJuIGI9YmYoYyxhLm1vZGUsZCksYi5yZXR1cm49YSxiO2I9ZShiLGMuY2hpbGRyZW58fFtdLGQpO2IucmV0dXJuPWE7cmV0dXJuIGJ9ZnVuY3Rpb24gbShhLGIsYyxkLGYpe2lmKG51bGw9PT1ifHw3IT09Yi50YWcpcmV0dXJuIGI9WmUoYyxhLm1vZGUsZCxmKSxiLnJldHVybj1hLGI7Yj1lKGIsYyxkKTtiLnJldHVybj1hO3JldHVybiBifWZ1bmN0aW9uIHAoYSxiLGMpe2lmKFwic3RyaW5nXCI9PT10eXBlb2YgYnx8XCJudW1iZXJcIj09PXR5cGVvZiBiKXJldHVybiBiPWFmKFwiXCIrYixhLm1vZGUsYyksYi5yZXR1cm49YSxiO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYiYmbnVsbCE9PWIpe3N3aXRjaChiLiQkdHlwZW9mKXtjYXNlIFZiOnJldHVybiBjPVllKGIudHlwZSxiLmtleSxiLnByb3BzLG51bGwsYS5tb2RlLGMpLGMucmVmPUFmKGEsbnVsbCxiKSxjLnJldHVybj1hLGM7Y2FzZSBXYjpyZXR1cm4gYj1iZihiLGEubW9kZSxjKSxiLnJldHVybj1hLGJ9aWYoemYoYil8fFxuaGMoYikpcmV0dXJuIGI9WmUoYixhLm1vZGUsYyxudWxsKSxiLnJldHVybj1hLGI7QmYoYSxiKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiB0KGEsYixjLGQpe3ZhciBlPW51bGwhPT1iP2Iua2V5Om51bGw7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBjfHxcIm51bWJlclwiPT09dHlwZW9mIGMpcmV0dXJuIG51bGwhPT1lP251bGw6aChhLGIsXCJcIitjLGQpO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYyYmbnVsbCE9PWMpe3N3aXRjaChjLiQkdHlwZW9mKXtjYXNlIFZiOnJldHVybiBjLmtleT09PWU/Yy50eXBlPT09WGI/bShhLGIsYy5wcm9wcy5jaGlsZHJlbixkLGUpOmwoYSxiLGMsZCk6bnVsbDtjYXNlIFdiOnJldHVybiBjLmtleT09PWU/ayhhLGIsYyxkKTpudWxsfWlmKHpmKGMpfHxoYyhjKSlyZXR1cm4gbnVsbCE9PWU/bnVsbDptKGEsYixjLGQsbnVsbCk7QmYoYSxjKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiBBKGEsYixjLGQsZSl7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBkfHxcIm51bWJlclwiPT09dHlwZW9mIGQpcmV0dXJuIGE9XG5hLmdldChjKXx8bnVsbCxoKGIsYSxcIlwiK2QsZSk7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBkJiZudWxsIT09ZCl7c3dpdGNoKGQuJCR0eXBlb2Ype2Nhc2UgVmI6cmV0dXJuIGE9YS5nZXQobnVsbD09PWQua2V5P2M6ZC5rZXkpfHxudWxsLGQudHlwZT09PVhiP20oYixhLGQucHJvcHMuY2hpbGRyZW4sZSxkLmtleSk6bChiLGEsZCxlKTtjYXNlIFdiOnJldHVybiBhPWEuZ2V0KG51bGw9PT1kLmtleT9jOmQua2V5KXx8bnVsbCxrKGIsYSxkLGUpfWlmKHpmKGQpfHxoYyhkKSlyZXR1cm4gYT1hLmdldChjKXx8bnVsbCxtKGIsYSxkLGUsbnVsbCk7QmYoYixkKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiB2KGUsZyxoLGspe2Zvcih2YXIgbD1udWxsLG09bnVsbCxxPWcsdT1nPTAsQj1udWxsO251bGwhPT1xJiZ1PGgubGVuZ3RoO3UrKyl7cS5pbmRleD51PyhCPXEscT1udWxsKTpCPXEuc2libGluZzt2YXIgdz10KGUscSxoW3VdLGspO2lmKG51bGw9PT13KXtudWxsPT09cSYmKHE9Qik7YnJlYWt9YSYmXG5xJiZudWxsPT09dy5hbHRlcm5hdGUmJmIoZSxxKTtnPWYodyxnLHUpO251bGw9PT1tP2w9dzptLnNpYmxpbmc9dzttPXc7cT1CfWlmKHU9PT1oLmxlbmd0aClyZXR1cm4gYyhlLHEpLGw7aWYobnVsbD09PXEpe2Zvcig7dTxoLmxlbmd0aDt1KyspaWYocT1wKGUsaFt1XSxrKSlnPWYocSxnLHUpLG51bGw9PT1tP2w9cTptLnNpYmxpbmc9cSxtPXE7cmV0dXJuIGx9Zm9yKHE9ZChlLHEpO3U8aC5sZW5ndGg7dSsrKWlmKEI9QShxLGUsdSxoW3VdLGspKWEmJm51bGwhPT1CLmFsdGVybmF0ZSYmcS5kZWxldGUobnVsbD09PUIua2V5P3U6Qi5rZXkpLGc9ZihCLGcsdSksbnVsbD09PW0/bD1COm0uc2libGluZz1CLG09QjthJiZxLmZvckVhY2goZnVuY3Rpb24oYSl7cmV0dXJuIGIoZSxhKX0pO3JldHVybiBsfWZ1bmN0aW9uIFIoZSxnLGgsayl7dmFyIGw9aGMoaCk7XCJmdW5jdGlvblwiIT09dHlwZW9mIGw/eChcIjE1MFwiKTp2b2lkIDA7aD1sLmNhbGwoaCk7bnVsbD09aD94KFwiMTUxXCIpOnZvaWQgMDtcbmZvcih2YXIgbT1sPW51bGwscT1nLHU9Zz0wLEI9bnVsbCx3PWgubmV4dCgpO251bGwhPT1xJiYhdy5kb25lO3UrKyx3PWgubmV4dCgpKXtxLmluZGV4PnU/KEI9cSxxPW51bGwpOkI9cS5zaWJsaW5nO3ZhciB2PXQoZSxxLHcudmFsdWUsayk7aWYobnVsbD09PXYpe3F8fChxPUIpO2JyZWFrfWEmJnEmJm51bGw9PT12LmFsdGVybmF0ZSYmYihlLHEpO2c9Zih2LGcsdSk7bnVsbD09PW0/bD12Om0uc2libGluZz12O209djtxPUJ9aWYody5kb25lKXJldHVybiBjKGUscSksbDtpZihudWxsPT09cSl7Zm9yKDshdy5kb25lO3UrKyx3PWgubmV4dCgpKXc9cChlLHcudmFsdWUsayksbnVsbCE9PXcmJihnPWYodyxnLHUpLG51bGw9PT1tP2w9dzptLnNpYmxpbmc9dyxtPXcpO3JldHVybiBsfWZvcihxPWQoZSxxKTshdy5kb25lO3UrKyx3PWgubmV4dCgpKXc9QShxLGUsdSx3LnZhbHVlLGspLG51bGwhPT13JiYoYSYmbnVsbCE9PXcuYWx0ZXJuYXRlJiZxLmRlbGV0ZShudWxsPT09dy5rZXk/dTpcbncua2V5KSxnPWYodyxnLHUpLG51bGw9PT1tP2w9dzptLnNpYmxpbmc9dyxtPXcpO2EmJnEuZm9yRWFjaChmdW5jdGlvbihhKXtyZXR1cm4gYihlLGEpfSk7cmV0dXJuIGx9cmV0dXJuIGZ1bmN0aW9uKGEsZCxmLGgpe3ZhciBrPVwib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWYmJmYudHlwZT09PVhiJiZudWxsPT09Zi5rZXk7ayYmKGY9Zi5wcm9wcy5jaGlsZHJlbik7dmFyIGw9XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09ZjtpZihsKXN3aXRjaChmLiQkdHlwZW9mKXtjYXNlIFZiOmE6e2w9Zi5rZXk7Zm9yKGs9ZDtudWxsIT09azspe2lmKGsua2V5PT09bClpZig3PT09ay50YWc/Zi50eXBlPT09WGI6ay5lbGVtZW50VHlwZT09PWYudHlwZSl7YyhhLGsuc2libGluZyk7ZD1lKGssZi50eXBlPT09WGI/Zi5wcm9wcy5jaGlsZHJlbjpmLnByb3BzLGgpO2QucmVmPUFmKGEsayxmKTtkLnJldHVybj1hO2E9ZDticmVhayBhfWVsc2V7YyhhLGspO2JyZWFrfWVsc2UgYihhLGspO2s9XG5rLnNpYmxpbmd9Zi50eXBlPT09WGI/KGQ9WmUoZi5wcm9wcy5jaGlsZHJlbixhLm1vZGUsaCxmLmtleSksZC5yZXR1cm49YSxhPWQpOihoPVllKGYudHlwZSxmLmtleSxmLnByb3BzLG51bGwsYS5tb2RlLGgpLGgucmVmPUFmKGEsZCxmKSxoLnJldHVybj1hLGE9aCl9cmV0dXJuIGcoYSk7Y2FzZSBXYjphOntmb3Ioaz1mLmtleTtudWxsIT09ZDspe2lmKGQua2V5PT09aylpZig0PT09ZC50YWcmJmQuc3RhdGVOb2RlLmNvbnRhaW5lckluZm89PT1mLmNvbnRhaW5lckluZm8mJmQuc3RhdGVOb2RlLmltcGxlbWVudGF0aW9uPT09Zi5pbXBsZW1lbnRhdGlvbil7YyhhLGQuc2libGluZyk7ZD1lKGQsZi5jaGlsZHJlbnx8W10saCk7ZC5yZXR1cm49YTthPWQ7YnJlYWsgYX1lbHNle2MoYSxkKTticmVha31lbHNlIGIoYSxkKTtkPWQuc2libGluZ31kPWJmKGYsYS5tb2RlLGgpO2QucmV0dXJuPWE7YT1kfXJldHVybiBnKGEpfWlmKFwic3RyaW5nXCI9PT10eXBlb2YgZnx8XCJudW1iZXJcIj09PXR5cGVvZiBmKXJldHVybiBmPVxuXCJcIitmLG51bGwhPT1kJiY2PT09ZC50YWc/KGMoYSxkLnNpYmxpbmcpLGQ9ZShkLGYsaCksZC5yZXR1cm49YSxhPWQpOihjKGEsZCksZD1hZihmLGEubW9kZSxoKSxkLnJldHVybj1hLGE9ZCksZyhhKTtpZih6ZihmKSlyZXR1cm4gdihhLGQsZixoKTtpZihoYyhmKSlyZXR1cm4gUihhLGQsZixoKTtsJiZCZihhLGYpO2lmKFwidW5kZWZpbmVkXCI9PT10eXBlb2YgZiYmIWspc3dpdGNoKGEudGFnKXtjYXNlIDE6Y2FzZSAwOmg9YS50eXBlLHgoXCIxNTJcIixoLmRpc3BsYXlOYW1lfHxoLm5hbWV8fFwiQ29tcG9uZW50XCIpfXJldHVybiBjKGEsZCl9fXZhciBEZj1DZighMCksRWY9Q2YoITEpLEZmPXt9LE49e2N1cnJlbnQ6RmZ9LEdmPXtjdXJyZW50OkZmfSxIZj17Y3VycmVudDpGZn07ZnVuY3Rpb24gSWYoYSl7YT09PUZmP3goXCIxNzRcIik6dm9pZCAwO3JldHVybiBhfVxuZnVuY3Rpb24gSmYoYSxiKXtHKEhmLGIsYSk7RyhHZixhLGEpO0coTixGZixhKTt2YXIgYz1iLm5vZGVUeXBlO3N3aXRjaChjKXtjYXNlIDk6Y2FzZSAxMTpiPShiPWIuZG9jdW1lbnRFbGVtZW50KT9iLm5hbWVzcGFjZVVSSTpoZShudWxsLFwiXCIpO2JyZWFrO2RlZmF1bHQ6Yz04PT09Yz9iLnBhcmVudE5vZGU6YixiPWMubmFtZXNwYWNlVVJJfHxudWxsLGM9Yy50YWdOYW1lLGI9aGUoYixjKX1GKE4sYSk7RyhOLGIsYSl9ZnVuY3Rpb24gS2YoYSl7RihOLGEpO0YoR2YsYSk7RihIZixhKX1mdW5jdGlvbiBMZihhKXtJZihIZi5jdXJyZW50KTt2YXIgYj1JZihOLmN1cnJlbnQpO3ZhciBjPWhlKGIsYS50eXBlKTtiIT09YyYmKEcoR2YsYSxhKSxHKE4sYyxhKSl9ZnVuY3Rpb24gTWYoYSl7R2YuY3VycmVudD09PWEmJihGKE4sYSksRihHZixhKSl9XG52YXIgTmY9MCxPZj0yLFBmPTQsUWY9OCxSZj0xNixTZj0zMixUZj02NCxVZj0xMjgsVmY9VGIuUmVhY3RDdXJyZW50RGlzcGF0Y2hlcixXZj0wLFhmPW51bGwsTz1udWxsLFA9bnVsbCxZZj1udWxsLFE9bnVsbCxaZj1udWxsLCRmPTAsYWc9bnVsbCxiZz0wLGNnPSExLGRnPW51bGwsZWc9MDtmdW5jdGlvbiBmZygpe3goXCIzMDdcIil9ZnVuY3Rpb24gZ2coYSxiKXtpZihudWxsPT09YilyZXR1cm4hMTtmb3IodmFyIGM9MDtjPGIubGVuZ3RoJiZjPGEubGVuZ3RoO2MrKylpZighYmQoYVtjXSxiW2NdKSlyZXR1cm4hMTtyZXR1cm4hMH1cbmZ1bmN0aW9uIGhnKGEsYixjLGQsZSxmKXtXZj1mO1hmPWI7UD1udWxsIT09YT9hLm1lbW9pemVkU3RhdGU6bnVsbDtWZi5jdXJyZW50PW51bGw9PT1QP2lnOmpnO2I9YyhkLGUpO2lmKGNnKXtkbyBjZz0hMSxlZys9MSxQPW51bGwhPT1hP2EubWVtb2l6ZWRTdGF0ZTpudWxsLFpmPVlmLGFnPVE9Tz1udWxsLFZmLmN1cnJlbnQ9amcsYj1jKGQsZSk7d2hpbGUoY2cpO2RnPW51bGw7ZWc9MH1WZi5jdXJyZW50PWtnO2E9WGY7YS5tZW1vaXplZFN0YXRlPVlmO2EuZXhwaXJhdGlvblRpbWU9JGY7YS51cGRhdGVRdWV1ZT1hZzthLmVmZmVjdFRhZ3w9Ymc7YT1udWxsIT09TyYmbnVsbCE9PU8ubmV4dDtXZj0wO1pmPVE9WWY9UD1PPVhmPW51bGw7JGY9MDthZz1udWxsO2JnPTA7YT94KFwiMzAwXCIpOnZvaWQgMDtyZXR1cm4gYn1mdW5jdGlvbiBsZygpe1ZmLmN1cnJlbnQ9a2c7V2Y9MDtaZj1RPVlmPVA9Tz1YZj1udWxsOyRmPTA7YWc9bnVsbDtiZz0wO2NnPSExO2RnPW51bGw7ZWc9MH1cbmZ1bmN0aW9uIG1nKCl7dmFyIGE9e21lbW9pemVkU3RhdGU6bnVsbCxiYXNlU3RhdGU6bnVsbCxxdWV1ZTpudWxsLGJhc2VVcGRhdGU6bnVsbCxuZXh0Om51bGx9O251bGw9PT1RP1lmPVE9YTpRPVEubmV4dD1hO3JldHVybiBRfWZ1bmN0aW9uIG5nKCl7aWYobnVsbCE9PVpmKVE9WmYsWmY9US5uZXh0LE89UCxQPW51bGwhPT1PP08ubmV4dDpudWxsO2Vsc2V7bnVsbD09PVA/eChcIjMxMFwiKTp2b2lkIDA7Tz1QO3ZhciBhPXttZW1vaXplZFN0YXRlOk8ubWVtb2l6ZWRTdGF0ZSxiYXNlU3RhdGU6Ty5iYXNlU3RhdGUscXVldWU6Ty5xdWV1ZSxiYXNlVXBkYXRlOk8uYmFzZVVwZGF0ZSxuZXh0Om51bGx9O1E9bnVsbD09PVE/WWY9YTpRLm5leHQ9YTtQPU8ubmV4dH1yZXR1cm4gUX1mdW5jdGlvbiBvZyhhLGIpe3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBiP2IoYSk6Yn1cbmZ1bmN0aW9uIHBnKGEpe3ZhciBiPW5nKCksYz1iLnF1ZXVlO251bGw9PT1jP3goXCIzMTFcIik6dm9pZCAwO2lmKDA8ZWcpe3ZhciBkPWMuZGlzcGF0Y2g7aWYobnVsbCE9PWRnKXt2YXIgZT1kZy5nZXQoYyk7aWYodm9pZCAwIT09ZSl7ZGcuZGVsZXRlKGMpO3ZhciBmPWIubWVtb2l6ZWRTdGF0ZTtkbyBmPWEoZixlLmFjdGlvbiksZT1lLm5leHQ7d2hpbGUobnVsbCE9PWUpO2JkKGYsYi5tZW1vaXplZFN0YXRlKXx8KHFnPSEwKTtiLm1lbW9pemVkU3RhdGU9ZjtiLmJhc2VVcGRhdGU9PT1jLmxhc3QmJihiLmJhc2VTdGF0ZT1mKTtjLmVhZ2VyUmVkdWNlcj1hO2MuZWFnZXJTdGF0ZT1mO3JldHVybltmLGRdfX1yZXR1cm5bYi5tZW1vaXplZFN0YXRlLGRdfWQ9Yy5sYXN0O3ZhciBnPWIuYmFzZVVwZGF0ZTtmPWIuYmFzZVN0YXRlO251bGwhPT1nPyhudWxsIT09ZCYmKGQubmV4dD1udWxsKSxkPWcubmV4dCk6ZD1udWxsIT09ZD9kLm5leHQ6bnVsbDtpZihudWxsIT09ZCl7dmFyIGg9ZT1udWxsLFxubD1kLGs9ITE7ZG97dmFyIG09bC5leHBpcmF0aW9uVGltZTttPFdmPyhrfHwoaz0hMCxoPWcsZT1mKSxtPiRmJiYoJGY9bSkpOmY9bC5lYWdlclJlZHVjZXI9PT1hP2wuZWFnZXJTdGF0ZTphKGYsbC5hY3Rpb24pO2c9bDtsPWwubmV4dH13aGlsZShudWxsIT09bCYmbCE9PWQpO2t8fChoPWcsZT1mKTtiZChmLGIubWVtb2l6ZWRTdGF0ZSl8fChxZz0hMCk7Yi5tZW1vaXplZFN0YXRlPWY7Yi5iYXNlVXBkYXRlPWg7Yi5iYXNlU3RhdGU9ZTtjLmVhZ2VyUmVkdWNlcj1hO2MuZWFnZXJTdGF0ZT1mfXJldHVybltiLm1lbW9pemVkU3RhdGUsYy5kaXNwYXRjaF19XG5mdW5jdGlvbiByZyhhLGIsYyxkKXthPXt0YWc6YSxjcmVhdGU6YixkZXN0cm95OmMsZGVwczpkLG5leHQ6bnVsbH07bnVsbD09PWFnPyhhZz17bGFzdEVmZmVjdDpudWxsfSxhZy5sYXN0RWZmZWN0PWEubmV4dD1hKTooYj1hZy5sYXN0RWZmZWN0LG51bGw9PT1iP2FnLmxhc3RFZmZlY3Q9YS5uZXh0PWE6KGM9Yi5uZXh0LGIubmV4dD1hLGEubmV4dD1jLGFnLmxhc3RFZmZlY3Q9YSkpO3JldHVybiBhfWZ1bmN0aW9uIHNnKGEsYixjLGQpe3ZhciBlPW1nKCk7Ymd8PWE7ZS5tZW1vaXplZFN0YXRlPXJnKGIsYyx2b2lkIDAsdm9pZCAwPT09ZD9udWxsOmQpfVxuZnVuY3Rpb24gdGcoYSxiLGMsZCl7dmFyIGU9bmcoKTtkPXZvaWQgMD09PWQ/bnVsbDpkO3ZhciBmPXZvaWQgMDtpZihudWxsIT09Tyl7dmFyIGc9Ty5tZW1vaXplZFN0YXRlO2Y9Zy5kZXN0cm95O2lmKG51bGwhPT1kJiZnZyhkLGcuZGVwcykpe3JnKE5mLGMsZixkKTtyZXR1cm59fWJnfD1hO2UubWVtb2l6ZWRTdGF0ZT1yZyhiLGMsZixkKX1mdW5jdGlvbiB1ZyhhLGIpe2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBiKXJldHVybiBhPWEoKSxiKGEpLGZ1bmN0aW9uKCl7YihudWxsKX07aWYobnVsbCE9PWImJnZvaWQgMCE9PWIpcmV0dXJuIGE9YSgpLGIuY3VycmVudD1hLGZ1bmN0aW9uKCl7Yi5jdXJyZW50PW51bGx9fWZ1bmN0aW9uIHZnKCl7fVxuZnVuY3Rpb24gd2coYSxiLGMpezI1PmVnP3ZvaWQgMDp4KFwiMzAxXCIpO3ZhciBkPWEuYWx0ZXJuYXRlO2lmKGE9PT1YZnx8bnVsbCE9PWQmJmQ9PT1YZilpZihjZz0hMCxhPXtleHBpcmF0aW9uVGltZTpXZixhY3Rpb246YyxlYWdlclJlZHVjZXI6bnVsbCxlYWdlclN0YXRlOm51bGwsbmV4dDpudWxsfSxudWxsPT09ZGcmJihkZz1uZXcgTWFwKSxjPWRnLmdldChiKSx2b2lkIDA9PT1jKWRnLnNldChiLGEpO2Vsc2V7Zm9yKGI9YztudWxsIT09Yi5uZXh0OyliPWIubmV4dDtiLm5leHQ9YX1lbHNle29mKCk7dmFyIGU9bGYoKTtlPW1mKGUsYSk7dmFyIGY9e2V4cGlyYXRpb25UaW1lOmUsYWN0aW9uOmMsZWFnZXJSZWR1Y2VyOm51bGwsZWFnZXJTdGF0ZTpudWxsLG5leHQ6bnVsbH0sZz1iLmxhc3Q7aWYobnVsbD09PWcpZi5uZXh0PWY7ZWxzZXt2YXIgaD1nLm5leHQ7bnVsbCE9PWgmJihmLm5leHQ9aCk7Zy5uZXh0PWZ9Yi5sYXN0PWY7aWYoMD09PWEuZXhwaXJhdGlvblRpbWUmJihudWxsPT09XG5kfHwwPT09ZC5leHBpcmF0aW9uVGltZSkmJihkPWIuZWFnZXJSZWR1Y2VyLG51bGwhPT1kKSl0cnl7dmFyIGw9Yi5lYWdlclN0YXRlLGs9ZChsLGMpO2YuZWFnZXJSZWR1Y2VyPWQ7Zi5lYWdlclN0YXRlPWs7aWYoYmQoayxsKSlyZXR1cm59Y2F0Y2gobSl7fWZpbmFsbHl7fXFmKGEsZSl9fVxudmFyIGtnPXtyZWFkQ29udGV4dDpNLHVzZUNhbGxiYWNrOmZnLHVzZUNvbnRleHQ6ZmcsdXNlRWZmZWN0OmZnLHVzZUltcGVyYXRpdmVIYW5kbGU6ZmcsdXNlTGF5b3V0RWZmZWN0OmZnLHVzZU1lbW86ZmcsdXNlUmVkdWNlcjpmZyx1c2VSZWY6ZmcsdXNlU3RhdGU6ZmcsdXNlRGVidWdWYWx1ZTpmZ30saWc9e3JlYWRDb250ZXh0Ok0sdXNlQ2FsbGJhY2s6ZnVuY3Rpb24oYSxiKXttZygpLm1lbW9pemVkU3RhdGU9W2Esdm9pZCAwPT09Yj9udWxsOmJdO3JldHVybiBhfSx1c2VDb250ZXh0Ok0sdXNlRWZmZWN0OmZ1bmN0aW9uKGEsYil7cmV0dXJuIHNnKDUxNixVZnxUZixhLGIpfSx1c2VJbXBlcmF0aXZlSGFuZGxlOmZ1bmN0aW9uKGEsYixjKXtjPW51bGwhPT1jJiZ2b2lkIDAhPT1jP2MuY29uY2F0KFthXSk6bnVsbDtyZXR1cm4gc2coNCxQZnxTZix1Zy5iaW5kKG51bGwsYixhKSxjKX0sdXNlTGF5b3V0RWZmZWN0OmZ1bmN0aW9uKGEsYil7cmV0dXJuIHNnKDQsUGZ8U2YsYSxiKX0sXG51c2VNZW1vOmZ1bmN0aW9uKGEsYil7dmFyIGM9bWcoKTtiPXZvaWQgMD09PWI/bnVsbDpiO2E9YSgpO2MubWVtb2l6ZWRTdGF0ZT1bYSxiXTtyZXR1cm4gYX0sdXNlUmVkdWNlcjpmdW5jdGlvbihhLGIsYyl7dmFyIGQ9bWcoKTtiPXZvaWQgMCE9PWM/YyhiKTpiO2QubWVtb2l6ZWRTdGF0ZT1kLmJhc2VTdGF0ZT1iO2E9ZC5xdWV1ZT17bGFzdDpudWxsLGRpc3BhdGNoOm51bGwsZWFnZXJSZWR1Y2VyOmEsZWFnZXJTdGF0ZTpifTthPWEuZGlzcGF0Y2g9d2cuYmluZChudWxsLFhmLGEpO3JldHVybltkLm1lbW9pemVkU3RhdGUsYV19LHVzZVJlZjpmdW5jdGlvbihhKXt2YXIgYj1tZygpO2E9e2N1cnJlbnQ6YX07cmV0dXJuIGIubWVtb2l6ZWRTdGF0ZT1hfSx1c2VTdGF0ZTpmdW5jdGlvbihhKXt2YXIgYj1tZygpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBhJiYoYT1hKCkpO2IubWVtb2l6ZWRTdGF0ZT1iLmJhc2VTdGF0ZT1hO2E9Yi5xdWV1ZT17bGFzdDpudWxsLGRpc3BhdGNoOm51bGwsZWFnZXJSZWR1Y2VyOm9nLFxuZWFnZXJTdGF0ZTphfTthPWEuZGlzcGF0Y2g9d2cuYmluZChudWxsLFhmLGEpO3JldHVybltiLm1lbW9pemVkU3RhdGUsYV19LHVzZURlYnVnVmFsdWU6dmd9LGpnPXtyZWFkQ29udGV4dDpNLHVzZUNhbGxiYWNrOmZ1bmN0aW9uKGEsYil7dmFyIGM9bmcoKTtiPXZvaWQgMD09PWI/bnVsbDpiO3ZhciBkPWMubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09ZCYmbnVsbCE9PWImJmdnKGIsZFsxXSkpcmV0dXJuIGRbMF07Yy5tZW1vaXplZFN0YXRlPVthLGJdO3JldHVybiBhfSx1c2VDb250ZXh0Ok0sdXNlRWZmZWN0OmZ1bmN0aW9uKGEsYil7cmV0dXJuIHRnKDUxNixVZnxUZixhLGIpfSx1c2VJbXBlcmF0aXZlSGFuZGxlOmZ1bmN0aW9uKGEsYixjKXtjPW51bGwhPT1jJiZ2b2lkIDAhPT1jP2MuY29uY2F0KFthXSk6bnVsbDtyZXR1cm4gdGcoNCxQZnxTZix1Zy5iaW5kKG51bGwsYixhKSxjKX0sdXNlTGF5b3V0RWZmZWN0OmZ1bmN0aW9uKGEsYil7cmV0dXJuIHRnKDQsUGZ8U2YsYSxiKX0sXG51c2VNZW1vOmZ1bmN0aW9uKGEsYil7dmFyIGM9bmcoKTtiPXZvaWQgMD09PWI/bnVsbDpiO3ZhciBkPWMubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09ZCYmbnVsbCE9PWImJmdnKGIsZFsxXSkpcmV0dXJuIGRbMF07YT1hKCk7Yy5tZW1vaXplZFN0YXRlPVthLGJdO3JldHVybiBhfSx1c2VSZWR1Y2VyOnBnLHVzZVJlZjpmdW5jdGlvbigpe3JldHVybiBuZygpLm1lbW9pemVkU3RhdGV9LHVzZVN0YXRlOmZ1bmN0aW9uKGEpe3JldHVybiBwZyhvZyxhKX0sdXNlRGVidWdWYWx1ZTp2Z30seGc9bnVsbCx5Zz1udWxsLHpnPSExO1xuZnVuY3Rpb24gQWcoYSxiKXt2YXIgYz1LKDUsbnVsbCxudWxsLDApO2MuZWxlbWVudFR5cGU9XCJERUxFVEVEXCI7Yy50eXBlPVwiREVMRVRFRFwiO2Muc3RhdGVOb2RlPWI7Yy5yZXR1cm49YTtjLmVmZmVjdFRhZz04O251bGwhPT1hLmxhc3RFZmZlY3Q/KGEubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWMsYS5sYXN0RWZmZWN0PWMpOmEuZmlyc3RFZmZlY3Q9YS5sYXN0RWZmZWN0PWN9ZnVuY3Rpb24gQmcoYSxiKXtzd2l0Y2goYS50YWcpe2Nhc2UgNTp2YXIgYz1hLnR5cGU7Yj0xIT09Yi5ub2RlVHlwZXx8Yy50b0xvd2VyQ2FzZSgpIT09Yi5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpP251bGw6YjtyZXR1cm4gbnVsbCE9PWI/KGEuc3RhdGVOb2RlPWIsITApOiExO2Nhc2UgNjpyZXR1cm4gYj1cIlwiPT09YS5wZW5kaW5nUHJvcHN8fDMhPT1iLm5vZGVUeXBlP251bGw6YixudWxsIT09Yj8oYS5zdGF0ZU5vZGU9YiwhMCk6ITE7Y2FzZSAxMzpyZXR1cm4hMTtkZWZhdWx0OnJldHVybiExfX1cbmZ1bmN0aW9uIENnKGEpe2lmKHpnKXt2YXIgYj15ZztpZihiKXt2YXIgYz1iO2lmKCFCZyhhLGIpKXtiPURlKGMpO2lmKCFifHwhQmcoYSxiKSl7YS5lZmZlY3RUYWd8PTI7emc9ITE7eGc9YTtyZXR1cm59QWcoeGcsYyl9eGc9YTt5Zz1FZShiKX1lbHNlIGEuZWZmZWN0VGFnfD0yLHpnPSExLHhnPWF9fWZ1bmN0aW9uIERnKGEpe2ZvcihhPWEucmV0dXJuO251bGwhPT1hJiY1IT09YS50YWcmJjMhPT1hLnRhZyYmMTghPT1hLnRhZzspYT1hLnJldHVybjt4Zz1hfWZ1bmN0aW9uIEVnKGEpe2lmKGEhPT14ZylyZXR1cm4hMTtpZighemcpcmV0dXJuIERnKGEpLHpnPSEwLCExO3ZhciBiPWEudHlwZTtpZig1IT09YS50YWd8fFwiaGVhZFwiIT09YiYmXCJib2R5XCIhPT1iJiYheGUoYixhLm1lbW9pemVkUHJvcHMpKWZvcihiPXlnO2I7KUFnKGEsYiksYj1EZShiKTtEZyhhKTt5Zz14Zz9EZShhLnN0YXRlTm9kZSk6bnVsbDtyZXR1cm4hMH1mdW5jdGlvbiBGZygpe3lnPXhnPW51bGw7emc9ITF9XG52YXIgR2c9VGIuUmVhY3RDdXJyZW50T3duZXIscWc9ITE7ZnVuY3Rpb24gUyhhLGIsYyxkKXtiLmNoaWxkPW51bGw9PT1hP0VmKGIsbnVsbCxjLGQpOkRmKGIsYS5jaGlsZCxjLGQpfWZ1bmN0aW9uIEhnKGEsYixjLGQsZSl7Yz1jLnJlbmRlcjt2YXIgZj1iLnJlZjtJZyhiLGUpO2Q9aGcoYSxiLGMsZCxmLGUpO2lmKG51bGwhPT1hJiYhcWcpcmV0dXJuIGIudXBkYXRlUXVldWU9YS51cGRhdGVRdWV1ZSxiLmVmZmVjdFRhZyY9LTUxNyxhLmV4cGlyYXRpb25UaW1lPD1lJiYoYS5leHBpcmF0aW9uVGltZT0wKSxKZyhhLGIsZSk7Yi5lZmZlY3RUYWd8PTE7UyhhLGIsZCxlKTtyZXR1cm4gYi5jaGlsZH1cbmZ1bmN0aW9uIEtnKGEsYixjLGQsZSxmKXtpZihudWxsPT09YSl7dmFyIGc9Yy50eXBlO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnJiYhVmUoZykmJnZvaWQgMD09PWcuZGVmYXVsdFByb3BzJiZudWxsPT09Yy5jb21wYXJlJiZ2b2lkIDA9PT1jLmRlZmF1bHRQcm9wcylyZXR1cm4gYi50YWc9MTUsYi50eXBlPWcsTGcoYSxiLGcsZCxlLGYpO2E9WWUoYy50eXBlLG51bGwsZCxudWxsLGIubW9kZSxmKTthLnJlZj1iLnJlZjthLnJldHVybj1iO3JldHVybiBiLmNoaWxkPWF9Zz1hLmNoaWxkO2lmKGU8ZiYmKGU9Zy5tZW1vaXplZFByb3BzLGM9Yy5jb21wYXJlLGM9bnVsbCE9PWM/YzpkZCxjKGUsZCkmJmEucmVmPT09Yi5yZWYpKXJldHVybiBKZyhhLGIsZik7Yi5lZmZlY3RUYWd8PTE7YT1YZShnLGQsZik7YS5yZWY9Yi5yZWY7YS5yZXR1cm49YjtyZXR1cm4gYi5jaGlsZD1hfVxuZnVuY3Rpb24gTGcoYSxiLGMsZCxlLGYpe3JldHVybiBudWxsIT09YSYmZGQoYS5tZW1vaXplZFByb3BzLGQpJiZhLnJlZj09PWIucmVmJiYocWc9ITEsZTxmKT9KZyhhLGIsZik6TWcoYSxiLGMsZCxmKX1mdW5jdGlvbiBOZyhhLGIpe3ZhciBjPWIucmVmO2lmKG51bGw9PT1hJiZudWxsIT09Y3x8bnVsbCE9PWEmJmEucmVmIT09YyliLmVmZmVjdFRhZ3w9MTI4fWZ1bmN0aW9uIE1nKGEsYixjLGQsZSl7dmFyIGY9SihjKT9JZTpILmN1cnJlbnQ7Zj1KZShiLGYpO0lnKGIsZSk7Yz1oZyhhLGIsYyxkLGYsZSk7aWYobnVsbCE9PWEmJiFxZylyZXR1cm4gYi51cGRhdGVRdWV1ZT1hLnVwZGF0ZVF1ZXVlLGIuZWZmZWN0VGFnJj0tNTE3LGEuZXhwaXJhdGlvblRpbWU8PWUmJihhLmV4cGlyYXRpb25UaW1lPTApLEpnKGEsYixlKTtiLmVmZmVjdFRhZ3w9MTtTKGEsYixjLGUpO3JldHVybiBiLmNoaWxkfVxuZnVuY3Rpb24gT2coYSxiLGMsZCxlKXtpZihKKGMpKXt2YXIgZj0hMDtPZShiKX1lbHNlIGY9ITE7SWcoYixlKTtpZihudWxsPT09Yi5zdGF0ZU5vZGUpbnVsbCE9PWEmJihhLmFsdGVybmF0ZT1udWxsLGIuYWx0ZXJuYXRlPW51bGwsYi5lZmZlY3RUYWd8PTIpLHZmKGIsYyxkLGUpLHhmKGIsYyxkLGUpLGQ9ITA7ZWxzZSBpZihudWxsPT09YSl7dmFyIGc9Yi5zdGF0ZU5vZGUsaD1iLm1lbW9pemVkUHJvcHM7Zy5wcm9wcz1oO3ZhciBsPWcuY29udGV4dCxrPWMuY29udGV4dFR5cGU7XCJvYmplY3RcIj09PXR5cGVvZiBrJiZudWxsIT09az9rPU0oayk6KGs9SihjKT9JZTpILmN1cnJlbnQsaz1KZShiLGspKTt2YXIgbT1jLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyxwPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBtfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZTtwfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmXG5cImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzfHwoaCE9PWR8fGwhPT1rKSYmd2YoYixnLGQsayk7UGc9ITE7dmFyIHQ9Yi5tZW1vaXplZFN0YXRlO2w9Zy5zdGF0ZT10O3ZhciBBPWIudXBkYXRlUXVldWU7bnVsbCE9PUEmJih5ZihiLEEsZCxnLGUpLGw9Yi5tZW1vaXplZFN0YXRlKTtoIT09ZHx8dCE9PWx8fEkuY3VycmVudHx8UGc/KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBtJiYoa2YoYixjLG0sZCksbD1iLm1lbW9pemVkU3RhdGUpLChoPVBnfHx1ZihiLGMsaCxkLHQsbCxrKSk/KHB8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxNb3VudHx8KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxNb3VudCYmZy5jb21wb25lbnRXaWxsTW91bnQoKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZcbmcuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCgpKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnREaWRNb3VudCYmKGIuZWZmZWN0VGFnfD00KSk6KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudERpZE1vdW50JiYoYi5lZmZlY3RUYWd8PTQpLGIubWVtb2l6ZWRQcm9wcz1kLGIubWVtb2l6ZWRTdGF0ZT1sKSxnLnByb3BzPWQsZy5zdGF0ZT1sLGcuY29udGV4dD1rLGQ9aCk6KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudERpZE1vdW50JiYoYi5lZmZlY3RUYWd8PTQpLGQ9ITEpfWVsc2UgZz1iLnN0YXRlTm9kZSxoPWIubWVtb2l6ZWRQcm9wcyxnLnByb3BzPWIudHlwZT09PWIuZWxlbWVudFR5cGU/aDpMKGIudHlwZSxoKSxsPWcuY29udGV4dCxrPWMuY29udGV4dFR5cGUsXCJvYmplY3RcIj09PXR5cGVvZiBrJiZudWxsIT09az9rPU0oayk6KGs9SihjKT9JZTpILmN1cnJlbnQsaz1KZShiLGspKSxtPWMuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzLChwPVwiZnVuY3Rpb25cIj09PVxudHlwZW9mIG18fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlKXx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHN8fChoIT09ZHx8bCE9PWspJiZ3ZihiLGcsZCxrKSxQZz0hMSxsPWIubWVtb2l6ZWRTdGF0ZSx0PWcuc3RhdGU9bCxBPWIudXBkYXRlUXVldWUsbnVsbCE9PUEmJih5ZihiLEEsZCxnLGUpLHQ9Yi5tZW1vaXplZFN0YXRlKSxoIT09ZHx8bCE9PXR8fEkuY3VycmVudHx8UGc/KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBtJiYoa2YoYixjLG0sZCksdD1iLm1lbW9pemVkU3RhdGUpLChtPVBnfHx1ZihiLGMsaCxkLGwsdCxrKSk/KHB8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnRXaWxsVXBkYXRlfHwoXCJmdW5jdGlvblwiPT09XG50eXBlb2YgZy5jb21wb25lbnRXaWxsVXBkYXRlJiZnLmNvbXBvbmVudFdpbGxVcGRhdGUoZCx0LGspLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlJiZnLlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlKGQsdCxrKSksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50RGlkVXBkYXRlJiYoYi5lZmZlY3RUYWd8PTQpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlJiYoYi5lZmZlY3RUYWd8PTI1NikpOihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnREaWRVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJmw9PT1hLm1lbW9pemVkU3RhdGV8fChiLmVmZmVjdFRhZ3w9NCksXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJmw9PT1hLm1lbW9pemVkU3RhdGV8fChiLmVmZmVjdFRhZ3w9MjU2KSxiLm1lbW9pemVkUHJvcHM9ZCxiLm1lbW9pemVkU3RhdGU9XG50KSxnLnByb3BzPWQsZy5zdGF0ZT10LGcuY29udGV4dD1rLGQ9bSk6KFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudERpZFVwZGF0ZXx8aD09PWEubWVtb2l6ZWRQcm9wcyYmbD09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZWZmZWN0VGFnfD00KSxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZXx8aD09PWEubWVtb2l6ZWRQcm9wcyYmbD09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZWZmZWN0VGFnfD0yNTYpLGQ9ITEpO3JldHVybiBRZyhhLGIsYyxkLGYsZSl9XG5mdW5jdGlvbiBRZyhhLGIsYyxkLGUsZil7TmcoYSxiKTt2YXIgZz0wIT09KGIuZWZmZWN0VGFnJjY0KTtpZighZCYmIWcpcmV0dXJuIGUmJlBlKGIsYywhMSksSmcoYSxiLGYpO2Q9Yi5zdGF0ZU5vZGU7R2cuY3VycmVudD1iO3ZhciBoPWcmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBjLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcj9udWxsOmQucmVuZGVyKCk7Yi5lZmZlY3RUYWd8PTE7bnVsbCE9PWEmJmc/KGIuY2hpbGQ9RGYoYixhLmNoaWxkLG51bGwsZiksYi5jaGlsZD1EZihiLG51bGwsaCxmKSk6UyhhLGIsaCxmKTtiLm1lbW9pemVkU3RhdGU9ZC5zdGF0ZTtlJiZQZShiLGMsITApO3JldHVybiBiLmNoaWxkfWZ1bmN0aW9uIFJnKGEpe3ZhciBiPWEuc3RhdGVOb2RlO2IucGVuZGluZ0NvbnRleHQ/TWUoYSxiLnBlbmRpbmdDb250ZXh0LGIucGVuZGluZ0NvbnRleHQhPT1iLmNvbnRleHQpOmIuY29udGV4dCYmTWUoYSxiLmNvbnRleHQsITEpO0pmKGEsYi5jb250YWluZXJJbmZvKX1cbmZ1bmN0aW9uIFNnKGEsYixjKXt2YXIgZD1iLm1vZGUsZT1iLnBlbmRpbmdQcm9wcyxmPWIubWVtb2l6ZWRTdGF0ZTtpZigwPT09KGIuZWZmZWN0VGFnJjY0KSl7Zj1udWxsO3ZhciBnPSExfWVsc2UgZj17dGltZWRPdXRBdDpudWxsIT09Zj9mLnRpbWVkT3V0QXQ6MH0sZz0hMCxiLmVmZmVjdFRhZyY9LTY1O2lmKG51bGw9PT1hKWlmKGcpe3ZhciBoPWUuZmFsbGJhY2s7YT1aZShudWxsLGQsMCxudWxsKTswPT09KGIubW9kZSYxKSYmKGEuY2hpbGQ9bnVsbCE9PWIubWVtb2l6ZWRTdGF0ZT9iLmNoaWxkLmNoaWxkOmIuY2hpbGQpO2Q9WmUoaCxkLGMsbnVsbCk7YS5zaWJsaW5nPWQ7Yz1hO2MucmV0dXJuPWQucmV0dXJuPWJ9ZWxzZSBjPWQ9RWYoYixudWxsLGUuY2hpbGRyZW4sYyk7ZWxzZSBudWxsIT09YS5tZW1vaXplZFN0YXRlPyhkPWEuY2hpbGQsaD1kLnNpYmxpbmcsZz8oYz1lLmZhbGxiYWNrLGU9WGUoZCxkLnBlbmRpbmdQcm9wcywwKSwwPT09KGIubW9kZSYxKSYmKGc9bnVsbCE9PVxuYi5tZW1vaXplZFN0YXRlP2IuY2hpbGQuY2hpbGQ6Yi5jaGlsZCxnIT09ZC5jaGlsZCYmKGUuY2hpbGQ9ZykpLGQ9ZS5zaWJsaW5nPVhlKGgsYyxoLmV4cGlyYXRpb25UaW1lKSxjPWUsZS5jaGlsZEV4cGlyYXRpb25UaW1lPTAsYy5yZXR1cm49ZC5yZXR1cm49Yik6Yz1kPURmKGIsZC5jaGlsZCxlLmNoaWxkcmVuLGMpKTooaD1hLmNoaWxkLGc/KGc9ZS5mYWxsYmFjayxlPVplKG51bGwsZCwwLG51bGwpLGUuY2hpbGQ9aCwwPT09KGIubW9kZSYxKSYmKGUuY2hpbGQ9bnVsbCE9PWIubWVtb2l6ZWRTdGF0ZT9iLmNoaWxkLmNoaWxkOmIuY2hpbGQpLGQ9ZS5zaWJsaW5nPVplKGcsZCxjLG51bGwpLGQuZWZmZWN0VGFnfD0yLGM9ZSxlLmNoaWxkRXhwaXJhdGlvblRpbWU9MCxjLnJldHVybj1kLnJldHVybj1iKTpkPWM9RGYoYixoLGUuY2hpbGRyZW4sYykpLGIuc3RhdGVOb2RlPWEuc3RhdGVOb2RlO2IubWVtb2l6ZWRTdGF0ZT1mO2IuY2hpbGQ9YztyZXR1cm4gZH1cbmZ1bmN0aW9uIEpnKGEsYixjKXtudWxsIT09YSYmKGIuY29udGV4dERlcGVuZGVuY2llcz1hLmNvbnRleHREZXBlbmRlbmNpZXMpO2lmKGIuY2hpbGRFeHBpcmF0aW9uVGltZTxjKXJldHVybiBudWxsO251bGwhPT1hJiZiLmNoaWxkIT09YS5jaGlsZD94KFwiMTUzXCIpOnZvaWQgMDtpZihudWxsIT09Yi5jaGlsZCl7YT1iLmNoaWxkO2M9WGUoYSxhLnBlbmRpbmdQcm9wcyxhLmV4cGlyYXRpb25UaW1lKTtiLmNoaWxkPWM7Zm9yKGMucmV0dXJuPWI7bnVsbCE9PWEuc2libGluZzspYT1hLnNpYmxpbmcsYz1jLnNpYmxpbmc9WGUoYSxhLnBlbmRpbmdQcm9wcyxhLmV4cGlyYXRpb25UaW1lKSxjLnJldHVybj1iO2Muc2libGluZz1udWxsfXJldHVybiBiLmNoaWxkfVxuZnVuY3Rpb24gVGcoYSxiLGMpe3ZhciBkPWIuZXhwaXJhdGlvblRpbWU7aWYobnVsbCE9PWEpaWYoYS5tZW1vaXplZFByb3BzIT09Yi5wZW5kaW5nUHJvcHN8fEkuY3VycmVudClxZz0hMDtlbHNle2lmKGQ8Yyl7cWc9ITE7c3dpdGNoKGIudGFnKXtjYXNlIDM6UmcoYik7RmcoKTticmVhaztjYXNlIDU6TGYoYik7YnJlYWs7Y2FzZSAxOkooYi50eXBlKSYmT2UoYik7YnJlYWs7Y2FzZSA0OkpmKGIsYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyk7YnJlYWs7Y2FzZSAxMDpVZyhiLGIubWVtb2l6ZWRQcm9wcy52YWx1ZSk7YnJlYWs7Y2FzZSAxMzppZihudWxsIT09Yi5tZW1vaXplZFN0YXRlKXtkPWIuY2hpbGQuY2hpbGRFeHBpcmF0aW9uVGltZTtpZigwIT09ZCYmZD49YylyZXR1cm4gU2coYSxiLGMpO2I9SmcoYSxiLGMpO3JldHVybiBudWxsIT09Yj9iLnNpYmxpbmc6bnVsbH19cmV0dXJuIEpnKGEsYixjKX19ZWxzZSBxZz0hMTtiLmV4cGlyYXRpb25UaW1lPTA7c3dpdGNoKGIudGFnKXtjYXNlIDI6ZD1cbmIuZWxlbWVudFR5cGU7bnVsbCE9PWEmJihhLmFsdGVybmF0ZT1udWxsLGIuYWx0ZXJuYXRlPW51bGwsYi5lZmZlY3RUYWd8PTIpO2E9Yi5wZW5kaW5nUHJvcHM7dmFyIGU9SmUoYixILmN1cnJlbnQpO0lnKGIsYyk7ZT1oZyhudWxsLGIsZCxhLGUsYyk7Yi5lZmZlY3RUYWd8PTE7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBlJiZudWxsIT09ZSYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGUucmVuZGVyJiZ2b2lkIDA9PT1lLiQkdHlwZW9mKXtiLnRhZz0xO2xnKCk7aWYoSihkKSl7dmFyIGY9ITA7T2UoYil9ZWxzZSBmPSExO2IubWVtb2l6ZWRTdGF0ZT1udWxsIT09ZS5zdGF0ZSYmdm9pZCAwIT09ZS5zdGF0ZT9lLnN0YXRlOm51bGw7dmFyIGc9ZC5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM7XCJmdW5jdGlvblwiPT09dHlwZW9mIGcmJmtmKGIsZCxnLGEpO2UudXBkYXRlcj10ZjtiLnN0YXRlTm9kZT1lO2UuX3JlYWN0SW50ZXJuYWxGaWJlcj1iO3hmKGIsZCxhLGMpO2I9UWcobnVsbCxiLGQsITAsZixcbmMpfWVsc2UgYi50YWc9MCxTKG51bGwsYixlLGMpLGI9Yi5jaGlsZDtyZXR1cm4gYjtjYXNlIDE2OmU9Yi5lbGVtZW50VHlwZTtudWxsIT09YSYmKGEuYWx0ZXJuYXRlPW51bGwsYi5hbHRlcm5hdGU9bnVsbCxiLmVmZmVjdFRhZ3w9Mik7Zj1iLnBlbmRpbmdQcm9wczthPWhmKGUpO2IudHlwZT1hO2U9Yi50YWc9V2UoYSk7Zj1MKGEsZik7Zz12b2lkIDA7c3dpdGNoKGUpe2Nhc2UgMDpnPU1nKG51bGwsYixhLGYsYyk7YnJlYWs7Y2FzZSAxOmc9T2cobnVsbCxiLGEsZixjKTticmVhaztjYXNlIDExOmc9SGcobnVsbCxiLGEsZixjKTticmVhaztjYXNlIDE0Omc9S2cobnVsbCxiLGEsTChhLnR5cGUsZiksZCxjKTticmVhaztkZWZhdWx0OngoXCIzMDZcIixhLFwiXCIpfXJldHVybiBnO2Nhc2UgMDpyZXR1cm4gZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxlPWIuZWxlbWVudFR5cGU9PT1kP2U6TChkLGUpLE1nKGEsYixkLGUsYyk7Y2FzZSAxOnJldHVybiBkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLFxuZT1iLmVsZW1lbnRUeXBlPT09ZD9lOkwoZCxlKSxPZyhhLGIsZCxlLGMpO2Nhc2UgMzpSZyhiKTtkPWIudXBkYXRlUXVldWU7bnVsbD09PWQ/eChcIjI4MlwiKTp2b2lkIDA7ZT1iLm1lbW9pemVkU3RhdGU7ZT1udWxsIT09ZT9lLmVsZW1lbnQ6bnVsbDt5ZihiLGQsYi5wZW5kaW5nUHJvcHMsbnVsbCxjKTtkPWIubWVtb2l6ZWRTdGF0ZS5lbGVtZW50O2lmKGQ9PT1lKUZnKCksYj1KZyhhLGIsYyk7ZWxzZXtlPWIuc3RhdGVOb2RlO2lmKGU9KG51bGw9PT1hfHxudWxsPT09YS5jaGlsZCkmJmUuaHlkcmF0ZSl5Zz1FZShiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKSx4Zz1iLGU9emc9ITA7ZT8oYi5lZmZlY3RUYWd8PTIsYi5jaGlsZD1FZihiLG51bGwsZCxjKSk6KFMoYSxiLGQsYyksRmcoKSk7Yj1iLmNoaWxkfXJldHVybiBiO2Nhc2UgNTpyZXR1cm4gTGYoYiksbnVsbD09PWEmJkNnKGIpLGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZj1udWxsIT09YT9hLm1lbW9pemVkUHJvcHM6bnVsbCxcbmc9ZS5jaGlsZHJlbix4ZShkLGUpP2c9bnVsbDpudWxsIT09ZiYmeGUoZCxmKSYmKGIuZWZmZWN0VGFnfD0xNiksTmcoYSxiKSwxIT09YyYmYi5tb2RlJjEmJmUuaGlkZGVuPyhiLmV4cGlyYXRpb25UaW1lPWIuY2hpbGRFeHBpcmF0aW9uVGltZT0xLGI9bnVsbCk6KFMoYSxiLGcsYyksYj1iLmNoaWxkKSxiO2Nhc2UgNjpyZXR1cm4gbnVsbD09PWEmJkNnKGIpLG51bGw7Y2FzZSAxMzpyZXR1cm4gU2coYSxiLGMpO2Nhc2UgNDpyZXR1cm4gSmYoYixiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKSxkPWIucGVuZGluZ1Byb3BzLG51bGw9PT1hP2IuY2hpbGQ9RGYoYixudWxsLGQsYyk6UyhhLGIsZCxjKSxiLmNoaWxkO2Nhc2UgMTE6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOkwoZCxlKSxIZyhhLGIsZCxlLGMpO2Nhc2UgNzpyZXR1cm4gUyhhLGIsYi5wZW5kaW5nUHJvcHMsYyksYi5jaGlsZDtjYXNlIDg6cmV0dXJuIFMoYSxiLGIucGVuZGluZ1Byb3BzLmNoaWxkcmVuLFxuYyksYi5jaGlsZDtjYXNlIDEyOnJldHVybiBTKGEsYixiLnBlbmRpbmdQcm9wcy5jaGlsZHJlbixjKSxiLmNoaWxkO2Nhc2UgMTA6YTp7ZD1iLnR5cGUuX2NvbnRleHQ7ZT1iLnBlbmRpbmdQcm9wcztnPWIubWVtb2l6ZWRQcm9wcztmPWUudmFsdWU7VWcoYixmKTtpZihudWxsIT09Zyl7dmFyIGg9Zy52YWx1ZTtmPWJkKGgsZik/MDooXCJmdW5jdGlvblwiPT09dHlwZW9mIGQuX2NhbGN1bGF0ZUNoYW5nZWRCaXRzP2QuX2NhbGN1bGF0ZUNoYW5nZWRCaXRzKGgsZik6MTA3Mzc0MTgyMyl8MDtpZigwPT09Zil7aWYoZy5jaGlsZHJlbj09PWUuY2hpbGRyZW4mJiFJLmN1cnJlbnQpe2I9SmcoYSxiLGMpO2JyZWFrIGF9fWVsc2UgZm9yKGg9Yi5jaGlsZCxudWxsIT09aCYmKGgucmV0dXJuPWIpO251bGwhPT1oOyl7dmFyIGw9aC5jb250ZXh0RGVwZW5kZW5jaWVzO2lmKG51bGwhPT1sKXtnPWguY2hpbGQ7Zm9yKHZhciBrPWwuZmlyc3Q7bnVsbCE9PWs7KXtpZihrLmNvbnRleHQ9PT1kJiYwIT09XG4oay5vYnNlcnZlZEJpdHMmZikpezE9PT1oLnRhZyYmKGs9bmYoYyksay50YWc9c2YscGYoaCxrKSk7aC5leHBpcmF0aW9uVGltZTxjJiYoaC5leHBpcmF0aW9uVGltZT1jKTtrPWguYWx0ZXJuYXRlO251bGwhPT1rJiZrLmV4cGlyYXRpb25UaW1lPGMmJihrLmV4cGlyYXRpb25UaW1lPWMpO2s9Yztmb3IodmFyIG09aC5yZXR1cm47bnVsbCE9PW07KXt2YXIgcD1tLmFsdGVybmF0ZTtpZihtLmNoaWxkRXhwaXJhdGlvblRpbWU8ayltLmNoaWxkRXhwaXJhdGlvblRpbWU9ayxudWxsIT09cCYmcC5jaGlsZEV4cGlyYXRpb25UaW1lPGsmJihwLmNoaWxkRXhwaXJhdGlvblRpbWU9ayk7ZWxzZSBpZihudWxsIT09cCYmcC5jaGlsZEV4cGlyYXRpb25UaW1lPGspcC5jaGlsZEV4cGlyYXRpb25UaW1lPWs7ZWxzZSBicmVhazttPW0ucmV0dXJufWwuZXhwaXJhdGlvblRpbWU8YyYmKGwuZXhwaXJhdGlvblRpbWU9Yyk7YnJlYWt9az1rLm5leHR9fWVsc2UgZz0xMD09PWgudGFnP2gudHlwZT09PWIudHlwZT9cbm51bGw6aC5jaGlsZDpoLmNoaWxkO2lmKG51bGwhPT1nKWcucmV0dXJuPWg7ZWxzZSBmb3IoZz1oO251bGwhPT1nOyl7aWYoZz09PWIpe2c9bnVsbDticmVha31oPWcuc2libGluZztpZihudWxsIT09aCl7aC5yZXR1cm49Zy5yZXR1cm47Zz1oO2JyZWFrfWc9Zy5yZXR1cm59aD1nfX1TKGEsYixlLmNoaWxkcmVuLGMpO2I9Yi5jaGlsZH1yZXR1cm4gYjtjYXNlIDk6cmV0dXJuIGU9Yi50eXBlLGY9Yi5wZW5kaW5nUHJvcHMsZD1mLmNoaWxkcmVuLElnKGIsYyksZT1NKGUsZi51bnN0YWJsZV9vYnNlcnZlZEJpdHMpLGQ9ZChlKSxiLmVmZmVjdFRhZ3w9MSxTKGEsYixkLGMpLGIuY2hpbGQ7Y2FzZSAxNDpyZXR1cm4gZT1iLnR5cGUsZj1MKGUsYi5wZW5kaW5nUHJvcHMpLGY9TChlLnR5cGUsZiksS2coYSxiLGUsZixkLGMpO2Nhc2UgMTU6cmV0dXJuIExnKGEsYixiLnR5cGUsYi5wZW5kaW5nUHJvcHMsZCxjKTtjYXNlIDE3OnJldHVybiBkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGU9Yi5lbGVtZW50VHlwZT09PVxuZD9lOkwoZCxlKSxudWxsIT09YSYmKGEuYWx0ZXJuYXRlPW51bGwsYi5hbHRlcm5hdGU9bnVsbCxiLmVmZmVjdFRhZ3w9MiksYi50YWc9MSxKKGQpPyhhPSEwLE9lKGIpKTphPSExLElnKGIsYyksdmYoYixkLGUsYykseGYoYixkLGUsYyksUWcobnVsbCxiLGQsITAsYSxjKX14KFwiMTU2XCIpfXZhciBWZz17Y3VycmVudDpudWxsfSxXZz1udWxsLFhnPW51bGwsWWc9bnVsbDtmdW5jdGlvbiBVZyhhLGIpe3ZhciBjPWEudHlwZS5fY29udGV4dDtHKFZnLGMuX2N1cnJlbnRWYWx1ZSxhKTtjLl9jdXJyZW50VmFsdWU9Yn1mdW5jdGlvbiBaZyhhKXt2YXIgYj1WZy5jdXJyZW50O0YoVmcsYSk7YS50eXBlLl9jb250ZXh0Ll9jdXJyZW50VmFsdWU9Yn1mdW5jdGlvbiBJZyhhLGIpe1dnPWE7WWc9WGc9bnVsbDt2YXIgYz1hLmNvbnRleHREZXBlbmRlbmNpZXM7bnVsbCE9PWMmJmMuZXhwaXJhdGlvblRpbWU+PWImJihxZz0hMCk7YS5jb250ZXh0RGVwZW5kZW5jaWVzPW51bGx9XG5mdW5jdGlvbiBNKGEsYil7aWYoWWchPT1hJiYhMSE9PWImJjAhPT1iKXtpZihcIm51bWJlclwiIT09dHlwZW9mIGJ8fDEwNzM3NDE4MjM9PT1iKVlnPWEsYj0xMDczNzQxODIzO2I9e2NvbnRleHQ6YSxvYnNlcnZlZEJpdHM6YixuZXh0Om51bGx9O251bGw9PT1YZz8obnVsbD09PVdnP3goXCIzMDhcIik6dm9pZCAwLFhnPWIsV2cuY29udGV4dERlcGVuZGVuY2llcz17Zmlyc3Q6YixleHBpcmF0aW9uVGltZTowfSk6WGc9WGcubmV4dD1ifXJldHVybiBhLl9jdXJyZW50VmFsdWV9dmFyICRnPTAscmY9MSxzZj0yLGFoPTMsUGc9ITE7ZnVuY3Rpb24gYmgoYSl7cmV0dXJue2Jhc2VTdGF0ZTphLGZpcnN0VXBkYXRlOm51bGwsbGFzdFVwZGF0ZTpudWxsLGZpcnN0Q2FwdHVyZWRVcGRhdGU6bnVsbCxsYXN0Q2FwdHVyZWRVcGRhdGU6bnVsbCxmaXJzdEVmZmVjdDpudWxsLGxhc3RFZmZlY3Q6bnVsbCxmaXJzdENhcHR1cmVkRWZmZWN0Om51bGwsbGFzdENhcHR1cmVkRWZmZWN0Om51bGx9fVxuZnVuY3Rpb24gY2goYSl7cmV0dXJue2Jhc2VTdGF0ZTphLmJhc2VTdGF0ZSxmaXJzdFVwZGF0ZTphLmZpcnN0VXBkYXRlLGxhc3RVcGRhdGU6YS5sYXN0VXBkYXRlLGZpcnN0Q2FwdHVyZWRVcGRhdGU6bnVsbCxsYXN0Q2FwdHVyZWRVcGRhdGU6bnVsbCxmaXJzdEVmZmVjdDpudWxsLGxhc3RFZmZlY3Q6bnVsbCxmaXJzdENhcHR1cmVkRWZmZWN0Om51bGwsbGFzdENhcHR1cmVkRWZmZWN0Om51bGx9fWZ1bmN0aW9uIG5mKGEpe3JldHVybntleHBpcmF0aW9uVGltZTphLHRhZzokZyxwYXlsb2FkOm51bGwsY2FsbGJhY2s6bnVsbCxuZXh0Om51bGwsbmV4dEVmZmVjdDpudWxsfX1mdW5jdGlvbiBkaChhLGIpe251bGw9PT1hLmxhc3RVcGRhdGU/YS5maXJzdFVwZGF0ZT1hLmxhc3RVcGRhdGU9YjooYS5sYXN0VXBkYXRlLm5leHQ9YixhLmxhc3RVcGRhdGU9Yil9XG5mdW5jdGlvbiBwZihhLGIpe3ZhciBjPWEuYWx0ZXJuYXRlO2lmKG51bGw9PT1jKXt2YXIgZD1hLnVwZGF0ZVF1ZXVlO3ZhciBlPW51bGw7bnVsbD09PWQmJihkPWEudXBkYXRlUXVldWU9YmgoYS5tZW1vaXplZFN0YXRlKSl9ZWxzZSBkPWEudXBkYXRlUXVldWUsZT1jLnVwZGF0ZVF1ZXVlLG51bGw9PT1kP251bGw9PT1lPyhkPWEudXBkYXRlUXVldWU9YmgoYS5tZW1vaXplZFN0YXRlKSxlPWMudXBkYXRlUXVldWU9YmgoYy5tZW1vaXplZFN0YXRlKSk6ZD1hLnVwZGF0ZVF1ZXVlPWNoKGUpOm51bGw9PT1lJiYoZT1jLnVwZGF0ZVF1ZXVlPWNoKGQpKTtudWxsPT09ZXx8ZD09PWU/ZGgoZCxiKTpudWxsPT09ZC5sYXN0VXBkYXRlfHxudWxsPT09ZS5sYXN0VXBkYXRlPyhkaChkLGIpLGRoKGUsYikpOihkaChkLGIpLGUubGFzdFVwZGF0ZT1iKX1cbmZ1bmN0aW9uIGVoKGEsYil7dmFyIGM9YS51cGRhdGVRdWV1ZTtjPW51bGw9PT1jP2EudXBkYXRlUXVldWU9YmgoYS5tZW1vaXplZFN0YXRlKTpmaChhLGMpO251bGw9PT1jLmxhc3RDYXB0dXJlZFVwZGF0ZT9jLmZpcnN0Q2FwdHVyZWRVcGRhdGU9Yy5sYXN0Q2FwdHVyZWRVcGRhdGU9YjooYy5sYXN0Q2FwdHVyZWRVcGRhdGUubmV4dD1iLGMubGFzdENhcHR1cmVkVXBkYXRlPWIpfWZ1bmN0aW9uIGZoKGEsYil7dmFyIGM9YS5hbHRlcm5hdGU7bnVsbCE9PWMmJmI9PT1jLnVwZGF0ZVF1ZXVlJiYoYj1hLnVwZGF0ZVF1ZXVlPWNoKGIpKTtyZXR1cm4gYn1cbmZ1bmN0aW9uIGdoKGEsYixjLGQsZSxmKXtzd2l0Y2goYy50YWcpe2Nhc2UgcmY6cmV0dXJuIGE9Yy5wYXlsb2FkLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhP2EuY2FsbChmLGQsZSk6YTtjYXNlIGFoOmEuZWZmZWN0VGFnPWEuZWZmZWN0VGFnJi0yMDQ5fDY0O2Nhc2UgJGc6YT1jLnBheWxvYWQ7ZT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgYT9hLmNhbGwoZixkLGUpOmE7aWYobnVsbD09PWV8fHZvaWQgMD09PWUpYnJlYWs7cmV0dXJuIG4oe30sZCxlKTtjYXNlIHNmOlBnPSEwfXJldHVybiBkfVxuZnVuY3Rpb24geWYoYSxiLGMsZCxlKXtQZz0hMTtiPWZoKGEsYik7Zm9yKHZhciBmPWIuYmFzZVN0YXRlLGc9bnVsbCxoPTAsbD1iLmZpcnN0VXBkYXRlLGs9ZjtudWxsIT09bDspe3ZhciBtPWwuZXhwaXJhdGlvblRpbWU7bTxlPyhudWxsPT09ZyYmKGc9bCxmPWspLGg8bSYmKGg9bSkpOihrPWdoKGEsYixsLGssYyxkKSxudWxsIT09bC5jYWxsYmFjayYmKGEuZWZmZWN0VGFnfD0zMixsLm5leHRFZmZlY3Q9bnVsbCxudWxsPT09Yi5sYXN0RWZmZWN0P2IuZmlyc3RFZmZlY3Q9Yi5sYXN0RWZmZWN0PWw6KGIubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWwsYi5sYXN0RWZmZWN0PWwpKSk7bD1sLm5leHR9bT1udWxsO2ZvcihsPWIuZmlyc3RDYXB0dXJlZFVwZGF0ZTtudWxsIT09bDspe3ZhciBwPWwuZXhwaXJhdGlvblRpbWU7cDxlPyhudWxsPT09bSYmKG09bCxudWxsPT09ZyYmKGY9aykpLGg8cCYmKGg9cCkpOihrPWdoKGEsYixsLGssYyxkKSxudWxsIT09bC5jYWxsYmFjayYmKGEuZWZmZWN0VGFnfD1cbjMyLGwubmV4dEVmZmVjdD1udWxsLG51bGw9PT1iLmxhc3RDYXB0dXJlZEVmZmVjdD9iLmZpcnN0Q2FwdHVyZWRFZmZlY3Q9Yi5sYXN0Q2FwdHVyZWRFZmZlY3Q9bDooYi5sYXN0Q2FwdHVyZWRFZmZlY3QubmV4dEVmZmVjdD1sLGIubGFzdENhcHR1cmVkRWZmZWN0PWwpKSk7bD1sLm5leHR9bnVsbD09PWcmJihiLmxhc3RVcGRhdGU9bnVsbCk7bnVsbD09PW0/Yi5sYXN0Q2FwdHVyZWRVcGRhdGU9bnVsbDphLmVmZmVjdFRhZ3w9MzI7bnVsbD09PWcmJm51bGw9PT1tJiYoZj1rKTtiLmJhc2VTdGF0ZT1mO2IuZmlyc3RVcGRhdGU9ZztiLmZpcnN0Q2FwdHVyZWRVcGRhdGU9bTthLmV4cGlyYXRpb25UaW1lPWg7YS5tZW1vaXplZFN0YXRlPWt9XG5mdW5jdGlvbiBoaChhLGIsYyl7bnVsbCE9PWIuZmlyc3RDYXB0dXJlZFVwZGF0ZSYmKG51bGwhPT1iLmxhc3RVcGRhdGUmJihiLmxhc3RVcGRhdGUubmV4dD1iLmZpcnN0Q2FwdHVyZWRVcGRhdGUsYi5sYXN0VXBkYXRlPWIubGFzdENhcHR1cmVkVXBkYXRlKSxiLmZpcnN0Q2FwdHVyZWRVcGRhdGU9Yi5sYXN0Q2FwdHVyZWRVcGRhdGU9bnVsbCk7aWgoYi5maXJzdEVmZmVjdCxjKTtiLmZpcnN0RWZmZWN0PWIubGFzdEVmZmVjdD1udWxsO2loKGIuZmlyc3RDYXB0dXJlZEVmZmVjdCxjKTtiLmZpcnN0Q2FwdHVyZWRFZmZlY3Q9Yi5sYXN0Q2FwdHVyZWRFZmZlY3Q9bnVsbH1mdW5jdGlvbiBpaChhLGIpe2Zvcig7bnVsbCE9PWE7KXt2YXIgYz1hLmNhbGxiYWNrO2lmKG51bGwhPT1jKXthLmNhbGxiYWNrPW51bGw7dmFyIGQ9YjtcImZ1bmN0aW9uXCIhPT10eXBlb2YgYz94KFwiMTkxXCIsYyk6dm9pZCAwO2MuY2FsbChkKX1hPWEubmV4dEVmZmVjdH19XG5mdW5jdGlvbiBqaChhLGIpe3JldHVybnt2YWx1ZTphLHNvdXJjZTpiLHN0YWNrOmpjKGIpfX1mdW5jdGlvbiBraChhKXthLmVmZmVjdFRhZ3w9NH12YXIgbGg9dm9pZCAwLG1oPXZvaWQgMCxuaD12b2lkIDAsb2g9dm9pZCAwO2xoPWZ1bmN0aW9uKGEsYil7Zm9yKHZhciBjPWIuY2hpbGQ7bnVsbCE9PWM7KXtpZig1PT09Yy50YWd8fDY9PT1jLnRhZylhLmFwcGVuZENoaWxkKGMuc3RhdGVOb2RlKTtlbHNlIGlmKDQhPT1jLnRhZyYmbnVsbCE9PWMuY2hpbGQpe2MuY2hpbGQucmV0dXJuPWM7Yz1jLmNoaWxkO2NvbnRpbnVlfWlmKGM9PT1iKWJyZWFrO2Zvcig7bnVsbD09PWMuc2libGluZzspe2lmKG51bGw9PT1jLnJldHVybnx8Yy5yZXR1cm49PT1iKXJldHVybjtjPWMucmV0dXJufWMuc2libGluZy5yZXR1cm49Yy5yZXR1cm47Yz1jLnNpYmxpbmd9fTttaD1mdW5jdGlvbigpe307XG5uaD1mdW5jdGlvbihhLGIsYyxkLGUpe3ZhciBmPWEubWVtb2l6ZWRQcm9wcztpZihmIT09ZCl7dmFyIGc9Yi5zdGF0ZU5vZGU7SWYoTi5jdXJyZW50KTthPW51bGw7c3dpdGNoKGMpe2Nhc2UgXCJpbnB1dFwiOmY9dmMoZyxmKTtkPXZjKGcsZCk7YT1bXTticmVhaztjYXNlIFwib3B0aW9uXCI6Zj0kZChnLGYpO2Q9JGQoZyxkKTthPVtdO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpmPW4oe30sZix7dmFsdWU6dm9pZCAwfSk7ZD1uKHt9LGQse3ZhbHVlOnZvaWQgMH0pO2E9W107YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6Zj1iZShnLGYpO2Q9YmUoZyxkKTthPVtdO2JyZWFrO2RlZmF1bHQ6XCJmdW5jdGlvblwiIT09dHlwZW9mIGYub25DbGljayYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGQub25DbGljayYmKGcub25jbGljaz10ZSl9cWUoYyxkKTtnPWM9dm9pZCAwO3ZhciBoPW51bGw7Zm9yKGMgaW4gZilpZighZC5oYXNPd25Qcm9wZXJ0eShjKSYmZi5oYXNPd25Qcm9wZXJ0eShjKSYmbnVsbCE9ZltjXSlpZihcInN0eWxlXCI9PT1cbmMpe3ZhciBsPWZbY107Zm9yKGcgaW4gbClsLmhhc093blByb3BlcnR5KGcpJiYoaHx8KGg9e30pLGhbZ109XCJcIil9ZWxzZVwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIiE9PWMmJlwiY2hpbGRyZW5cIiE9PWMmJlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT1jJiZcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiIT09YyYmXCJhdXRvRm9jdXNcIiE9PWMmJihyYS5oYXNPd25Qcm9wZXJ0eShjKT9hfHwoYT1bXSk6KGE9YXx8W10pLnB1c2goYyxudWxsKSk7Zm9yKGMgaW4gZCl7dmFyIGs9ZFtjXTtsPW51bGwhPWY/ZltjXTp2b2lkIDA7aWYoZC5oYXNPd25Qcm9wZXJ0eShjKSYmayE9PWwmJihudWxsIT1rfHxudWxsIT1sKSlpZihcInN0eWxlXCI9PT1jKWlmKGwpe2ZvcihnIGluIGwpIWwuaGFzT3duUHJvcGVydHkoZyl8fGsmJmsuaGFzT3duUHJvcGVydHkoZyl8fChofHwoaD17fSksaFtnXT1cIlwiKTtmb3IoZyBpbiBrKWsuaGFzT3duUHJvcGVydHkoZykmJmxbZ10hPT1rW2ddJiYoaHx8XG4oaD17fSksaFtnXT1rW2ddKX1lbHNlIGh8fChhfHwoYT1bXSksYS5wdXNoKGMsaCkpLGg9aztlbHNlXCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiPT09Yz8oaz1rP2suX19odG1sOnZvaWQgMCxsPWw/bC5fX2h0bWw6dm9pZCAwLG51bGwhPWsmJmwhPT1rJiYoYT1hfHxbXSkucHVzaChjLFwiXCIraykpOlwiY2hpbGRyZW5cIj09PWM/bD09PWt8fFwic3RyaW5nXCIhPT10eXBlb2YgayYmXCJudW1iZXJcIiE9PXR5cGVvZiBrfHwoYT1hfHxbXSkucHVzaChjLFwiXCIrayk6XCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmdcIiE9PWMmJlwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nXCIhPT1jJiYocmEuaGFzT3duUHJvcGVydHkoYyk/KG51bGwhPWsmJnNlKGUsYyksYXx8bD09PWt8fChhPVtdKSk6KGE9YXx8W10pLnB1c2goYyxrKSl9aCYmKGE9YXx8W10pLnB1c2goXCJzdHlsZVwiLGgpO2U9YTsoYi51cGRhdGVRdWV1ZT1lKSYma2goYil9fTtvaD1mdW5jdGlvbihhLGIsYyxkKXtjIT09ZCYma2goYil9O1xudmFyIHBoPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBXZWFrU2V0P1dlYWtTZXQ6U2V0O2Z1bmN0aW9uIHFoKGEsYil7dmFyIGM9Yi5zb3VyY2UsZD1iLnN0YWNrO251bGw9PT1kJiZudWxsIT09YyYmKGQ9amMoYykpO251bGwhPT1jJiZpYyhjLnR5cGUpO2I9Yi52YWx1ZTtudWxsIT09YSYmMT09PWEudGFnJiZpYyhhLnR5cGUpO3RyeXtjb25zb2xlLmVycm9yKGIpfWNhdGNoKGUpe3NldFRpbWVvdXQoZnVuY3Rpb24oKXt0aHJvdyBlO30pfX1mdW5jdGlvbiByaChhKXt2YXIgYj1hLnJlZjtpZihudWxsIT09YilpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYil0cnl7YihudWxsKX1jYXRjaChjKXtzaChhLGMpfWVsc2UgYi5jdXJyZW50PW51bGx9XG5mdW5jdGlvbiB0aChhLGIsYyl7Yz1jLnVwZGF0ZVF1ZXVlO2M9bnVsbCE9PWM/Yy5sYXN0RWZmZWN0Om51bGw7aWYobnVsbCE9PWMpe3ZhciBkPWM9Yy5uZXh0O2Rve2lmKChkLnRhZyZhKSE9PU5mKXt2YXIgZT1kLmRlc3Ryb3k7ZC5kZXN0cm95PXZvaWQgMDt2b2lkIDAhPT1lJiZlKCl9KGQudGFnJmIpIT09TmYmJihlPWQuY3JlYXRlLGQuZGVzdHJveT1lKCkpO2Q9ZC5uZXh0fXdoaWxlKGQhPT1jKX19XG5mdW5jdGlvbiB1aChhLGIpe2Zvcih2YXIgYz1hOzspe2lmKDU9PT1jLnRhZyl7dmFyIGQ9Yy5zdGF0ZU5vZGU7aWYoYilkLnN0eWxlLmRpc3BsYXk9XCJub25lXCI7ZWxzZXtkPWMuc3RhdGVOb2RlO3ZhciBlPWMubWVtb2l6ZWRQcm9wcy5zdHlsZTtlPXZvaWQgMCE9PWUmJm51bGwhPT1lJiZlLmhhc093blByb3BlcnR5KFwiZGlzcGxheVwiKT9lLmRpc3BsYXk6bnVsbDtkLnN0eWxlLmRpc3BsYXk9bmUoXCJkaXNwbGF5XCIsZSl9fWVsc2UgaWYoNj09PWMudGFnKWMuc3RhdGVOb2RlLm5vZGVWYWx1ZT1iP1wiXCI6Yy5tZW1vaXplZFByb3BzO2Vsc2UgaWYoMTM9PT1jLnRhZyYmbnVsbCE9PWMubWVtb2l6ZWRTdGF0ZSl7ZD1jLmNoaWxkLnNpYmxpbmc7ZC5yZXR1cm49YztjPWQ7Y29udGludWV9ZWxzZSBpZihudWxsIT09Yy5jaGlsZCl7Yy5jaGlsZC5yZXR1cm49YztjPWMuY2hpbGQ7Y29udGludWV9aWYoYz09PWEpYnJlYWs7Zm9yKDtudWxsPT09Yy5zaWJsaW5nOyl7aWYobnVsbD09PWMucmV0dXJufHxcbmMucmV0dXJuPT09YSlyZXR1cm47Yz1jLnJldHVybn1jLnNpYmxpbmcucmV0dXJuPWMucmV0dXJuO2M9Yy5zaWJsaW5nfX1cbmZ1bmN0aW9uIHZoKGEpe1wiZnVuY3Rpb25cIj09PXR5cGVvZiBSZSYmUmUoYSk7c3dpdGNoKGEudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE0OmNhc2UgMTU6dmFyIGI9YS51cGRhdGVRdWV1ZTtpZihudWxsIT09YiYmKGI9Yi5sYXN0RWZmZWN0LG51bGwhPT1iKSl7dmFyIGM9Yj1iLm5leHQ7ZG97dmFyIGQ9Yy5kZXN0cm95O2lmKHZvaWQgMCE9PWQpe3ZhciBlPWE7dHJ5e2QoKX1jYXRjaChmKXtzaChlLGYpfX1jPWMubmV4dH13aGlsZShjIT09Yil9YnJlYWs7Y2FzZSAxOnJoKGEpO2I9YS5zdGF0ZU5vZGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGIuY29tcG9uZW50V2lsbFVubW91bnQpdHJ5e2IucHJvcHM9YS5tZW1vaXplZFByb3BzLGIuc3RhdGU9YS5tZW1vaXplZFN0YXRlLGIuY29tcG9uZW50V2lsbFVubW91bnQoKX1jYXRjaChmKXtzaChhLGYpfWJyZWFrO2Nhc2UgNTpyaChhKTticmVhaztjYXNlIDQ6d2goYSl9fVxuZnVuY3Rpb24geGgoYSl7cmV0dXJuIDU9PT1hLnRhZ3x8Mz09PWEudGFnfHw0PT09YS50YWd9XG5mdW5jdGlvbiB5aChhKXthOntmb3IodmFyIGI9YS5yZXR1cm47bnVsbCE9PWI7KXtpZih4aChiKSl7dmFyIGM9YjticmVhayBhfWI9Yi5yZXR1cm59eChcIjE2MFwiKTtjPXZvaWQgMH12YXIgZD1iPXZvaWQgMDtzd2l0Y2goYy50YWcpe2Nhc2UgNTpiPWMuc3RhdGVOb2RlO2Q9ITE7YnJlYWs7Y2FzZSAzOmI9Yy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztkPSEwO2JyZWFrO2Nhc2UgNDpiPWMuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87ZD0hMDticmVhaztkZWZhdWx0OngoXCIxNjFcIil9Yy5lZmZlY3RUYWcmMTYmJihrZShiLFwiXCIpLGMuZWZmZWN0VGFnJj0tMTcpO2E6Yjpmb3IoYz1hOzspe2Zvcig7bnVsbD09PWMuc2libGluZzspe2lmKG51bGw9PT1jLnJldHVybnx8eGgoYy5yZXR1cm4pKXtjPW51bGw7YnJlYWsgYX1jPWMucmV0dXJufWMuc2libGluZy5yZXR1cm49Yy5yZXR1cm47Zm9yKGM9Yy5zaWJsaW5nOzUhPT1jLnRhZyYmNiE9PWMudGFnJiYxOCE9PWMudGFnOyl7aWYoYy5lZmZlY3RUYWcmXG4yKWNvbnRpbnVlIGI7aWYobnVsbD09PWMuY2hpbGR8fDQ9PT1jLnRhZyljb250aW51ZSBiO2Vsc2UgYy5jaGlsZC5yZXR1cm49YyxjPWMuY2hpbGR9aWYoIShjLmVmZmVjdFRhZyYyKSl7Yz1jLnN0YXRlTm9kZTticmVhayBhfX1mb3IodmFyIGU9YTs7KXtpZig1PT09ZS50YWd8fDY9PT1lLnRhZylpZihjKWlmKGQpe3ZhciBmPWIsZz1lLnN0YXRlTm9kZSxoPWM7OD09PWYubm9kZVR5cGU/Zi5wYXJlbnROb2RlLmluc2VydEJlZm9yZShnLGgpOmYuaW5zZXJ0QmVmb3JlKGcsaCl9ZWxzZSBiLmluc2VydEJlZm9yZShlLnN0YXRlTm9kZSxjKTtlbHNlIGQ/KGc9YixoPWUuc3RhdGVOb2RlLDg9PT1nLm5vZGVUeXBlPyhmPWcucGFyZW50Tm9kZSxmLmluc2VydEJlZm9yZShoLGcpKTooZj1nLGYuYXBwZW5kQ2hpbGQoaCkpLGc9Zy5fcmVhY3RSb290Q29udGFpbmVyLG51bGwhPT1nJiZ2b2lkIDAhPT1nfHxudWxsIT09Zi5vbmNsaWNrfHwoZi5vbmNsaWNrPXRlKSk6Yi5hcHBlbmRDaGlsZChlLnN0YXRlTm9kZSk7XG5lbHNlIGlmKDQhPT1lLnRhZyYmbnVsbCE9PWUuY2hpbGQpe2UuY2hpbGQucmV0dXJuPWU7ZT1lLmNoaWxkO2NvbnRpbnVlfWlmKGU9PT1hKWJyZWFrO2Zvcig7bnVsbD09PWUuc2libGluZzspe2lmKG51bGw9PT1lLnJldHVybnx8ZS5yZXR1cm49PT1hKXJldHVybjtlPWUucmV0dXJufWUuc2libGluZy5yZXR1cm49ZS5yZXR1cm47ZT1lLnNpYmxpbmd9fVxuZnVuY3Rpb24gd2goYSl7Zm9yKHZhciBiPWEsYz0hMSxkPXZvaWQgMCxlPXZvaWQgMDs7KXtpZighYyl7Yz1iLnJldHVybjthOmZvcig7Oyl7bnVsbD09PWM/eChcIjE2MFwiKTp2b2lkIDA7c3dpdGNoKGMudGFnKXtjYXNlIDU6ZD1jLnN0YXRlTm9kZTtlPSExO2JyZWFrIGE7Y2FzZSAzOmQ9Yy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztlPSEwO2JyZWFrIGE7Y2FzZSA0OmQ9Yy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztlPSEwO2JyZWFrIGF9Yz1jLnJldHVybn1jPSEwfWlmKDU9PT1iLnRhZ3x8Nj09PWIudGFnKXthOmZvcih2YXIgZj1iLGc9Zjs7KWlmKHZoKGcpLG51bGwhPT1nLmNoaWxkJiY0IT09Zy50YWcpZy5jaGlsZC5yZXR1cm49ZyxnPWcuY2hpbGQ7ZWxzZXtpZihnPT09ZilicmVhaztmb3IoO251bGw9PT1nLnNpYmxpbmc7KXtpZihudWxsPT09Zy5yZXR1cm58fGcucmV0dXJuPT09ZilicmVhayBhO2c9Zy5yZXR1cm59Zy5zaWJsaW5nLnJldHVybj1nLnJldHVybjtnPWcuc2libGluZ31lP1xuKGY9ZCxnPWIuc3RhdGVOb2RlLDg9PT1mLm5vZGVUeXBlP2YucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChnKTpmLnJlbW92ZUNoaWxkKGcpKTpkLnJlbW92ZUNoaWxkKGIuc3RhdGVOb2RlKX1lbHNlIGlmKDQ9PT1iLnRhZyl7aWYobnVsbCE9PWIuY2hpbGQpe2Q9Yi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztlPSEwO2IuY2hpbGQucmV0dXJuPWI7Yj1iLmNoaWxkO2NvbnRpbnVlfX1lbHNlIGlmKHZoKGIpLG51bGwhPT1iLmNoaWxkKXtiLmNoaWxkLnJldHVybj1iO2I9Yi5jaGlsZDtjb250aW51ZX1pZihiPT09YSlicmVhaztmb3IoO251bGw9PT1iLnNpYmxpbmc7KXtpZihudWxsPT09Yi5yZXR1cm58fGIucmV0dXJuPT09YSlyZXR1cm47Yj1iLnJldHVybjs0PT09Yi50YWcmJihjPSExKX1iLnNpYmxpbmcucmV0dXJuPWIucmV0dXJuO2I9Yi5zaWJsaW5nfX1cbmZ1bmN0aW9uIHpoKGEsYil7c3dpdGNoKGIudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE0OmNhc2UgMTU6dGgoUGYsUWYsYik7YnJlYWs7Y2FzZSAxOmJyZWFrO2Nhc2UgNTp2YXIgYz1iLnN0YXRlTm9kZTtpZihudWxsIT1jKXt2YXIgZD1iLm1lbW9pemVkUHJvcHM7YT1udWxsIT09YT9hLm1lbW9pemVkUHJvcHM6ZDt2YXIgZT1iLnR5cGUsZj1iLnVwZGF0ZVF1ZXVlO2IudXBkYXRlUXVldWU9bnVsbDtudWxsIT09ZiYmQ2UoYyxmLGUsYSxkLGIpfWJyZWFrO2Nhc2UgNjpudWxsPT09Yi5zdGF0ZU5vZGU/eChcIjE2MlwiKTp2b2lkIDA7Yi5zdGF0ZU5vZGUubm9kZVZhbHVlPWIubWVtb2l6ZWRQcm9wczticmVhaztjYXNlIDM6YnJlYWs7Y2FzZSAxMjpicmVhaztjYXNlIDEzOmM9Yi5tZW1vaXplZFN0YXRlO2Q9dm9pZCAwO2E9YjtudWxsPT09Yz9kPSExOihkPSEwLGE9Yi5jaGlsZCwwPT09Yy50aW1lZE91dEF0JiYoYy50aW1lZE91dEF0PWxmKCkpKTtudWxsIT09YSYmdWgoYSxkKTtjPVxuYi51cGRhdGVRdWV1ZTtpZihudWxsIT09Yyl7Yi51cGRhdGVRdWV1ZT1udWxsO3ZhciBnPWIuc3RhdGVOb2RlO251bGw9PT1nJiYoZz1iLnN0YXRlTm9kZT1uZXcgcGgpO2MuZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYz1BaC5iaW5kKG51bGwsYixhKTtnLmhhcyhhKXx8KGcuYWRkKGEpLGEudGhlbihjLGMpKX0pfWJyZWFrO2Nhc2UgMTc6YnJlYWs7ZGVmYXVsdDp4KFwiMTYzXCIpfX12YXIgQmg9XCJmdW5jdGlvblwiPT09dHlwZW9mIFdlYWtNYXA/V2Vha01hcDpNYXA7ZnVuY3Rpb24gQ2goYSxiLGMpe2M9bmYoYyk7Yy50YWc9YWg7Yy5wYXlsb2FkPXtlbGVtZW50Om51bGx9O3ZhciBkPWIudmFsdWU7Yy5jYWxsYmFjaz1mdW5jdGlvbigpe0RoKGQpO3FoKGEsYil9O3JldHVybiBjfVxuZnVuY3Rpb24gRWgoYSxiLGMpe2M9bmYoYyk7Yy50YWc9YWg7dmFyIGQ9YS50eXBlLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcjtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZCl7dmFyIGU9Yi52YWx1ZTtjLnBheWxvYWQ9ZnVuY3Rpb24oKXtyZXR1cm4gZChlKX19dmFyIGY9YS5zdGF0ZU5vZGU7bnVsbCE9PWYmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBmLmNvbXBvbmVudERpZENhdGNoJiYoYy5jYWxsYmFjaz1mdW5jdGlvbigpe1wiZnVuY3Rpb25cIiE9PXR5cGVvZiBkJiYobnVsbD09PUZoP0ZoPW5ldyBTZXQoW3RoaXNdKTpGaC5hZGQodGhpcykpO3ZhciBjPWIudmFsdWUsZT1iLnN0YWNrO3FoKGEsYik7dGhpcy5jb21wb25lbnREaWRDYXRjaChjLHtjb21wb25lbnRTdGFjazpudWxsIT09ZT9lOlwiXCJ9KX0pO3JldHVybiBjfVxuZnVuY3Rpb24gR2goYSl7c3dpdGNoKGEudGFnKXtjYXNlIDE6SihhLnR5cGUpJiZLZShhKTt2YXIgYj1hLmVmZmVjdFRhZztyZXR1cm4gYiYyMDQ4PyhhLmVmZmVjdFRhZz1iJi0yMDQ5fDY0LGEpOm51bGw7Y2FzZSAzOnJldHVybiBLZihhKSxMZShhKSxiPWEuZWZmZWN0VGFnLDAhPT0oYiY2NCk/eChcIjI4NVwiKTp2b2lkIDAsYS5lZmZlY3RUYWc9YiYtMjA0OXw2NCxhO2Nhc2UgNTpyZXR1cm4gTWYoYSksbnVsbDtjYXNlIDEzOnJldHVybiBiPWEuZWZmZWN0VGFnLGImMjA0OD8oYS5lZmZlY3RUYWc9YiYtMjA0OXw2NCxhKTpudWxsO2Nhc2UgMTg6cmV0dXJuIG51bGw7Y2FzZSA0OnJldHVybiBLZihhKSxudWxsO2Nhc2UgMTA6cmV0dXJuIFpnKGEpLG51bGw7ZGVmYXVsdDpyZXR1cm4gbnVsbH19XG52YXIgSGg9VGIuUmVhY3RDdXJyZW50RGlzcGF0Y2hlcixJaD1UYi5SZWFjdEN1cnJlbnRPd25lcixKaD0xMDczNzQxODIyLEtoPSExLFQ9bnVsbCxMaD1udWxsLFU9MCxNaD0tMSxOaD0hMSxWPW51bGwsT2g9ITEsUGg9bnVsbCxRaD1udWxsLFJoPW51bGwsRmg9bnVsbDtmdW5jdGlvbiBTaCgpe2lmKG51bGwhPT1UKWZvcih2YXIgYT1ULnJldHVybjtudWxsIT09YTspe3ZhciBiPWE7c3dpdGNoKGIudGFnKXtjYXNlIDE6dmFyIGM9Yi50eXBlLmNoaWxkQ29udGV4dFR5cGVzO251bGwhPT1jJiZ2b2lkIDAhPT1jJiZLZShiKTticmVhaztjYXNlIDM6S2YoYik7TGUoYik7YnJlYWs7Y2FzZSA1Ok1mKGIpO2JyZWFrO2Nhc2UgNDpLZihiKTticmVhaztjYXNlIDEwOlpnKGIpfWE9YS5yZXR1cm59TGg9bnVsbDtVPTA7TWg9LTE7Tmg9ITE7VD1udWxsfVxuZnVuY3Rpb24gVGgoKXtmb3IoO251bGwhPT1WOyl7dmFyIGE9Vi5lZmZlY3RUYWc7YSYxNiYma2UoVi5zdGF0ZU5vZGUsXCJcIik7aWYoYSYxMjgpe3ZhciBiPVYuYWx0ZXJuYXRlO251bGwhPT1iJiYoYj1iLnJlZixudWxsIT09YiYmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBiP2IobnVsbCk6Yi5jdXJyZW50PW51bGwpKX1zd2l0Y2goYSYxNCl7Y2FzZSAyOnloKFYpO1YuZWZmZWN0VGFnJj0tMzticmVhaztjYXNlIDY6eWgoVik7Vi5lZmZlY3RUYWcmPS0zO3poKFYuYWx0ZXJuYXRlLFYpO2JyZWFrO2Nhc2UgNDp6aChWLmFsdGVybmF0ZSxWKTticmVhaztjYXNlIDg6YT1WLHdoKGEpLGEucmV0dXJuPW51bGwsYS5jaGlsZD1udWxsLGEubWVtb2l6ZWRTdGF0ZT1udWxsLGEudXBkYXRlUXVldWU9bnVsbCxhPWEuYWx0ZXJuYXRlLG51bGwhPT1hJiYoYS5yZXR1cm49bnVsbCxhLmNoaWxkPW51bGwsYS5tZW1vaXplZFN0YXRlPW51bGwsYS51cGRhdGVRdWV1ZT1udWxsKX1WPVYubmV4dEVmZmVjdH19XG5mdW5jdGlvbiBVaCgpe2Zvcig7bnVsbCE9PVY7KXtpZihWLmVmZmVjdFRhZyYyNTYpYTp7dmFyIGE9Vi5hbHRlcm5hdGUsYj1WO3N3aXRjaChiLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNTp0aChPZixOZixiKTticmVhayBhO2Nhc2UgMTppZihiLmVmZmVjdFRhZyYyNTYmJm51bGwhPT1hKXt2YXIgYz1hLm1lbW9pemVkUHJvcHMsZD1hLm1lbW9pemVkU3RhdGU7YT1iLnN0YXRlTm9kZTtiPWEuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUoYi5lbGVtZW50VHlwZT09PWIudHlwZT9jOkwoYi50eXBlLGMpLGQpO2EuX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGU9Yn1icmVhayBhO2Nhc2UgMzpjYXNlIDU6Y2FzZSA2OmNhc2UgNDpjYXNlIDE3OmJyZWFrIGE7ZGVmYXVsdDp4KFwiMTYzXCIpfX1WPVYubmV4dEVmZmVjdH19XG5mdW5jdGlvbiBWaChhLGIpe2Zvcig7bnVsbCE9PVY7KXt2YXIgYz1WLmVmZmVjdFRhZztpZihjJjM2KXt2YXIgZD1WLmFsdGVybmF0ZSxlPVYsZj1iO3N3aXRjaChlLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNTp0aChSZixTZixlKTticmVhaztjYXNlIDE6dmFyIGc9ZS5zdGF0ZU5vZGU7aWYoZS5lZmZlY3RUYWcmNClpZihudWxsPT09ZClnLmNvbXBvbmVudERpZE1vdW50KCk7ZWxzZXt2YXIgaD1lLmVsZW1lbnRUeXBlPT09ZS50eXBlP2QubWVtb2l6ZWRQcm9wczpMKGUudHlwZSxkLm1lbW9pemVkUHJvcHMpO2cuY29tcG9uZW50RGlkVXBkYXRlKGgsZC5tZW1vaXplZFN0YXRlLGcuX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGUpfWQ9ZS51cGRhdGVRdWV1ZTtudWxsIT09ZCYmaGgoZSxkLGcsZik7YnJlYWs7Y2FzZSAzOmQ9ZS51cGRhdGVRdWV1ZTtpZihudWxsIT09ZCl7Zz1udWxsO2lmKG51bGwhPT1lLmNoaWxkKXN3aXRjaChlLmNoaWxkLnRhZyl7Y2FzZSA1Omc9XG5lLmNoaWxkLnN0YXRlTm9kZTticmVhaztjYXNlIDE6Zz1lLmNoaWxkLnN0YXRlTm9kZX1oaChlLGQsZyxmKX1icmVhaztjYXNlIDU6Zj1lLnN0YXRlTm9kZTtudWxsPT09ZCYmZS5lZmZlY3RUYWcmNCYmd2UoZS50eXBlLGUubWVtb2l6ZWRQcm9wcykmJmYuZm9jdXMoKTticmVhaztjYXNlIDY6YnJlYWs7Y2FzZSA0OmJyZWFrO2Nhc2UgMTI6YnJlYWs7Y2FzZSAxMzpicmVhaztjYXNlIDE3OmJyZWFrO2RlZmF1bHQ6eChcIjE2M1wiKX19YyYxMjgmJihlPVYucmVmLG51bGwhPT1lJiYoZj1WLnN0YXRlTm9kZSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZT9lKGYpOmUuY3VycmVudD1mKSk7YyY1MTImJihQaD1hKTtWPVYubmV4dEVmZmVjdH19XG5mdW5jdGlvbiBXaChhLGIpe1JoPVFoPVBoPW51bGw7dmFyIGM9VztXPSEwO2Rve2lmKGIuZWZmZWN0VGFnJjUxMil7dmFyIGQ9ITEsZT12b2lkIDA7dHJ5e3ZhciBmPWI7dGgoVWYsTmYsZik7dGgoTmYsVGYsZil9Y2F0Y2goZyl7ZD0hMCxlPWd9ZCYmc2goYixlKX1iPWIubmV4dEVmZmVjdH13aGlsZShudWxsIT09Yik7Vz1jO2M9YS5leHBpcmF0aW9uVGltZTswIT09YyYmWGgoYSxjKTtYfHxXfHxZaCgxMDczNzQxODIzLCExKX1mdW5jdGlvbiBvZigpe251bGwhPT1RaCYmQmUoUWgpO251bGwhPT1SaCYmUmgoKX1cbmZ1bmN0aW9uIFpoKGEsYil7T2g9S2g9ITA7YS5jdXJyZW50PT09Yj94KFwiMTc3XCIpOnZvaWQgMDt2YXIgYz1hLnBlbmRpbmdDb21taXRFeHBpcmF0aW9uVGltZTswPT09Yz94KFwiMjYxXCIpOnZvaWQgMDthLnBlbmRpbmdDb21taXRFeHBpcmF0aW9uVGltZT0wO3ZhciBkPWIuZXhwaXJhdGlvblRpbWUsZT1iLmNoaWxkRXhwaXJhdGlvblRpbWU7ZWYoYSxlPmQ/ZTpkKTtJaC5jdXJyZW50PW51bGw7ZD12b2lkIDA7MTxiLmVmZmVjdFRhZz9udWxsIT09Yi5sYXN0RWZmZWN0PyhiLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1iLGQ9Yi5maXJzdEVmZmVjdCk6ZD1iOmQ9Yi5maXJzdEVmZmVjdDt1ZT1CZDt2ZT1QZCgpO0JkPSExO2ZvcihWPWQ7bnVsbCE9PVY7KXtlPSExO3ZhciBmPXZvaWQgMDt0cnl7VWgoKX1jYXRjaChoKXtlPSEwLGY9aH1lJiYobnVsbD09PVY/eChcIjE3OFwiKTp2b2lkIDAsc2goVixmKSxudWxsIT09ViYmKFY9Vi5uZXh0RWZmZWN0KSl9Zm9yKFY9ZDtudWxsIT09Vjspe2U9ITE7XG5mPXZvaWQgMDt0cnl7VGgoKX1jYXRjaChoKXtlPSEwLGY9aH1lJiYobnVsbD09PVY/eChcIjE3OFwiKTp2b2lkIDAsc2goVixmKSxudWxsIT09ViYmKFY9Vi5uZXh0RWZmZWN0KSl9UWQodmUpO3ZlPW51bGw7QmQ9ISF1ZTt1ZT1udWxsO2EuY3VycmVudD1iO2ZvcihWPWQ7bnVsbCE9PVY7KXtlPSExO2Y9dm9pZCAwO3RyeXtWaChhLGMpfWNhdGNoKGgpe2U9ITAsZj1ofWUmJihudWxsPT09Vj94KFwiMTc4XCIpOnZvaWQgMCxzaChWLGYpLG51bGwhPT1WJiYoVj1WLm5leHRFZmZlY3QpKX1pZihudWxsIT09ZCYmbnVsbCE9PVBoKXt2YXIgZz1XaC5iaW5kKG51bGwsYSxkKTtRaD1yLnVuc3RhYmxlX3J1bldpdGhQcmlvcml0eShyLnVuc3RhYmxlX05vcm1hbFByaW9yaXR5LGZ1bmN0aW9uKCl7cmV0dXJuIEFlKGcpfSk7Umg9Z31LaD1PaD0hMTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgUWUmJlFlKGIuc3RhdGVOb2RlKTtjPWIuZXhwaXJhdGlvblRpbWU7Yj1iLmNoaWxkRXhwaXJhdGlvblRpbWU7Yj1cbmI+Yz9iOmM7MD09PWImJihGaD1udWxsKTskaChhLGIpfVxuZnVuY3Rpb24gYWkoYSl7Zm9yKDs7KXt2YXIgYj1hLmFsdGVybmF0ZSxjPWEucmV0dXJuLGQ9YS5zaWJsaW5nO2lmKDA9PT0oYS5lZmZlY3RUYWcmMTAyNCkpe1Q9YTthOnt2YXIgZT1iO2I9YTt2YXIgZj1VO3ZhciBnPWIucGVuZGluZ1Byb3BzO3N3aXRjaChiLnRhZyl7Y2FzZSAyOmJyZWFrO2Nhc2UgMTY6YnJlYWs7Y2FzZSAxNTpjYXNlIDA6YnJlYWs7Y2FzZSAxOkooYi50eXBlKSYmS2UoYik7YnJlYWs7Y2FzZSAzOktmKGIpO0xlKGIpO2c9Yi5zdGF0ZU5vZGU7Zy5wZW5kaW5nQ29udGV4dCYmKGcuY29udGV4dD1nLnBlbmRpbmdDb250ZXh0LGcucGVuZGluZ0NvbnRleHQ9bnVsbCk7aWYobnVsbD09PWV8fG51bGw9PT1lLmNoaWxkKUVnKGIpLGIuZWZmZWN0VGFnJj0tMzttaChiKTticmVhaztjYXNlIDU6TWYoYik7dmFyIGg9SWYoSGYuY3VycmVudCk7Zj1iLnR5cGU7aWYobnVsbCE9PWUmJm51bGwhPWIuc3RhdGVOb2RlKW5oKGUsYixmLGcsaCksZS5yZWYhPT1iLnJlZiYmKGIuZWZmZWN0VGFnfD1cbjEyOCk7ZWxzZSBpZihnKXt2YXIgbD1JZihOLmN1cnJlbnQpO2lmKEVnKGIpKXtnPWI7ZT1nLnN0YXRlTm9kZTt2YXIgaz1nLnR5cGUsbT1nLm1lbW9pemVkUHJvcHMscD1oO2VbRmFdPWc7ZVtHYV09bTtmPXZvaWQgMDtoPWs7c3dpdGNoKGgpe2Nhc2UgXCJpZnJhbWVcIjpjYXNlIFwib2JqZWN0XCI6RShcImxvYWRcIixlKTticmVhaztjYXNlIFwidmlkZW9cIjpjYXNlIFwiYXVkaW9cIjpmb3Ioaz0wO2s8YWIubGVuZ3RoO2srKylFKGFiW2tdLGUpO2JyZWFrO2Nhc2UgXCJzb3VyY2VcIjpFKFwiZXJyb3JcIixlKTticmVhaztjYXNlIFwiaW1nXCI6Y2FzZSBcImltYWdlXCI6Y2FzZSBcImxpbmtcIjpFKFwiZXJyb3JcIixlKTtFKFwibG9hZFwiLGUpO2JyZWFrO2Nhc2UgXCJmb3JtXCI6RShcInJlc2V0XCIsZSk7RShcInN1Ym1pdFwiLGUpO2JyZWFrO2Nhc2UgXCJkZXRhaWxzXCI6RShcInRvZ2dsZVwiLGUpO2JyZWFrO2Nhc2UgXCJpbnB1dFwiOndjKGUsbSk7RShcImludmFsaWRcIixlKTtzZShwLFwib25DaGFuZ2VcIik7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmUuX3dyYXBwZXJTdGF0ZT1cbnt3YXNNdWx0aXBsZTohIW0ubXVsdGlwbGV9O0UoXCJpbnZhbGlkXCIsZSk7c2UocCxcIm9uQ2hhbmdlXCIpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmNlKGUsbSksRShcImludmFsaWRcIixlKSxzZShwLFwib25DaGFuZ2VcIil9cWUoaCxtKTtrPW51bGw7Zm9yKGYgaW4gbSltLmhhc093blByb3BlcnR5KGYpJiYobD1tW2ZdLFwiY2hpbGRyZW5cIj09PWY/XCJzdHJpbmdcIj09PXR5cGVvZiBsP2UudGV4dENvbnRlbnQhPT1sJiYoaz1bXCJjaGlsZHJlblwiLGxdKTpcIm51bWJlclwiPT09dHlwZW9mIGwmJmUudGV4dENvbnRlbnQhPT1cIlwiK2wmJihrPVtcImNoaWxkcmVuXCIsXCJcIitsXSk6cmEuaGFzT3duUHJvcGVydHkoZikmJm51bGwhPWwmJnNlKHAsZikpO3N3aXRjaChoKXtjYXNlIFwiaW5wdXRcIjpSYihlKTtBYyhlLG0sITApO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOlJiKGUpO2VlKGUsbSk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmNhc2UgXCJvcHRpb25cIjpicmVhaztkZWZhdWx0OlwiZnVuY3Rpb25cIj09PXR5cGVvZiBtLm9uQ2xpY2smJlxuKGUub25jbGljaz10ZSl9Zj1rO2cudXBkYXRlUXVldWU9ZjtnPW51bGwhPT1mPyEwOiExO2cmJmtoKGIpfWVsc2V7bT1iO2U9ZjtwPWc7az05PT09aC5ub2RlVHlwZT9oOmgub3duZXJEb2N1bWVudDtsPT09ZmUuaHRtbCYmKGw9Z2UoZSkpO2w9PT1mZS5odG1sP1wic2NyaXB0XCI9PT1lPyhlPWsuY3JlYXRlRWxlbWVudChcImRpdlwiKSxlLmlubmVySFRNTD1cIjxzY3JpcHQ+XFx4M2Mvc2NyaXB0PlwiLGs9ZS5yZW1vdmVDaGlsZChlLmZpcnN0Q2hpbGQpKTpcInN0cmluZ1wiPT09dHlwZW9mIHAuaXM/az1rLmNyZWF0ZUVsZW1lbnQoZSx7aXM6cC5pc30pOihrPWsuY3JlYXRlRWxlbWVudChlKSxcInNlbGVjdFwiPT09ZSYmcC5tdWx0aXBsZSYmKGsubXVsdGlwbGU9ITApKTprPWsuY3JlYXRlRWxlbWVudE5TKGwsZSk7ZT1rO2VbRmFdPW07ZVtHYV09ZztsaChlLGIsITEsITEpO3A9ZTtrPWY7bT1nO3ZhciB0PWgsQT1yZShrLG0pO3N3aXRjaChrKXtjYXNlIFwiaWZyYW1lXCI6Y2FzZSBcIm9iamVjdFwiOkUoXCJsb2FkXCIsXG5wKTtoPW07YnJlYWs7Y2FzZSBcInZpZGVvXCI6Y2FzZSBcImF1ZGlvXCI6Zm9yKGg9MDtoPGFiLmxlbmd0aDtoKyspRShhYltoXSxwKTtoPW07YnJlYWs7Y2FzZSBcInNvdXJjZVwiOkUoXCJlcnJvclwiLHApO2g9bTticmVhaztjYXNlIFwiaW1nXCI6Y2FzZSBcImltYWdlXCI6Y2FzZSBcImxpbmtcIjpFKFwiZXJyb3JcIixwKTtFKFwibG9hZFwiLHApO2g9bTticmVhaztjYXNlIFwiZm9ybVwiOkUoXCJyZXNldFwiLHApO0UoXCJzdWJtaXRcIixwKTtoPW07YnJlYWs7Y2FzZSBcImRldGFpbHNcIjpFKFwidG9nZ2xlXCIscCk7aD1tO2JyZWFrO2Nhc2UgXCJpbnB1dFwiOndjKHAsbSk7aD12YyhwLG0pO0UoXCJpbnZhbGlkXCIscCk7c2UodCxcIm9uQ2hhbmdlXCIpO2JyZWFrO2Nhc2UgXCJvcHRpb25cIjpoPSRkKHAsbSk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOnAuX3dyYXBwZXJTdGF0ZT17d2FzTXVsdGlwbGU6ISFtLm11bHRpcGxlfTtoPW4oe30sbSx7dmFsdWU6dm9pZCAwfSk7RShcImludmFsaWRcIixwKTtzZSh0LFwib25DaGFuZ2VcIik7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6Y2UocCxcbm0pO2g9YmUocCxtKTtFKFwiaW52YWxpZFwiLHApO3NlKHQsXCJvbkNoYW5nZVwiKTticmVhaztkZWZhdWx0Omg9bX1xZShrLGgpO2w9dm9pZCAwO3ZhciB2PWssUj1wLHU9aDtmb3IobCBpbiB1KWlmKHUuaGFzT3duUHJvcGVydHkobCkpe3ZhciBxPXVbbF07XCJzdHlsZVwiPT09bD9vZShSLHEpOlwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIj09PWw/KHE9cT9xLl9faHRtbDp2b2lkIDAsbnVsbCE9cSYmamUoUixxKSk6XCJjaGlsZHJlblwiPT09bD9cInN0cmluZ1wiPT09dHlwZW9mIHE/KFwidGV4dGFyZWFcIiE9PXZ8fFwiXCIhPT1xKSYma2UoUixxKTpcIm51bWJlclwiPT09dHlwZW9mIHEmJmtlKFIsXCJcIitxKTpcInN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZ1wiIT09bCYmXCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmdcIiE9PWwmJlwiYXV0b0ZvY3VzXCIhPT1sJiYocmEuaGFzT3duUHJvcGVydHkobCk/bnVsbCE9cSYmc2UodCxsKTpudWxsIT1xJiZ0YyhSLGwscSxBKSl9c3dpdGNoKGspe2Nhc2UgXCJpbnB1dFwiOlJiKHApO1xuQWMocCxtLCExKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpSYihwKTtlZShwLG0pO2JyZWFrO2Nhc2UgXCJvcHRpb25cIjpudWxsIT1tLnZhbHVlJiZwLnNldEF0dHJpYnV0ZShcInZhbHVlXCIsXCJcIit1YyhtLnZhbHVlKSk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmg9cDtoLm11bHRpcGxlPSEhbS5tdWx0aXBsZTtwPW0udmFsdWU7bnVsbCE9cD9hZShoLCEhbS5tdWx0aXBsZSxwLCExKTpudWxsIT1tLmRlZmF1bHRWYWx1ZSYmYWUoaCwhIW0ubXVsdGlwbGUsbS5kZWZhdWx0VmFsdWUsITApO2JyZWFrO2RlZmF1bHQ6XCJmdW5jdGlvblwiPT09dHlwZW9mIGgub25DbGljayYmKHAub25jbGljaz10ZSl9KGc9d2UoZixnKSkmJmtoKGIpO2Iuc3RhdGVOb2RlPWV9bnVsbCE9PWIucmVmJiYoYi5lZmZlY3RUYWd8PTEyOCl9ZWxzZSBudWxsPT09Yi5zdGF0ZU5vZGU/eChcIjE2NlwiKTp2b2lkIDA7YnJlYWs7Y2FzZSA2OmUmJm51bGwhPWIuc3RhdGVOb2RlP29oKGUsYixlLm1lbW9pemVkUHJvcHMsZyk6KFwic3RyaW5nXCIhPT1cbnR5cGVvZiBnJiYobnVsbD09PWIuc3RhdGVOb2RlP3goXCIxNjZcIik6dm9pZCAwKSxlPUlmKEhmLmN1cnJlbnQpLElmKE4uY3VycmVudCksRWcoYik/KGc9YixmPWcuc3RhdGVOb2RlLGU9Zy5tZW1vaXplZFByb3BzLGZbRmFdPWcsKGc9Zi5ub2RlVmFsdWUhPT1lKSYma2goYikpOihmPWIsZz0oOT09PWUubm9kZVR5cGU/ZTplLm93bmVyRG9jdW1lbnQpLmNyZWF0ZVRleHROb2RlKGcpLGdbRmFdPWIsZi5zdGF0ZU5vZGU9ZykpO2JyZWFrO2Nhc2UgMTE6YnJlYWs7Y2FzZSAxMzpnPWIubWVtb2l6ZWRTdGF0ZTtpZigwIT09KGIuZWZmZWN0VGFnJjY0KSl7Yi5leHBpcmF0aW9uVGltZT1mO1Q9YjticmVhayBhfWc9bnVsbCE9PWc7Zj1udWxsIT09ZSYmbnVsbCE9PWUubWVtb2l6ZWRTdGF0ZTtudWxsIT09ZSYmIWcmJmYmJihlPWUuY2hpbGQuc2libGluZyxudWxsIT09ZSYmKGg9Yi5maXJzdEVmZmVjdCxudWxsIT09aD8oYi5maXJzdEVmZmVjdD1lLGUubmV4dEVmZmVjdD1oKTooYi5maXJzdEVmZmVjdD1cbmIubGFzdEVmZmVjdD1lLGUubmV4dEVmZmVjdD1udWxsKSxlLmVmZmVjdFRhZz04KSk7aWYoZ3x8ZiliLmVmZmVjdFRhZ3w9NDticmVhaztjYXNlIDc6YnJlYWs7Y2FzZSA4OmJyZWFrO2Nhc2UgMTI6YnJlYWs7Y2FzZSA0OktmKGIpO21oKGIpO2JyZWFrO2Nhc2UgMTA6WmcoYik7YnJlYWs7Y2FzZSA5OmJyZWFrO2Nhc2UgMTQ6YnJlYWs7Y2FzZSAxNzpKKGIudHlwZSkmJktlKGIpO2JyZWFrO2Nhc2UgMTg6YnJlYWs7ZGVmYXVsdDp4KFwiMTU2XCIpfVQ9bnVsbH1iPWE7aWYoMT09PVV8fDEhPT1iLmNoaWxkRXhwaXJhdGlvblRpbWUpe2c9MDtmb3IoZj1iLmNoaWxkO251bGwhPT1mOyllPWYuZXhwaXJhdGlvblRpbWUsaD1mLmNoaWxkRXhwaXJhdGlvblRpbWUsZT5nJiYoZz1lKSxoPmcmJihnPWgpLGY9Zi5zaWJsaW5nO2IuY2hpbGRFeHBpcmF0aW9uVGltZT1nfWlmKG51bGwhPT1UKXJldHVybiBUO251bGwhPT1jJiYwPT09KGMuZWZmZWN0VGFnJjEwMjQpJiYobnVsbD09PWMuZmlyc3RFZmZlY3QmJlxuKGMuZmlyc3RFZmZlY3Q9YS5maXJzdEVmZmVjdCksbnVsbCE9PWEubGFzdEVmZmVjdCYmKG51bGwhPT1jLmxhc3RFZmZlY3QmJihjLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1hLmZpcnN0RWZmZWN0KSxjLmxhc3RFZmZlY3Q9YS5sYXN0RWZmZWN0KSwxPGEuZWZmZWN0VGFnJiYobnVsbCE9PWMubGFzdEVmZmVjdD9jLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1hOmMuZmlyc3RFZmZlY3Q9YSxjLmxhc3RFZmZlY3Q9YSkpfWVsc2V7YT1HaChhLFUpO2lmKG51bGwhPT1hKXJldHVybiBhLmVmZmVjdFRhZyY9MTAyMyxhO251bGwhPT1jJiYoYy5maXJzdEVmZmVjdD1jLmxhc3RFZmZlY3Q9bnVsbCxjLmVmZmVjdFRhZ3w9MTAyNCl9aWYobnVsbCE9PWQpcmV0dXJuIGQ7aWYobnVsbCE9PWMpYT1jO2Vsc2UgYnJlYWt9cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBiaShhKXt2YXIgYj1UZyhhLmFsdGVybmF0ZSxhLFUpO2EubWVtb2l6ZWRQcm9wcz1hLnBlbmRpbmdQcm9wcztudWxsPT09YiYmKGI9YWkoYSkpO0loLmN1cnJlbnQ9bnVsbDtyZXR1cm4gYn1cbmZ1bmN0aW9uIGNpKGEsYil7S2g/eChcIjI0M1wiKTp2b2lkIDA7b2YoKTtLaD0hMDt2YXIgYz1IaC5jdXJyZW50O0hoLmN1cnJlbnQ9a2c7dmFyIGQ9YS5uZXh0RXhwaXJhdGlvblRpbWVUb1dvcmtPbjtpZihkIT09VXx8YSE9PUxofHxudWxsPT09VClTaCgpLExoPWEsVT1kLFQ9WGUoTGguY3VycmVudCxudWxsLFUpLGEucGVuZGluZ0NvbW1pdEV4cGlyYXRpb25UaW1lPTA7dmFyIGU9ITE7ZG97dHJ5e2lmKGIpZm9yKDtudWxsIT09VCYmIWRpKCk7KVQ9YmkoVCk7ZWxzZSBmb3IoO251bGwhPT1UOylUPWJpKFQpfWNhdGNoKHUpe2lmKFlnPVhnPVdnPW51bGwsbGcoKSxudWxsPT09VCllPSEwLERoKHUpO2Vsc2V7bnVsbD09PVQ/eChcIjI3MVwiKTp2b2lkIDA7dmFyIGY9VCxnPWYucmV0dXJuO2lmKG51bGw9PT1nKWU9ITAsRGgodSk7ZWxzZXthOnt2YXIgaD1hLGw9ZyxrPWYsbT11O2c9VTtrLmVmZmVjdFRhZ3w9MTAyNDtrLmZpcnN0RWZmZWN0PWsubGFzdEVmZmVjdD1udWxsO2lmKG51bGwhPT1cbm0mJlwib2JqZWN0XCI9PT10eXBlb2YgbSYmXCJmdW5jdGlvblwiPT09dHlwZW9mIG0udGhlbil7dmFyIHA9bTttPWw7dmFyIHQ9LTEsQT0tMTtkb3tpZigxMz09PW0udGFnKXt2YXIgdj1tLmFsdGVybmF0ZTtpZihudWxsIT09diYmKHY9di5tZW1vaXplZFN0YXRlLG51bGwhPT12KSl7QT0xMCooMTA3Mzc0MTgyMi12LnRpbWVkT3V0QXQpO2JyZWFrfXY9bS5wZW5kaW5nUHJvcHMubWF4RHVyYXRpb247aWYoXCJudW1iZXJcIj09PXR5cGVvZiB2KWlmKDA+PXYpdD0wO2Vsc2UgaWYoLTE9PT10fHx2PHQpdD12fW09bS5yZXR1cm59d2hpbGUobnVsbCE9PW0pO209bDtkb3tpZih2PTEzPT09bS50YWcpdj12b2lkIDA9PT1tLm1lbW9pemVkUHJvcHMuZmFsbGJhY2s/ITE6bnVsbD09PW0ubWVtb2l6ZWRTdGF0ZTtpZih2KXtsPW0udXBkYXRlUXVldWU7bnVsbD09PWw/KGw9bmV3IFNldCxsLmFkZChwKSxtLnVwZGF0ZVF1ZXVlPWwpOmwuYWRkKHApO2lmKDA9PT0obS5tb2RlJjEpKXttLmVmZmVjdFRhZ3w9XG42NDtrLmVmZmVjdFRhZyY9LTE5NTc7MT09PWsudGFnJiYobnVsbD09PWsuYWx0ZXJuYXRlP2sudGFnPTE3OihnPW5mKDEwNzM3NDE4MjMpLGcudGFnPXNmLHBmKGssZykpKTtrLmV4cGlyYXRpb25UaW1lPTEwNzM3NDE4MjM7YnJlYWsgYX1rPWg7bD1nO3ZhciBSPWsucGluZ0NhY2hlO251bGw9PT1SPyhSPWsucGluZ0NhY2hlPW5ldyBCaCx2PW5ldyBTZXQsUi5zZXQocCx2KSk6KHY9Ui5nZXQocCksdm9pZCAwPT09diYmKHY9bmV3IFNldCxSLnNldChwLHYpKSk7di5oYXMobCl8fCh2LmFkZChsKSxrPWVpLmJpbmQobnVsbCxrLHAsbCkscC50aGVuKGssaykpOy0xPT09dD9oPTEwNzM3NDE4MjM6KC0xPT09QSYmKEE9MTAqKDEwNzM3NDE4MjItZ2YoaCxnKSktNUUzKSxoPUErdCk7MDw9aCYmTWg8aCYmKE1oPWgpO20uZWZmZWN0VGFnfD0yMDQ4O20uZXhwaXJhdGlvblRpbWU9ZzticmVhayBhfW09bS5yZXR1cm59d2hpbGUobnVsbCE9PW0pO209RXJyb3IoKGljKGsudHlwZSl8fFwiQSBSZWFjdCBjb21wb25lbnRcIikrXG5cIiBzdXNwZW5kZWQgd2hpbGUgcmVuZGVyaW5nLCBidXQgbm8gZmFsbGJhY2sgVUkgd2FzIHNwZWNpZmllZC5cXG5cXG5BZGQgYSA8U3VzcGVuc2UgZmFsbGJhY2s9Li4uPiBjb21wb25lbnQgaGlnaGVyIGluIHRoZSB0cmVlIHRvIHByb3ZpZGUgYSBsb2FkaW5nIGluZGljYXRvciBvciBwbGFjZWhvbGRlciB0byBkaXNwbGF5LlwiK2pjKGspKX1OaD0hMDttPWpoKG0sayk7aD1sO2Rve3N3aXRjaChoLnRhZyl7Y2FzZSAzOmguZWZmZWN0VGFnfD0yMDQ4O2guZXhwaXJhdGlvblRpbWU9ZztnPUNoKGgsbSxnKTtlaChoLGcpO2JyZWFrIGE7Y2FzZSAxOmlmKHQ9bSxBPWgudHlwZSxrPWguc3RhdGVOb2RlLDA9PT0oaC5lZmZlY3RUYWcmNjQpJiYoXCJmdW5jdGlvblwiPT09dHlwZW9mIEEuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yfHxudWxsIT09ayYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGsuY29tcG9uZW50RGlkQ2F0Y2gmJihudWxsPT09Rmh8fCFGaC5oYXMoaykpKSl7aC5lZmZlY3RUYWd8PTIwNDg7XG5oLmV4cGlyYXRpb25UaW1lPWc7Zz1FaChoLHQsZyk7ZWgoaCxnKTticmVhayBhfX1oPWgucmV0dXJufXdoaWxlKG51bGwhPT1oKX1UPWFpKGYpO2NvbnRpbnVlfX19YnJlYWt9d2hpbGUoMSk7S2g9ITE7SGguY3VycmVudD1jO1lnPVhnPVdnPW51bGw7bGcoKTtpZihlKUxoPW51bGwsYS5maW5pc2hlZFdvcms9bnVsbDtlbHNlIGlmKG51bGwhPT1UKWEuZmluaXNoZWRXb3JrPW51bGw7ZWxzZXtjPWEuY3VycmVudC5hbHRlcm5hdGU7bnVsbD09PWM/eChcIjI4MVwiKTp2b2lkIDA7TGg9bnVsbDtpZihOaCl7ZT1hLmxhdGVzdFBlbmRpbmdUaW1lO2Y9YS5sYXRlc3RTdXNwZW5kZWRUaW1lO2c9YS5sYXRlc3RQaW5nZWRUaW1lO2lmKDAhPT1lJiZlPGR8fDAhPT1mJiZmPGR8fDAhPT1nJiZnPGQpe2ZmKGEsZCk7ZmkoYSxjLGQsYS5leHBpcmF0aW9uVGltZSwtMSk7cmV0dXJufWlmKCFhLmRpZEVycm9yJiZiKXthLmRpZEVycm9yPSEwO2Q9YS5uZXh0RXhwaXJhdGlvblRpbWVUb1dvcmtPbj1kO1xuYj1hLmV4cGlyYXRpb25UaW1lPTEwNzM3NDE4MjM7ZmkoYSxjLGQsYiwtMSk7cmV0dXJufX1iJiYtMSE9PU1oPyhmZihhLGQpLGI9MTAqKDEwNzM3NDE4MjItZ2YoYSxkKSksYjxNaCYmKE1oPWIpLGI9MTAqKDEwNzM3NDE4MjItbGYoKSksYj1NaC1iLGZpKGEsYyxkLGEuZXhwaXJhdGlvblRpbWUsMD5iPzA6YikpOihhLnBlbmRpbmdDb21taXRFeHBpcmF0aW9uVGltZT1kLGEuZmluaXNoZWRXb3JrPWMpfX1cbmZ1bmN0aW9uIHNoKGEsYil7Zm9yKHZhciBjPWEucmV0dXJuO251bGwhPT1jOyl7c3dpdGNoKGMudGFnKXtjYXNlIDE6dmFyIGQ9Yy5zdGF0ZU5vZGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGMudHlwZS5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3J8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLmNvbXBvbmVudERpZENhdGNoJiYobnVsbD09PUZofHwhRmguaGFzKGQpKSl7YT1qaChiLGEpO2E9RWgoYyxhLDEwNzM3NDE4MjMpO3BmKGMsYSk7cWYoYywxMDczNzQxODIzKTtyZXR1cm59YnJlYWs7Y2FzZSAzOmE9amgoYixhKTthPUNoKGMsYSwxMDczNzQxODIzKTtwZihjLGEpO3FmKGMsMTA3Mzc0MTgyMyk7cmV0dXJufWM9Yy5yZXR1cm59Mz09PWEudGFnJiYoYz1qaChiLGEpLGM9Q2goYSxjLDEwNzM3NDE4MjMpLHBmKGEsYykscWYoYSwxMDczNzQxODIzKSl9XG5mdW5jdGlvbiBtZihhLGIpe3ZhciBjPXIudW5zdGFibGVfZ2V0Q3VycmVudFByaW9yaXR5TGV2ZWwoKSxkPXZvaWQgMDtpZigwPT09KGIubW9kZSYxKSlkPTEwNzM3NDE4MjM7ZWxzZSBpZihLaCYmIU9oKWQ9VTtlbHNle3N3aXRjaChjKXtjYXNlIHIudW5zdGFibGVfSW1tZWRpYXRlUHJpb3JpdHk6ZD0xMDczNzQxODIzO2JyZWFrO2Nhc2Ugci51bnN0YWJsZV9Vc2VyQmxvY2tpbmdQcmlvcml0eTpkPTEwNzM3NDE4MjItMTAqKCgoMTA3Mzc0MTgyMi1hKzE1KS8xMHwwKSsxKTticmVhaztjYXNlIHIudW5zdGFibGVfTm9ybWFsUHJpb3JpdHk6ZD0xMDczNzQxODIyLTI1KigoKDEwNzM3NDE4MjItYSs1MDApLzI1fDApKzEpO2JyZWFrO2Nhc2Ugci51bnN0YWJsZV9Mb3dQcmlvcml0eTpjYXNlIHIudW5zdGFibGVfSWRsZVByaW9yaXR5OmQ9MTticmVhaztkZWZhdWx0OngoXCIzMTNcIil9bnVsbCE9PUxoJiZkPT09VSYmLS1kfWM9PT1yLnVuc3RhYmxlX1VzZXJCbG9ja2luZ1ByaW9yaXR5JiZcbigwPT09Z2l8fGQ8Z2kpJiYoZ2k9ZCk7cmV0dXJuIGR9ZnVuY3Rpb24gZWkoYSxiLGMpe3ZhciBkPWEucGluZ0NhY2hlO251bGwhPT1kJiZkLmRlbGV0ZShiKTtpZihudWxsIT09TGgmJlU9PT1jKUxoPW51bGw7ZWxzZSBpZihiPWEuZWFybGllc3RTdXNwZW5kZWRUaW1lLGQ9YS5sYXRlc3RTdXNwZW5kZWRUaW1lLDAhPT1iJiZjPD1iJiZjPj1kKXthLmRpZEVycm9yPSExO2I9YS5sYXRlc3RQaW5nZWRUaW1lO2lmKDA9PT1ifHxiPmMpYS5sYXRlc3RQaW5nZWRUaW1lPWM7ZGYoYyxhKTtjPWEuZXhwaXJhdGlvblRpbWU7MCE9PWMmJlhoKGEsYyl9fWZ1bmN0aW9uIEFoKGEsYil7dmFyIGM9YS5zdGF0ZU5vZGU7bnVsbCE9PWMmJmMuZGVsZXRlKGIpO2I9bGYoKTtiPW1mKGIsYSk7YT1oaShhLGIpO251bGwhPT1hJiYoY2YoYSxiKSxiPWEuZXhwaXJhdGlvblRpbWUsMCE9PWImJlhoKGEsYikpfVxuZnVuY3Rpb24gaGkoYSxiKXthLmV4cGlyYXRpb25UaW1lPGImJihhLmV4cGlyYXRpb25UaW1lPWIpO3ZhciBjPWEuYWx0ZXJuYXRlO251bGwhPT1jJiZjLmV4cGlyYXRpb25UaW1lPGImJihjLmV4cGlyYXRpb25UaW1lPWIpO3ZhciBkPWEucmV0dXJuLGU9bnVsbDtpZihudWxsPT09ZCYmMz09PWEudGFnKWU9YS5zdGF0ZU5vZGU7ZWxzZSBmb3IoO251bGwhPT1kOyl7Yz1kLmFsdGVybmF0ZTtkLmNoaWxkRXhwaXJhdGlvblRpbWU8YiYmKGQuY2hpbGRFeHBpcmF0aW9uVGltZT1iKTtudWxsIT09YyYmYy5jaGlsZEV4cGlyYXRpb25UaW1lPGImJihjLmNoaWxkRXhwaXJhdGlvblRpbWU9Yik7aWYobnVsbD09PWQucmV0dXJuJiYzPT09ZC50YWcpe2U9ZC5zdGF0ZU5vZGU7YnJlYWt9ZD1kLnJldHVybn1yZXR1cm4gZX1cbmZ1bmN0aW9uIHFmKGEsYil7YT1oaShhLGIpO251bGwhPT1hJiYoIUtoJiYwIT09VSYmYj5VJiZTaCgpLGNmKGEsYiksS2gmJiFPaCYmTGg9PT1hfHxYaChhLGEuZXhwaXJhdGlvblRpbWUpLGlpPmppJiYoaWk9MCx4KFwiMTg1XCIpKSl9ZnVuY3Rpb24ga2koYSxiLGMsZCxlKXtyZXR1cm4gci51bnN0YWJsZV9ydW5XaXRoUHJpb3JpdHkoci51bnN0YWJsZV9JbW1lZGlhdGVQcmlvcml0eSxmdW5jdGlvbigpe3JldHVybiBhKGIsYyxkLGUpfSl9dmFyIGxpPW51bGwsWT1udWxsLG1pPTAsbmk9dm9pZCAwLFc9ITEsb2k9bnVsbCxaPTAsZ2k9MCxwaT0hMSxxaT1udWxsLFg9ITEscmk9ITEsc2k9bnVsbCx0aT1yLnVuc3RhYmxlX25vdygpLHVpPTEwNzM3NDE4MjItKHRpLzEwfDApLHZpPXVpLGppPTUwLGlpPTAsd2k9bnVsbDtmdW5jdGlvbiB4aSgpe3VpPTEwNzM3NDE4MjItKChyLnVuc3RhYmxlX25vdygpLXRpKS8xMHwwKX1cbmZ1bmN0aW9uIHlpKGEsYil7aWYoMCE9PW1pKXtpZihiPG1pKXJldHVybjtudWxsIT09bmkmJnIudW5zdGFibGVfY2FuY2VsQ2FsbGJhY2sobmkpfW1pPWI7YT1yLnVuc3RhYmxlX25vdygpLXRpO25pPXIudW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjayh6aSx7dGltZW91dDoxMCooMTA3Mzc0MTgyMi1iKS1hfSl9ZnVuY3Rpb24gZmkoYSxiLGMsZCxlKXthLmV4cGlyYXRpb25UaW1lPWQ7MCE9PWV8fGRpKCk/MDxlJiYoYS50aW1lb3V0SGFuZGxlPXllKEFpLmJpbmQobnVsbCxhLGIsYyksZSkpOihhLnBlbmRpbmdDb21taXRFeHBpcmF0aW9uVGltZT1jLGEuZmluaXNoZWRXb3JrPWIpfWZ1bmN0aW9uIEFpKGEsYixjKXthLnBlbmRpbmdDb21taXRFeHBpcmF0aW9uVGltZT1jO2EuZmluaXNoZWRXb3JrPWI7eGkoKTt2aT11aTtCaShhLGMpfWZ1bmN0aW9uICRoKGEsYil7YS5leHBpcmF0aW9uVGltZT1iO2EuZmluaXNoZWRXb3JrPW51bGx9XG5mdW5jdGlvbiBsZigpe2lmKFcpcmV0dXJuIHZpO0NpKCk7aWYoMD09PVp8fDE9PT1aKXhpKCksdmk9dWk7cmV0dXJuIHZpfWZ1bmN0aW9uIFhoKGEsYil7bnVsbD09PWEubmV4dFNjaGVkdWxlZFJvb3Q/KGEuZXhwaXJhdGlvblRpbWU9YixudWxsPT09WT8obGk9WT1hLGEubmV4dFNjaGVkdWxlZFJvb3Q9YSk6KFk9WS5uZXh0U2NoZWR1bGVkUm9vdD1hLFkubmV4dFNjaGVkdWxlZFJvb3Q9bGkpKTpiPmEuZXhwaXJhdGlvblRpbWUmJihhLmV4cGlyYXRpb25UaW1lPWIpO1d8fChYP3JpJiYob2k9YSxaPTEwNzM3NDE4MjMsRGkoYSwxMDczNzQxODIzLCExKSk6MTA3Mzc0MTgyMz09PWI/WWgoMTA3Mzc0MTgyMywhMSk6eWkoYSxiKSl9XG5mdW5jdGlvbiBDaSgpe3ZhciBhPTAsYj1udWxsO2lmKG51bGwhPT1ZKWZvcih2YXIgYz1ZLGQ9bGk7bnVsbCE9PWQ7KXt2YXIgZT1kLmV4cGlyYXRpb25UaW1lO2lmKDA9PT1lKXtudWxsPT09Y3x8bnVsbD09PVk/eChcIjI0NFwiKTp2b2lkIDA7aWYoZD09PWQubmV4dFNjaGVkdWxlZFJvb3Qpe2xpPVk9ZC5uZXh0U2NoZWR1bGVkUm9vdD1udWxsO2JyZWFrfWVsc2UgaWYoZD09PWxpKWxpPWU9ZC5uZXh0U2NoZWR1bGVkUm9vdCxZLm5leHRTY2hlZHVsZWRSb290PWUsZC5uZXh0U2NoZWR1bGVkUm9vdD1udWxsO2Vsc2UgaWYoZD09PVkpe1k9YztZLm5leHRTY2hlZHVsZWRSb290PWxpO2QubmV4dFNjaGVkdWxlZFJvb3Q9bnVsbDticmVha31lbHNlIGMubmV4dFNjaGVkdWxlZFJvb3Q9ZC5uZXh0U2NoZWR1bGVkUm9vdCxkLm5leHRTY2hlZHVsZWRSb290PW51bGw7ZD1jLm5leHRTY2hlZHVsZWRSb290fWVsc2V7ZT5hJiYoYT1lLGI9ZCk7aWYoZD09PVkpYnJlYWs7aWYoMTA3Mzc0MTgyMz09PVxuYSlicmVhaztjPWQ7ZD1kLm5leHRTY2hlZHVsZWRSb290fX1vaT1iO1o9YX12YXIgRWk9ITE7ZnVuY3Rpb24gZGkoKXtyZXR1cm4gRWk/ITA6ci51bnN0YWJsZV9zaG91bGRZaWVsZCgpP0VpPSEwOiExfWZ1bmN0aW9uIHppKCl7dHJ5e2lmKCFkaSgpJiZudWxsIT09bGkpe3hpKCk7dmFyIGE9bGk7ZG97dmFyIGI9YS5leHBpcmF0aW9uVGltZTswIT09YiYmdWk8PWImJihhLm5leHRFeHBpcmF0aW9uVGltZVRvV29ya09uPXVpKTthPWEubmV4dFNjaGVkdWxlZFJvb3R9d2hpbGUoYSE9PWxpKX1ZaCgwLCEwKX1maW5hbGx5e0VpPSExfX1cbmZ1bmN0aW9uIFloKGEsYil7Q2koKTtpZihiKWZvcih4aSgpLHZpPXVpO251bGwhPT1vaSYmMCE9PVomJmE8PVomJiEoRWkmJnVpPlopOylEaShvaSxaLHVpPlopLENpKCkseGkoKSx2aT11aTtlbHNlIGZvcig7bnVsbCE9PW9pJiYwIT09WiYmYTw9WjspRGkob2ksWiwhMSksQ2koKTtiJiYobWk9MCxuaT1udWxsKTswIT09WiYmeWkob2ksWik7aWk9MDt3aT1udWxsO2lmKG51bGwhPT1zaSlmb3IoYT1zaSxzaT1udWxsLGI9MDtiPGEubGVuZ3RoO2IrKyl7dmFyIGM9YVtiXTt0cnl7Yy5fb25Db21wbGV0ZSgpfWNhdGNoKGQpe3BpfHwocGk9ITAscWk9ZCl9fWlmKHBpKXRocm93IGE9cWkscWk9bnVsbCxwaT0hMSxhO31mdW5jdGlvbiBCaShhLGIpe1c/eChcIjI1M1wiKTp2b2lkIDA7b2k9YTtaPWI7RGkoYSxiLCExKTtZaCgxMDczNzQxODIzLCExKX1cbmZ1bmN0aW9uIERpKGEsYixjKXtXP3goXCIyNDVcIik6dm9pZCAwO1c9ITA7aWYoYyl7dmFyIGQ9YS5maW5pc2hlZFdvcms7bnVsbCE9PWQ/RmkoYSxkLGIpOihhLmZpbmlzaGVkV29yaz1udWxsLGQ9YS50aW1lb3V0SGFuZGxlLC0xIT09ZCYmKGEudGltZW91dEhhbmRsZT0tMSx6ZShkKSksY2koYSxjKSxkPWEuZmluaXNoZWRXb3JrLG51bGwhPT1kJiYoZGkoKT9hLmZpbmlzaGVkV29yaz1kOkZpKGEsZCxiKSkpfWVsc2UgZD1hLmZpbmlzaGVkV29yayxudWxsIT09ZD9GaShhLGQsYik6KGEuZmluaXNoZWRXb3JrPW51bGwsZD1hLnRpbWVvdXRIYW5kbGUsLTEhPT1kJiYoYS50aW1lb3V0SGFuZGxlPS0xLHplKGQpKSxjaShhLGMpLGQ9YS5maW5pc2hlZFdvcmssbnVsbCE9PWQmJkZpKGEsZCxiKSk7Vz0hMX1cbmZ1bmN0aW9uIEZpKGEsYixjKXt2YXIgZD1hLmZpcnN0QmF0Y2g7aWYobnVsbCE9PWQmJmQuX2V4cGlyYXRpb25UaW1lPj1jJiYobnVsbD09PXNpP3NpPVtkXTpzaS5wdXNoKGQpLGQuX2RlZmVyKSl7YS5maW5pc2hlZFdvcms9YjthLmV4cGlyYXRpb25UaW1lPTA7cmV0dXJufWEuZmluaXNoZWRXb3JrPW51bGw7YT09PXdpP2lpKys6KHdpPWEsaWk9MCk7ci51bnN0YWJsZV9ydW5XaXRoUHJpb3JpdHkoci51bnN0YWJsZV9JbW1lZGlhdGVQcmlvcml0eSxmdW5jdGlvbigpe1poKGEsYil9KX1mdW5jdGlvbiBEaChhKXtudWxsPT09b2k/eChcIjI0NlwiKTp2b2lkIDA7b2kuZXhwaXJhdGlvblRpbWU9MDtwaXx8KHBpPSEwLHFpPWEpfWZ1bmN0aW9uIEdpKGEsYil7dmFyIGM9WDtYPSEwO3RyeXtyZXR1cm4gYShiKX1maW5hbGx5eyhYPWMpfHxXfHxZaCgxMDczNzQxODIzLCExKX19XG5mdW5jdGlvbiBIaShhLGIpe2lmKFgmJiFyaSl7cmk9ITA7dHJ5e3JldHVybiBhKGIpfWZpbmFsbHl7cmk9ITF9fXJldHVybiBhKGIpfWZ1bmN0aW9uIElpKGEsYixjKXtYfHxXfHwwPT09Z2l8fChZaChnaSwhMSksZ2k9MCk7dmFyIGQ9WDtYPSEwO3RyeXtyZXR1cm4gci51bnN0YWJsZV9ydW5XaXRoUHJpb3JpdHkoci51bnN0YWJsZV9Vc2VyQmxvY2tpbmdQcmlvcml0eSxmdW5jdGlvbigpe3JldHVybiBhKGIsYyl9KX1maW5hbGx5eyhYPWQpfHxXfHxZaCgxMDczNzQxODIzLCExKX19XG5mdW5jdGlvbiBKaShhLGIsYyxkLGUpe3ZhciBmPWIuY3VycmVudDthOmlmKGMpe2M9Yy5fcmVhY3RJbnRlcm5hbEZpYmVyO2I6ezI9PT1lZChjKSYmMT09PWMudGFnP3ZvaWQgMDp4KFwiMTcwXCIpO3ZhciBnPWM7ZG97c3dpdGNoKGcudGFnKXtjYXNlIDM6Zz1nLnN0YXRlTm9kZS5jb250ZXh0O2JyZWFrIGI7Y2FzZSAxOmlmKEooZy50eXBlKSl7Zz1nLnN0YXRlTm9kZS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dDticmVhayBifX1nPWcucmV0dXJufXdoaWxlKG51bGwhPT1nKTt4KFwiMTcxXCIpO2c9dm9pZCAwfWlmKDE9PT1jLnRhZyl7dmFyIGg9Yy50eXBlO2lmKEooaCkpe2M9TmUoYyxoLGcpO2JyZWFrIGF9fWM9Z31lbHNlIGM9SGU7bnVsbD09PWIuY29udGV4dD9iLmNvbnRleHQ9YzpiLnBlbmRpbmdDb250ZXh0PWM7Yj1lO2U9bmYoZCk7ZS5wYXlsb2FkPXtlbGVtZW50OmF9O2I9dm9pZCAwPT09Yj9udWxsOmI7bnVsbCE9PWImJihlLmNhbGxiYWNrPWIpO1xub2YoKTtwZihmLGUpO3FmKGYsZCk7cmV0dXJuIGR9ZnVuY3Rpb24gS2koYSxiLGMsZCl7dmFyIGU9Yi5jdXJyZW50LGY9bGYoKTtlPW1mKGYsZSk7cmV0dXJuIEppKGEsYixjLGUsZCl9ZnVuY3Rpb24gTGkoYSl7YT1hLmN1cnJlbnQ7aWYoIWEuY2hpbGQpcmV0dXJuIG51bGw7c3dpdGNoKGEuY2hpbGQudGFnKXtjYXNlIDU6cmV0dXJuIGEuY2hpbGQuc3RhdGVOb2RlO2RlZmF1bHQ6cmV0dXJuIGEuY2hpbGQuc3RhdGVOb2RlfX1mdW5jdGlvbiBNaShhLGIsYyl7dmFyIGQ9Mzxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbM10/YXJndW1lbnRzWzNdOm51bGw7cmV0dXJueyQkdHlwZW9mOldiLGtleTpudWxsPT1kP251bGw6XCJcIitkLGNoaWxkcmVuOmEsY29udGFpbmVySW5mbzpiLGltcGxlbWVudGF0aW9uOmN9fVxuQWI9ZnVuY3Rpb24oYSxiLGMpe3N3aXRjaChiKXtjYXNlIFwiaW5wdXRcIjp5YyhhLGMpO2I9Yy5uYW1lO2lmKFwicmFkaW9cIj09PWMudHlwZSYmbnVsbCE9Yil7Zm9yKGM9YTtjLnBhcmVudE5vZGU7KWM9Yy5wYXJlbnROb2RlO2M9Yy5xdWVyeVNlbGVjdG9yQWxsKFwiaW5wdXRbbmFtZT1cIitKU09OLnN0cmluZ2lmeShcIlwiK2IpKyddW3R5cGU9XCJyYWRpb1wiXScpO2ZvcihiPTA7YjxjLmxlbmd0aDtiKyspe3ZhciBkPWNbYl07aWYoZCE9PWEmJmQuZm9ybT09PWEuZm9ybSl7dmFyIGU9S2EoZCk7ZT92b2lkIDA6eChcIjkwXCIpO1NiKGQpO3ljKGQsZSl9fX1icmVhaztjYXNlIFwidGV4dGFyZWFcIjpkZShhLGMpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpiPWMudmFsdWUsbnVsbCE9YiYmYWUoYSwhIWMubXVsdGlwbGUsYiwhMSl9fTtcbmZ1bmN0aW9uIE5pKGEpe3ZhciBiPTEwNzM3NDE4MjItMjUqKCgoMTA3Mzc0MTgyMi1sZigpKzUwMCkvMjV8MCkrMSk7Yj49SmgmJihiPUpoLTEpO3RoaXMuX2V4cGlyYXRpb25UaW1lPUpoPWI7dGhpcy5fcm9vdD1hO3RoaXMuX2NhbGxiYWNrcz10aGlzLl9uZXh0PW51bGw7dGhpcy5faGFzQ2hpbGRyZW49dGhpcy5fZGlkQ29tcGxldGU9ITE7dGhpcy5fY2hpbGRyZW49bnVsbDt0aGlzLl9kZWZlcj0hMH1OaS5wcm90b3R5cGUucmVuZGVyPWZ1bmN0aW9uKGEpe3RoaXMuX2RlZmVyP3ZvaWQgMDp4KFwiMjUwXCIpO3RoaXMuX2hhc0NoaWxkcmVuPSEwO3RoaXMuX2NoaWxkcmVuPWE7dmFyIGI9dGhpcy5fcm9vdC5faW50ZXJuYWxSb290LGM9dGhpcy5fZXhwaXJhdGlvblRpbWUsZD1uZXcgT2k7SmkoYSxiLG51bGwsYyxkLl9vbkNvbW1pdCk7cmV0dXJuIGR9O1xuTmkucHJvdG90eXBlLnRoZW49ZnVuY3Rpb24oYSl7aWYodGhpcy5fZGlkQ29tcGxldGUpYSgpO2Vsc2V7dmFyIGI9dGhpcy5fY2FsbGJhY2tzO251bGw9PT1iJiYoYj10aGlzLl9jYWxsYmFja3M9W10pO2IucHVzaChhKX19O1xuTmkucHJvdG90eXBlLmNvbW1pdD1mdW5jdGlvbigpe3ZhciBhPXRoaXMuX3Jvb3QuX2ludGVybmFsUm9vdCxiPWEuZmlyc3RCYXRjaDt0aGlzLl9kZWZlciYmbnVsbCE9PWI/dm9pZCAwOngoXCIyNTFcIik7aWYodGhpcy5faGFzQ2hpbGRyZW4pe3ZhciBjPXRoaXMuX2V4cGlyYXRpb25UaW1lO2lmKGIhPT10aGlzKXt0aGlzLl9oYXNDaGlsZHJlbiYmKGM9dGhpcy5fZXhwaXJhdGlvblRpbWU9Yi5fZXhwaXJhdGlvblRpbWUsdGhpcy5yZW5kZXIodGhpcy5fY2hpbGRyZW4pKTtmb3IodmFyIGQ9bnVsbCxlPWI7ZSE9PXRoaXM7KWQ9ZSxlPWUuX25leHQ7bnVsbD09PWQ/eChcIjI1MVwiKTp2b2lkIDA7ZC5fbmV4dD1lLl9uZXh0O3RoaXMuX25leHQ9YjthLmZpcnN0QmF0Y2g9dGhpc310aGlzLl9kZWZlcj0hMTtCaShhLGMpO2I9dGhpcy5fbmV4dDt0aGlzLl9uZXh0PW51bGw7Yj1hLmZpcnN0QmF0Y2g9YjtudWxsIT09YiYmYi5faGFzQ2hpbGRyZW4mJmIucmVuZGVyKGIuX2NoaWxkcmVuKX1lbHNlIHRoaXMuX25leHQ9XG5udWxsLHRoaXMuX2RlZmVyPSExfTtOaS5wcm90b3R5cGUuX29uQ29tcGxldGU9ZnVuY3Rpb24oKXtpZighdGhpcy5fZGlkQ29tcGxldGUpe3RoaXMuX2RpZENvbXBsZXRlPSEwO3ZhciBhPXRoaXMuX2NhbGxiYWNrcztpZihudWxsIT09YSlmb3IodmFyIGI9MDtiPGEubGVuZ3RoO2IrKykoMCxhW2JdKSgpfX07ZnVuY3Rpb24gT2koKXt0aGlzLl9jYWxsYmFja3M9bnVsbDt0aGlzLl9kaWRDb21taXQ9ITE7dGhpcy5fb25Db21taXQ9dGhpcy5fb25Db21taXQuYmluZCh0aGlzKX1PaS5wcm90b3R5cGUudGhlbj1mdW5jdGlvbihhKXtpZih0aGlzLl9kaWRDb21taXQpYSgpO2Vsc2V7dmFyIGI9dGhpcy5fY2FsbGJhY2tzO251bGw9PT1iJiYoYj10aGlzLl9jYWxsYmFja3M9W10pO2IucHVzaChhKX19O1xuT2kucHJvdG90eXBlLl9vbkNvbW1pdD1mdW5jdGlvbigpe2lmKCF0aGlzLl9kaWRDb21taXQpe3RoaXMuX2RpZENvbW1pdD0hMDt2YXIgYT10aGlzLl9jYWxsYmFja3M7aWYobnVsbCE9PWEpZm9yKHZhciBiPTA7YjxhLmxlbmd0aDtiKyspe3ZhciBjPWFbYl07XCJmdW5jdGlvblwiIT09dHlwZW9mIGM/eChcIjE5MVwiLGMpOnZvaWQgMDtjKCl9fX07XG5mdW5jdGlvbiBQaShhLGIsYyl7Yj1LKDMsbnVsbCxudWxsLGI/MzowKTthPXtjdXJyZW50OmIsY29udGFpbmVySW5mbzphLHBlbmRpbmdDaGlsZHJlbjpudWxsLHBpbmdDYWNoZTpudWxsLGVhcmxpZXN0UGVuZGluZ1RpbWU6MCxsYXRlc3RQZW5kaW5nVGltZTowLGVhcmxpZXN0U3VzcGVuZGVkVGltZTowLGxhdGVzdFN1c3BlbmRlZFRpbWU6MCxsYXRlc3RQaW5nZWRUaW1lOjAsZGlkRXJyb3I6ITEscGVuZGluZ0NvbW1pdEV4cGlyYXRpb25UaW1lOjAsZmluaXNoZWRXb3JrOm51bGwsdGltZW91dEhhbmRsZTotMSxjb250ZXh0Om51bGwscGVuZGluZ0NvbnRleHQ6bnVsbCxoeWRyYXRlOmMsbmV4dEV4cGlyYXRpb25UaW1lVG9Xb3JrT246MCxleHBpcmF0aW9uVGltZTowLGZpcnN0QmF0Y2g6bnVsbCxuZXh0U2NoZWR1bGVkUm9vdDpudWxsfTt0aGlzLl9pbnRlcm5hbFJvb3Q9Yi5zdGF0ZU5vZGU9YX1cblBpLnByb3RvdHlwZS5yZW5kZXI9ZnVuY3Rpb24oYSxiKXt2YXIgYz10aGlzLl9pbnRlcm5hbFJvb3QsZD1uZXcgT2k7Yj12b2lkIDA9PT1iP251bGw6YjtudWxsIT09YiYmZC50aGVuKGIpO0tpKGEsYyxudWxsLGQuX29uQ29tbWl0KTtyZXR1cm4gZH07UGkucHJvdG90eXBlLnVubW91bnQ9ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcy5faW50ZXJuYWxSb290LGM9bmV3IE9pO2E9dm9pZCAwPT09YT9udWxsOmE7bnVsbCE9PWEmJmMudGhlbihhKTtLaShudWxsLGIsbnVsbCxjLl9vbkNvbW1pdCk7cmV0dXJuIGN9O1BpLnByb3RvdHlwZS5sZWdhY3lfcmVuZGVyU3VidHJlZUludG9Db250YWluZXI9ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPXRoaXMuX2ludGVybmFsUm9vdCxlPW5ldyBPaTtjPXZvaWQgMD09PWM/bnVsbDpjO251bGwhPT1jJiZlLnRoZW4oYyk7S2koYixkLGEsZS5fb25Db21taXQpO3JldHVybiBlfTtcblBpLnByb3RvdHlwZS5jcmVhdGVCYXRjaD1mdW5jdGlvbigpe3ZhciBhPW5ldyBOaSh0aGlzKSxiPWEuX2V4cGlyYXRpb25UaW1lLGM9dGhpcy5faW50ZXJuYWxSb290LGQ9Yy5maXJzdEJhdGNoO2lmKG51bGw9PT1kKWMuZmlyc3RCYXRjaD1hLGEuX25leHQ9bnVsbDtlbHNle2ZvcihjPW51bGw7bnVsbCE9PWQmJmQuX2V4cGlyYXRpb25UaW1lPj1iOyljPWQsZD1kLl9uZXh0O2EuX25leHQ9ZDtudWxsIT09YyYmKGMuX25leHQ9YSl9cmV0dXJuIGF9O2Z1bmN0aW9uIFFpKGEpe3JldHVybiEoIWF8fDEhPT1hLm5vZGVUeXBlJiY5IT09YS5ub2RlVHlwZSYmMTEhPT1hLm5vZGVUeXBlJiYoOCE9PWEubm9kZVR5cGV8fFwiIHJlYWN0LW1vdW50LXBvaW50LXVuc3RhYmxlIFwiIT09YS5ub2RlVmFsdWUpKX1HYj1HaTtIYj1JaTtJYj1mdW5jdGlvbigpe1d8fDA9PT1naXx8KFloKGdpLCExKSxnaT0wKX07XG5mdW5jdGlvbiBSaShhLGIpe2J8fChiPWE/OT09PWEubm9kZVR5cGU/YS5kb2N1bWVudEVsZW1lbnQ6YS5maXJzdENoaWxkOm51bGwsYj0hKCFifHwxIT09Yi5ub2RlVHlwZXx8IWIuaGFzQXR0cmlidXRlKFwiZGF0YS1yZWFjdHJvb3RcIikpKTtpZighYilmb3IodmFyIGM7Yz1hLmxhc3RDaGlsZDspYS5yZW1vdmVDaGlsZChjKTtyZXR1cm4gbmV3IFBpKGEsITEsYil9XG5mdW5jdGlvbiBTaShhLGIsYyxkLGUpe3ZhciBmPWMuX3JlYWN0Um9vdENvbnRhaW5lcjtpZihmKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZSl7dmFyIGc9ZTtlPWZ1bmN0aW9uKCl7dmFyIGE9TGkoZi5faW50ZXJuYWxSb290KTtnLmNhbGwoYSl9fW51bGwhPWE/Zi5sZWdhY3lfcmVuZGVyU3VidHJlZUludG9Db250YWluZXIoYSxiLGUpOmYucmVuZGVyKGIsZSl9ZWxzZXtmPWMuX3JlYWN0Um9vdENvbnRhaW5lcj1SaShjLGQpO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlKXt2YXIgaD1lO2U9ZnVuY3Rpb24oKXt2YXIgYT1MaShmLl9pbnRlcm5hbFJvb3QpO2guY2FsbChhKX19SGkoZnVuY3Rpb24oKXtudWxsIT1hP2YubGVnYWN5X3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyKGEsYixlKTpmLnJlbmRlcihiLGUpfSl9cmV0dXJuIExpKGYuX2ludGVybmFsUm9vdCl9XG5mdW5jdGlvbiBUaShhLGIpe3ZhciBjPTI8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzJdP2FyZ3VtZW50c1syXTpudWxsO1FpKGIpP3ZvaWQgMDp4KFwiMjAwXCIpO3JldHVybiBNaShhLGIsbnVsbCxjKX1cbnZhciBWaT17Y3JlYXRlUG9ydGFsOlRpLGZpbmRET01Ob2RlOmZ1bmN0aW9uKGEpe2lmKG51bGw9PWEpcmV0dXJuIG51bGw7aWYoMT09PWEubm9kZVR5cGUpcmV0dXJuIGE7dmFyIGI9YS5fcmVhY3RJbnRlcm5hbEZpYmVyO3ZvaWQgMD09PWImJihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYS5yZW5kZXI/eChcIjE4OFwiKTp4KFwiMjY4XCIsT2JqZWN0LmtleXMoYSkpKTthPWhkKGIpO2E9bnVsbD09PWE/bnVsbDphLnN0YXRlTm9kZTtyZXR1cm4gYX0saHlkcmF0ZTpmdW5jdGlvbihhLGIsYyl7UWkoYik/dm9pZCAwOngoXCIyMDBcIik7cmV0dXJuIFNpKG51bGwsYSxiLCEwLGMpfSxyZW5kZXI6ZnVuY3Rpb24oYSxiLGMpe1FpKGIpP3ZvaWQgMDp4KFwiMjAwXCIpO3JldHVybiBTaShudWxsLGEsYiwhMSxjKX0sdW5zdGFibGVfcmVuZGVyU3VidHJlZUludG9Db250YWluZXI6ZnVuY3Rpb24oYSxiLGMsZCl7UWkoYyk/dm9pZCAwOngoXCIyMDBcIik7bnVsbD09YXx8dm9pZCAwPT09YS5fcmVhY3RJbnRlcm5hbEZpYmVyP1xueChcIjM4XCIpOnZvaWQgMDtyZXR1cm4gU2koYSxiLGMsITEsZCl9LHVubW91bnRDb21wb25lbnRBdE5vZGU6ZnVuY3Rpb24oYSl7UWkoYSk/dm9pZCAwOngoXCI0MFwiKTtyZXR1cm4gYS5fcmVhY3RSb290Q29udGFpbmVyPyhIaShmdW5jdGlvbigpe1NpKG51bGwsbnVsbCxhLCExLGZ1bmN0aW9uKCl7YS5fcmVhY3RSb290Q29udGFpbmVyPW51bGx9KX0pLCEwKTohMX0sdW5zdGFibGVfY3JlYXRlUG9ydGFsOmZ1bmN0aW9uKCl7cmV0dXJuIFRpLmFwcGx5KHZvaWQgMCxhcmd1bWVudHMpfSx1bnN0YWJsZV9iYXRjaGVkVXBkYXRlczpHaSx1bnN0YWJsZV9pbnRlcmFjdGl2ZVVwZGF0ZXM6SWksZmx1c2hTeW5jOmZ1bmN0aW9uKGEsYil7Vz94KFwiMTg3XCIpOnZvaWQgMDt2YXIgYz1YO1g9ITA7dHJ5e3JldHVybiBraShhLGIpfWZpbmFsbHl7WD1jLFloKDEwNzM3NDE4MjMsITEpfX0sdW5zdGFibGVfY3JlYXRlUm9vdDpVaSx1bnN0YWJsZV9mbHVzaENvbnRyb2xsZWQ6ZnVuY3Rpb24oYSl7dmFyIGI9XG5YO1g9ITA7dHJ5e2tpKGEpfWZpbmFsbHl7KFg9Yil8fFd8fFloKDEwNzM3NDE4MjMsITEpfX0sX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQ6e0V2ZW50czpbSWEsSmEsS2EsQmEuaW5qZWN0RXZlbnRQbHVnaW5zQnlOYW1lLHBhLFFhLGZ1bmN0aW9uKGEpe3lhKGEsUGEpfSxFYixGYixEZCxEYV19fTtmdW5jdGlvbiBVaShhLGIpe1FpKGEpP3ZvaWQgMDp4KFwiMjk5XCIsXCJ1bnN0YWJsZV9jcmVhdGVSb290XCIpO3JldHVybiBuZXcgUGkoYSwhMCxudWxsIT1iJiYhMD09PWIuaHlkcmF0ZSl9XG4oZnVuY3Rpb24oYSl7dmFyIGI9YS5maW5kRmliZXJCeUhvc3RJbnN0YW5jZTtyZXR1cm4gVGUobih7fSxhLHtvdmVycmlkZVByb3BzOm51bGwsY3VycmVudERpc3BhdGNoZXJSZWY6VGIuUmVhY3RDdXJyZW50RGlzcGF0Y2hlcixmaW5kSG9zdEluc3RhbmNlQnlGaWJlcjpmdW5jdGlvbihhKXthPWhkKGEpO3JldHVybiBudWxsPT09YT9udWxsOmEuc3RhdGVOb2RlfSxmaW5kRmliZXJCeUhvc3RJbnN0YW5jZTpmdW5jdGlvbihhKXtyZXR1cm4gYj9iKGEpOm51bGx9fSkpfSkoe2ZpbmRGaWJlckJ5SG9zdEluc3RhbmNlOkhhLGJ1bmRsZVR5cGU6MCx2ZXJzaW9uOlwiMTYuOC40XCIscmVuZGVyZXJQYWNrYWdlTmFtZTpcInJlYWN0LWRvbVwifSk7dmFyIFdpPXtkZWZhdWx0OlZpfSxYaT1XaSYmVml8fFdpO21vZHVsZS5leHBvcnRzPVhpLmRlZmF1bHR8fFhpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3NjaGVkdWxlci5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9zY2hlZHVsZXIuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MC4xMy40XG4gKiBzY2hlZHVsZXIucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIGQ9bnVsbCxlPSExLGc9MyxrPS0xLGw9LTEsbT0hMSxuPSExO2Z1bmN0aW9uIHAoKXtpZighbSl7dmFyIGE9ZC5leHBpcmF0aW9uVGltZTtuP3EoKTpuPSEwO3IodCxhKX19XG5mdW5jdGlvbiB1KCl7dmFyIGE9ZCxiPWQubmV4dDtpZihkPT09YilkPW51bGw7ZWxzZXt2YXIgYz1kLnByZXZpb3VzO2Q9Yy5uZXh0PWI7Yi5wcmV2aW91cz1jfWEubmV4dD1hLnByZXZpb3VzPW51bGw7Yz1hLmNhbGxiYWNrO2I9YS5leHBpcmF0aW9uVGltZTthPWEucHJpb3JpdHlMZXZlbDt2YXIgZj1nLFE9bDtnPWE7bD1iO3RyeXt2YXIgaD1jKCl9ZmluYWxseXtnPWYsbD1RfWlmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBoKWlmKGg9e2NhbGxiYWNrOmgscHJpb3JpdHlMZXZlbDphLGV4cGlyYXRpb25UaW1lOmIsbmV4dDpudWxsLHByZXZpb3VzOm51bGx9LG51bGw9PT1kKWQ9aC5uZXh0PWgucHJldmlvdXM9aDtlbHNle2M9bnVsbDthPWQ7ZG97aWYoYS5leHBpcmF0aW9uVGltZT49Yil7Yz1hO2JyZWFrfWE9YS5uZXh0fXdoaWxlKGEhPT1kKTtudWxsPT09Yz9jPWQ6Yz09PWQmJihkPWgscCgpKTtiPWMucHJldmlvdXM7Yi5uZXh0PWMucHJldmlvdXM9aDtoLm5leHQ9YztoLnByZXZpb3VzPVxuYn19ZnVuY3Rpb24gdigpe2lmKC0xPT09ayYmbnVsbCE9PWQmJjE9PT1kLnByaW9yaXR5TGV2ZWwpe209ITA7dHJ5e2RvIHUoKTt3aGlsZShudWxsIT09ZCYmMT09PWQucHJpb3JpdHlMZXZlbCl9ZmluYWxseXttPSExLG51bGwhPT1kP3AoKTpuPSExfX19ZnVuY3Rpb24gdChhKXttPSEwO3ZhciBiPWU7ZT1hO3RyeXtpZihhKWZvcig7bnVsbCE9PWQ7KXt2YXIgYz1leHBvcnRzLnVuc3RhYmxlX25vdygpO2lmKGQuZXhwaXJhdGlvblRpbWU8PWMpe2RvIHUoKTt3aGlsZShudWxsIT09ZCYmZC5leHBpcmF0aW9uVGltZTw9Yyl9ZWxzZSBicmVha31lbHNlIGlmKG51bGwhPT1kKXtkbyB1KCk7d2hpbGUobnVsbCE9PWQmJiF3KCkpfX1maW5hbGx5e209ITEsZT1iLG51bGwhPT1kP3AoKTpuPSExLHYoKX19XG52YXIgeD1EYXRlLHk9XCJmdW5jdGlvblwiPT09dHlwZW9mIHNldFRpbWVvdXQ/c2V0VGltZW91dDp2b2lkIDAsej1cImZ1bmN0aW9uXCI9PT10eXBlb2YgY2xlYXJUaW1lb3V0P2NsZWFyVGltZW91dDp2b2lkIDAsQT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgcmVxdWVzdEFuaW1hdGlvbkZyYW1lP3JlcXVlc3RBbmltYXRpb25GcmFtZTp2b2lkIDAsQj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgY2FuY2VsQW5pbWF0aW9uRnJhbWU/Y2FuY2VsQW5pbWF0aW9uRnJhbWU6dm9pZCAwLEMsRDtmdW5jdGlvbiBFKGEpe0M9QShmdW5jdGlvbihiKXt6KEQpO2EoYil9KTtEPXkoZnVuY3Rpb24oKXtCKEMpO2EoZXhwb3J0cy51bnN0YWJsZV9ub3coKSl9LDEwMCl9XG5pZihcIm9iamVjdFwiPT09dHlwZW9mIHBlcmZvcm1hbmNlJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgcGVyZm9ybWFuY2Uubm93KXt2YXIgRj1wZXJmb3JtYW5jZTtleHBvcnRzLnVuc3RhYmxlX25vdz1mdW5jdGlvbigpe3JldHVybiBGLm5vdygpfX1lbHNlIGV4cG9ydHMudW5zdGFibGVfbm93PWZ1bmN0aW9uKCl7cmV0dXJuIHgubm93KCl9O3ZhciByLHEsdyxHPW51bGw7XCJ1bmRlZmluZWRcIiE9PXR5cGVvZiB3aW5kb3c/Rz13aW5kb3c6XCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBnbG9iYWwmJihHPWdsb2JhbCk7XG5pZihHJiZHLl9zY2hlZE1vY2spe3ZhciBIPUcuX3NjaGVkTW9jaztyPUhbMF07cT1IWzFdO3c9SFsyXTtleHBvcnRzLnVuc3RhYmxlX25vdz1IWzNdfWVsc2UgaWYoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiB3aW5kb3d8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBNZXNzYWdlQ2hhbm5lbCl7dmFyIEk9bnVsbCxKPWZ1bmN0aW9uKGEpe2lmKG51bGwhPT1JKXRyeXtJKGEpfWZpbmFsbHl7ST1udWxsfX07cj1mdW5jdGlvbihhKXtudWxsIT09ST9zZXRUaW1lb3V0KHIsMCxhKTooST1hLHNldFRpbWVvdXQoSiwwLCExKSl9O3E9ZnVuY3Rpb24oKXtJPW51bGx9O3c9ZnVuY3Rpb24oKXtyZXR1cm4hMX19ZWxzZXtcInVuZGVmaW5lZFwiIT09dHlwZW9mIGNvbnNvbGUmJihcImZ1bmN0aW9uXCIhPT10eXBlb2YgQSYmY29uc29sZS5lcnJvcihcIlRoaXMgYnJvd3NlciBkb2Vzbid0IHN1cHBvcnQgcmVxdWVzdEFuaW1hdGlvbkZyYW1lLiBNYWtlIHN1cmUgdGhhdCB5b3UgbG9hZCBhIHBvbHlmaWxsIGluIG9sZGVyIGJyb3dzZXJzLiBodHRwczovL2ZiLm1lL3JlYWN0LXBvbHlmaWxsc1wiKSxcblwiZnVuY3Rpb25cIiE9PXR5cGVvZiBCJiZjb25zb2xlLmVycm9yKFwiVGhpcyBicm93c2VyIGRvZXNuJ3Qgc3VwcG9ydCBjYW5jZWxBbmltYXRpb25GcmFtZS4gTWFrZSBzdXJlIHRoYXQgeW91IGxvYWQgYSBwb2x5ZmlsbCBpbiBvbGRlciBicm93c2Vycy4gaHR0cHM6Ly9mYi5tZS9yZWFjdC1wb2x5ZmlsbHNcIikpO3ZhciBLPW51bGwsTD0hMSxNPS0xLE49ITEsTz0hMSxQPTAsUj0zMyxTPTMzO3c9ZnVuY3Rpb24oKXtyZXR1cm4gUDw9ZXhwb3J0cy51bnN0YWJsZV9ub3coKX07dmFyIFQ9bmV3IE1lc3NhZ2VDaGFubmVsLFU9VC5wb3J0MjtULnBvcnQxLm9ubWVzc2FnZT1mdW5jdGlvbigpe0w9ITE7dmFyIGE9SyxiPU07Sz1udWxsO009LTE7dmFyIGM9ZXhwb3J0cy51bnN0YWJsZV9ub3coKSxmPSExO2lmKDA+PVAtYylpZigtMSE9PWImJmI8PWMpZj0hMDtlbHNle058fChOPSEwLEUoVikpO0s9YTtNPWI7cmV0dXJufWlmKG51bGwhPT1hKXtPPSEwO3RyeXthKGYpfWZpbmFsbHl7Tz0hMX19fTtcbnZhciBWPWZ1bmN0aW9uKGEpe2lmKG51bGwhPT1LKXtFKFYpO3ZhciBiPWEtUCtTO2I8UyYmUjxTPyg4PmImJihiPTgpLFM9YjxSP1I6Yik6Uj1iO1A9YStTO0x8fChMPSEwLFUucG9zdE1lc3NhZ2Uodm9pZCAwKSl9ZWxzZSBOPSExfTtyPWZ1bmN0aW9uKGEsYil7Sz1hO009YjtPfHwwPmI/VS5wb3N0TWVzc2FnZSh2b2lkIDApOk58fChOPSEwLEUoVikpfTtxPWZ1bmN0aW9uKCl7Sz1udWxsO0w9ITE7TT0tMX19ZXhwb3J0cy51bnN0YWJsZV9JbW1lZGlhdGVQcmlvcml0eT0xO2V4cG9ydHMudW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHk9MjtleHBvcnRzLnVuc3RhYmxlX05vcm1hbFByaW9yaXR5PTM7ZXhwb3J0cy51bnN0YWJsZV9JZGxlUHJpb3JpdHk9NTtleHBvcnRzLnVuc3RhYmxlX0xvd1ByaW9yaXR5PTQ7XG5leHBvcnRzLnVuc3RhYmxlX3J1bldpdGhQcmlvcml0eT1mdW5jdGlvbihhLGIpe3N3aXRjaChhKXtjYXNlIDE6Y2FzZSAyOmNhc2UgMzpjYXNlIDQ6Y2FzZSA1OmJyZWFrO2RlZmF1bHQ6YT0zfXZhciBjPWcsZj1rO2c9YTtrPWV4cG9ydHMudW5zdGFibGVfbm93KCk7dHJ5e3JldHVybiBiKCl9ZmluYWxseXtnPWMsaz1mLHYoKX19O2V4cG9ydHMudW5zdGFibGVfbmV4dD1mdW5jdGlvbihhKXtzd2l0Y2goZyl7Y2FzZSAxOmNhc2UgMjpjYXNlIDM6dmFyIGI9MzticmVhaztkZWZhdWx0OmI9Z312YXIgYz1nLGY9aztnPWI7az1leHBvcnRzLnVuc3RhYmxlX25vdygpO3RyeXtyZXR1cm4gYSgpfWZpbmFsbHl7Zz1jLGs9Zix2KCl9fTtcbmV4cG9ydHMudW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjaz1mdW5jdGlvbihhLGIpe3ZhciBjPS0xIT09az9rOmV4cG9ydHMudW5zdGFibGVfbm93KCk7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBiJiZudWxsIT09YiYmXCJudW1iZXJcIj09PXR5cGVvZiBiLnRpbWVvdXQpYj1jK2IudGltZW91dDtlbHNlIHN3aXRjaChnKXtjYXNlIDE6Yj1jKy0xO2JyZWFrO2Nhc2UgMjpiPWMrMjUwO2JyZWFrO2Nhc2UgNTpiPWMrMTA3Mzc0MTgyMzticmVhaztjYXNlIDQ6Yj1jKzFFNDticmVhaztkZWZhdWx0OmI9Yys1RTN9YT17Y2FsbGJhY2s6YSxwcmlvcml0eUxldmVsOmcsZXhwaXJhdGlvblRpbWU6YixuZXh0Om51bGwscHJldmlvdXM6bnVsbH07aWYobnVsbD09PWQpZD1hLm5leHQ9YS5wcmV2aW91cz1hLHAoKTtlbHNle2M9bnVsbDt2YXIgZj1kO2Rve2lmKGYuZXhwaXJhdGlvblRpbWU+Yil7Yz1mO2JyZWFrfWY9Zi5uZXh0fXdoaWxlKGYhPT1kKTtudWxsPT09Yz9jPWQ6Yz09PWQmJihkPWEscCgpKTtcbmI9Yy5wcmV2aW91cztiLm5leHQ9Yy5wcmV2aW91cz1hO2EubmV4dD1jO2EucHJldmlvdXM9Yn1yZXR1cm4gYX07ZXhwb3J0cy51bnN0YWJsZV9jYW5jZWxDYWxsYmFjaz1mdW5jdGlvbihhKXt2YXIgYj1hLm5leHQ7aWYobnVsbCE9PWIpe2lmKGI9PT1hKWQ9bnVsbDtlbHNle2E9PT1kJiYoZD1iKTt2YXIgYz1hLnByZXZpb3VzO2MubmV4dD1iO2IucHJldmlvdXM9Y31hLm5leHQ9YS5wcmV2aW91cz1udWxsfX07ZXhwb3J0cy51bnN0YWJsZV93cmFwQ2FsbGJhY2s9ZnVuY3Rpb24oYSl7dmFyIGI9ZztyZXR1cm4gZnVuY3Rpb24oKXt2YXIgYz1nLGY9aztnPWI7az1leHBvcnRzLnVuc3RhYmxlX25vdygpO3RyeXtyZXR1cm4gYS5hcHBseSh0aGlzLGFyZ3VtZW50cyl9ZmluYWxseXtnPWMsaz1mLHYoKX19fTtleHBvcnRzLnVuc3RhYmxlX2dldEN1cnJlbnRQcmlvcml0eUxldmVsPWZ1bmN0aW9uKCl7cmV0dXJuIGd9O1xuZXhwb3J0cy51bnN0YWJsZV9zaG91bGRZaWVsZD1mdW5jdGlvbigpe3JldHVybiFlJiYobnVsbCE9PWQmJmQuZXhwaXJhdGlvblRpbWU8bHx8dygpKX07ZXhwb3J0cy51bnN0YWJsZV9jb250aW51ZUV4ZWN1dGlvbj1mdW5jdGlvbigpe251bGwhPT1kJiZwKCl9O2V4cG9ydHMudW5zdGFibGVfcGF1c2VFeGVjdXRpb249ZnVuY3Rpb24oKXt9O2V4cG9ydHMudW5zdGFibGVfZ2V0Rmlyc3RDYWxsYmFja05vZGU9ZnVuY3Rpb24oKXtyZXR1cm4gZH07XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0UHJvcFR5cGVzU2VjcmV0ID0gcmVxdWlyZSgnLi9saWIvUmVhY3RQcm9wVHlwZXNTZWNyZXQnKTtcblxuZnVuY3Rpb24gZW1wdHlGdW5jdGlvbigpIHt9XG5mdW5jdGlvbiBlbXB0eUZ1bmN0aW9uV2l0aFJlc2V0KCkge31cbmVtcHR5RnVuY3Rpb25XaXRoUmVzZXQucmVzZXRXYXJuaW5nQ2FjaGUgPSBlbXB0eUZ1bmN0aW9uO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCkge1xuICBmdW5jdGlvbiBzaGltKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSwgc2VjcmV0KSB7XG4gICAgaWYgKHNlY3JldCA9PT0gUmVhY3RQcm9wVHlwZXNTZWNyZXQpIHtcbiAgICAgIC8vIEl0IGlzIHN0aWxsIHNhZmUgd2hlbiBjYWxsZWQgZnJvbSBSZWFjdC5cbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIGVyciA9IG5ldyBFcnJvcihcbiAgICAgICdDYWxsaW5nIFByb3BUeXBlcyB2YWxpZGF0b3JzIGRpcmVjdGx5IGlzIG5vdCBzdXBwb3J0ZWQgYnkgdGhlIGBwcm9wLXR5cGVzYCBwYWNrYWdlLiAnICtcbiAgICAgICdVc2UgUHJvcFR5cGVzLmNoZWNrUHJvcFR5cGVzKCkgdG8gY2FsbCB0aGVtLiAnICtcbiAgICAgICdSZWFkIG1vcmUgYXQgaHR0cDovL2ZiLm1lL3VzZS1jaGVjay1wcm9wLXR5cGVzJ1xuICAgICk7XG4gICAgZXJyLm5hbWUgPSAnSW52YXJpYW50IFZpb2xhdGlvbic7XG4gICAgdGhyb3cgZXJyO1xuICB9O1xuICBzaGltLmlzUmVxdWlyZWQgPSBzaGltO1xuICBmdW5jdGlvbiBnZXRTaGltKCkge1xuICAgIHJldHVybiBzaGltO1xuICB9O1xuICAvLyBJbXBvcnRhbnQhXG4gIC8vIEtlZXAgdGhpcyBsaXN0IGluIHN5bmMgd2l0aCBwcm9kdWN0aW9uIHZlcnNpb24gaW4gYC4vZmFjdG9yeVdpdGhUeXBlQ2hlY2tlcnMuanNgLlxuICB2YXIgUmVhY3RQcm9wVHlwZXMgPSB7XG4gICAgYXJyYXk6IHNoaW0sXG4gICAgYm9vbDogc2hpbSxcbiAgICBmdW5jOiBzaGltLFxuICAgIG51bWJlcjogc2hpbSxcbiAgICBvYmplY3Q6IHNoaW0sXG4gICAgc3RyaW5nOiBzaGltLFxuICAgIHN5bWJvbDogc2hpbSxcblxuICAgIGFueTogc2hpbSxcbiAgICBhcnJheU9mOiBnZXRTaGltLFxuICAgIGVsZW1lbnQ6IHNoaW0sXG4gICAgZWxlbWVudFR5cGU6IHNoaW0sXG4gICAgaW5zdGFuY2VPZjogZ2V0U2hpbSxcbiAgICBub2RlOiBzaGltLFxuICAgIG9iamVjdE9mOiBnZXRTaGltLFxuICAgIG9uZU9mOiBnZXRTaGltLFxuICAgIG9uZU9mVHlwZTogZ2V0U2hpbSxcbiAgICBzaGFwZTogZ2V0U2hpbSxcbiAgICBleGFjdDogZ2V0U2hpbSxcblxuICAgIGNoZWNrUHJvcFR5cGVzOiBlbXB0eUZ1bmN0aW9uV2l0aFJlc2V0LFxuICAgIHJlc2V0V2FybmluZ0NhY2hlOiBlbXB0eUZ1bmN0aW9uXG4gIH07XG5cbiAgUmVhY3RQcm9wVHlwZXMuUHJvcFR5cGVzID0gUmVhY3RQcm9wVHlwZXM7XG5cbiAgcmV0dXJuIFJlYWN0UHJvcFR5cGVzO1xufTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RQcm9wVHlwZXNTZWNyZXQgPSAnU0VDUkVUX0RPX05PVF9QQVNTX1RISVNfT1JfWU9VX1dJTExfQkVfRklSRUQnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0UHJvcFR5cGVzU2VjcmV0O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBBcnJheS5pc0FycmF5IHx8IGZ1bmN0aW9uIChhcnIpIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChhcnIpID09ICdbb2JqZWN0IEFycmF5XSc7XG59O1xuIiwiLyoqIEBsaWNlbnNlIFJlYWN0IHYxNi44LjRcbiAqIHJlYWN0LWlzLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO09iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO1xudmFyIGI9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLmZvcixjPWI/U3ltYm9sLmZvcihcInJlYWN0LmVsZW1lbnRcIik6NjAxMDMsZD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5wb3J0YWxcIik6NjAxMDYsZT1iP1N5bWJvbC5mb3IoXCJyZWFjdC5mcmFnbWVudFwiKTo2MDEwNyxmPWI/U3ltYm9sLmZvcihcInJlYWN0LnN0cmljdF9tb2RlXCIpOjYwMTA4LGc9Yj9TeW1ib2wuZm9yKFwicmVhY3QucHJvZmlsZXJcIik6NjAxMTQsaD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5wcm92aWRlclwiKTo2MDEwOSxrPWI/U3ltYm9sLmZvcihcInJlYWN0LmNvbnRleHRcIik6NjAxMTAsbD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5hc3luY19tb2RlXCIpOjYwMTExLG09Yj9TeW1ib2wuZm9yKFwicmVhY3QuY29uY3VycmVudF9tb2RlXCIpOjYwMTExLG49Yj9TeW1ib2wuZm9yKFwicmVhY3QuZm9yd2FyZF9yZWZcIik6NjAxMTIscD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZVwiKTo2MDExMyxxPWI/U3ltYm9sLmZvcihcInJlYWN0Lm1lbW9cIik6XG42MDExNSxyPWI/U3ltYm9sLmZvcihcInJlYWN0LmxhenlcIik6NjAxMTY7ZnVuY3Rpb24gdChhKXtpZihcIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hKXt2YXIgdT1hLiQkdHlwZW9mO3N3aXRjaCh1KXtjYXNlIGM6c3dpdGNoKGE9YS50eXBlLGEpe2Nhc2UgbDpjYXNlIG06Y2FzZSBlOmNhc2UgZzpjYXNlIGY6Y2FzZSBwOnJldHVybiBhO2RlZmF1bHQ6c3dpdGNoKGE9YSYmYS4kJHR5cGVvZixhKXtjYXNlIGs6Y2FzZSBuOmNhc2UgaDpyZXR1cm4gYTtkZWZhdWx0OnJldHVybiB1fX1jYXNlIHI6Y2FzZSBxOmNhc2UgZDpyZXR1cm4gdX19fWZ1bmN0aW9uIHYoYSl7cmV0dXJuIHQoYSk9PT1tfWV4cG9ydHMudHlwZU9mPXQ7ZXhwb3J0cy5Bc3luY01vZGU9bDtleHBvcnRzLkNvbmN1cnJlbnRNb2RlPW07ZXhwb3J0cy5Db250ZXh0Q29uc3VtZXI9aztleHBvcnRzLkNvbnRleHRQcm92aWRlcj1oO2V4cG9ydHMuRWxlbWVudD1jO2V4cG9ydHMuRm9yd2FyZFJlZj1uO1xuZXhwb3J0cy5GcmFnbWVudD1lO2V4cG9ydHMuTGF6eT1yO2V4cG9ydHMuTWVtbz1xO2V4cG9ydHMuUG9ydGFsPWQ7ZXhwb3J0cy5Qcm9maWxlcj1nO2V4cG9ydHMuU3RyaWN0TW9kZT1mO2V4cG9ydHMuU3VzcGVuc2U9cDtleHBvcnRzLmlzVmFsaWRFbGVtZW50VHlwZT1mdW5jdGlvbihhKXtyZXR1cm5cInN0cmluZ1wiPT09dHlwZW9mIGF8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhfHxhPT09ZXx8YT09PW18fGE9PT1nfHxhPT09Znx8YT09PXB8fFwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJihhLiQkdHlwZW9mPT09cnx8YS4kJHR5cGVvZj09PXF8fGEuJCR0eXBlb2Y9PT1ofHxhLiQkdHlwZW9mPT09a3x8YS4kJHR5cGVvZj09PW4pfTtleHBvcnRzLmlzQXN5bmNNb2RlPWZ1bmN0aW9uKGEpe3JldHVybiB2KGEpfHx0KGEpPT09bH07ZXhwb3J0cy5pc0NvbmN1cnJlbnRNb2RlPXY7ZXhwb3J0cy5pc0NvbnRleHRDb25zdW1lcj1mdW5jdGlvbihhKXtyZXR1cm4gdChhKT09PWt9O1xuZXhwb3J0cy5pc0NvbnRleHRQcm92aWRlcj1mdW5jdGlvbihhKXtyZXR1cm4gdChhKT09PWh9O2V4cG9ydHMuaXNFbGVtZW50PWZ1bmN0aW9uKGEpe3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJmEuJCR0eXBlb2Y9PT1jfTtleHBvcnRzLmlzRm9yd2FyZFJlZj1mdW5jdGlvbihhKXtyZXR1cm4gdChhKT09PW59O2V4cG9ydHMuaXNGcmFnbWVudD1mdW5jdGlvbihhKXtyZXR1cm4gdChhKT09PWV9O2V4cG9ydHMuaXNMYXp5PWZ1bmN0aW9uKGEpe3JldHVybiB0KGEpPT09cn07ZXhwb3J0cy5pc01lbW89ZnVuY3Rpb24oYSl7cmV0dXJuIHQoYSk9PT1xfTtleHBvcnRzLmlzUG9ydGFsPWZ1bmN0aW9uKGEpe3JldHVybiB0KGEpPT09ZH07ZXhwb3J0cy5pc1Byb2ZpbGVyPWZ1bmN0aW9uKGEpe3JldHVybiB0KGEpPT09Z307ZXhwb3J0cy5pc1N0cmljdE1vZGU9ZnVuY3Rpb24oYSl7cmV0dXJuIHQoYSk9PT1mfTtcbmV4cG9ydHMuaXNTdXNwZW5zZT1mdW5jdGlvbihhKXtyZXR1cm4gdChhKT09PXB9O1xuIiwiZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG5pbXBvcnQgd2FybmluZyBmcm9tIFwid2FybmluZ1wiO1xuaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tIFwicHJvcC10eXBlc1wiO1xuaW1wb3J0IHsgY3JlYXRlSGFzaEhpc3RvcnkgYXMgY3JlYXRlSGlzdG9yeSB9IGZyb20gXCJoaXN0b3J5XCI7XG5pbXBvcnQgUm91dGVyIGZyb20gXCIuL1JvdXRlclwiO1xuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciBhIDxSb3V0ZXI+IHRoYXQgdXNlcyB3aW5kb3cubG9jYXRpb24uaGFzaC5cbiAqL1xuXG52YXIgSGFzaFJvdXRlciA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhIYXNoUm91dGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBIYXNoUm91dGVyKCkge1xuICAgIHZhciBfdGVtcCwgX3RoaXMsIF9yZXQ7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgSGFzaFJvdXRlcik7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3JldCA9IChfdGVtcCA9IChfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9SZWFjdCRDb21wb25lbnQuY2FsbC5hcHBseShfUmVhY3QkQ29tcG9uZW50LCBbdGhpc10uY29uY2F0KGFyZ3MpKSksIF90aGlzKSwgX3RoaXMuaGlzdG9yeSA9IGNyZWF0ZUhpc3RvcnkoX3RoaXMucHJvcHMpLCBfdGVtcCksIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKF90aGlzLCBfcmV0KTtcbiAgfVxuXG4gIEhhc2hSb3V0ZXIucHJvdG90eXBlLmNvbXBvbmVudFdpbGxNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxNb3VudCgpIHtcbiAgICB3YXJuaW5nKCF0aGlzLnByb3BzLmhpc3RvcnksIFwiPEhhc2hSb3V0ZXI+IGlnbm9yZXMgdGhlIGhpc3RvcnkgcHJvcC4gVG8gdXNlIGEgY3VzdG9tIGhpc3RvcnksIFwiICsgXCJ1c2UgYGltcG9ydCB7IFJvdXRlciB9YCBpbnN0ZWFkIG9mIGBpbXBvcnQgeyBIYXNoUm91dGVyIGFzIFJvdXRlciB9YC5cIik7XG4gIH07XG5cbiAgSGFzaFJvdXRlci5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFJvdXRlciwgeyBoaXN0b3J5OiB0aGlzLmhpc3RvcnksIGNoaWxkcmVuOiB0aGlzLnByb3BzLmNoaWxkcmVuIH0pO1xuICB9O1xuXG4gIHJldHVybiBIYXNoUm91dGVyO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5IYXNoUm91dGVyLnByb3BUeXBlcyA9IHtcbiAgYmFzZW5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIGdldFVzZXJDb25maXJtYXRpb246IFByb3BUeXBlcy5mdW5jLFxuICBoYXNoVHlwZTogUHJvcFR5cGVzLm9uZU9mKFtcImhhc2hiYW5nXCIsIFwibm9zbGFzaFwiLCBcInNsYXNoXCJdKSxcbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlXG59O1xuXG5cbmV4cG9ydCBkZWZhdWx0IEhhc2hSb3V0ZXI7IiwiZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG5pbXBvcnQgd2FybmluZyBmcm9tIFwid2FybmluZ1wiO1xuaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tIFwicHJvcC10eXBlc1wiO1xuaW1wb3J0IHsgY3JlYXRlTWVtb3J5SGlzdG9yeSBhcyBjcmVhdGVIaXN0b3J5IH0gZnJvbSBcImhpc3RvcnlcIjtcbmltcG9ydCBSb3V0ZXIgZnJvbSBcIi4vUm91dGVyXCI7XG5cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIGEgPFJvdXRlcj4gdGhhdCBzdG9yZXMgbG9jYXRpb24gaW4gbWVtb3J5LlxuICovXG5cbnZhciBNZW1vcnlSb3V0ZXIgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoTWVtb3J5Um91dGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBNZW1vcnlSb3V0ZXIoKSB7XG4gICAgdmFyIF90ZW1wLCBfdGhpcywgX3JldDtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBNZW1vcnlSb3V0ZXIpO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgcmV0dXJuIF9yZXQgPSAoX3RlbXAgPSAoX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfUmVhY3QkQ29tcG9uZW50LmNhbGwuYXBwbHkoX1JlYWN0JENvbXBvbmVudCwgW3RoaXNdLmNvbmNhdChhcmdzKSkpLCBfdGhpcyksIF90aGlzLmhpc3RvcnkgPSBjcmVhdGVIaXN0b3J5KF90aGlzLnByb3BzKSwgX3RlbXApLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihfdGhpcywgX3JldCk7XG4gIH1cblxuICBNZW1vcnlSb3V0ZXIucHJvdG90eXBlLmNvbXBvbmVudFdpbGxNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxNb3VudCgpIHtcbiAgICB3YXJuaW5nKCF0aGlzLnByb3BzLmhpc3RvcnksIFwiPE1lbW9yeVJvdXRlcj4gaWdub3JlcyB0aGUgaGlzdG9yeSBwcm9wLiBUbyB1c2UgYSBjdXN0b20gaGlzdG9yeSwgXCIgKyBcInVzZSBgaW1wb3J0IHsgUm91dGVyIH1gIGluc3RlYWQgb2YgYGltcG9ydCB7IE1lbW9yeVJvdXRlciBhcyBSb3V0ZXIgfWAuXCIpO1xuICB9O1xuXG4gIE1lbW9yeVJvdXRlci5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFJvdXRlciwgeyBoaXN0b3J5OiB0aGlzLmhpc3RvcnksIGNoaWxkcmVuOiB0aGlzLnByb3BzLmNoaWxkcmVuIH0pO1xuICB9O1xuXG4gIHJldHVybiBNZW1vcnlSb3V0ZXI7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbk1lbW9yeVJvdXRlci5wcm9wVHlwZXMgPSB7XG4gIGluaXRpYWxFbnRyaWVzOiBQcm9wVHlwZXMuYXJyYXksXG4gIGluaXRpYWxJbmRleDogUHJvcFR5cGVzLm51bWJlcixcbiAgZ2V0VXNlckNvbmZpcm1hdGlvbjogUHJvcFR5cGVzLmZ1bmMsXG4gIGtleUxlbmd0aDogUHJvcFR5cGVzLm51bWJlcixcbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlXG59O1xuXG5cbmV4cG9ydCBkZWZhdWx0IE1lbW9yeVJvdXRlcjsiLCIvLyBXcml0dGVuIGluIHRoaXMgcm91bmQgYWJvdXQgd2F5IGZvciBiYWJlbC10cmFuc2Zvcm0taW1wb3J0c1xuaW1wb3J0IE1lbW9yeVJvdXRlciBmcm9tIFwicmVhY3Qtcm91dGVyL2VzL01lbW9yeVJvdXRlclwiO1xuXG5leHBvcnQgZGVmYXVsdCBNZW1vcnlSb3V0ZXI7IiwidmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxudmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMob2JqLCBrZXlzKSB7IHZhciB0YXJnZXQgPSB7fTsgZm9yICh2YXIgaSBpbiBvYmopIHsgaWYgKGtleXMuaW5kZXhPZihpKSA+PSAwKSBjb250aW51ZTsgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBpKSkgY29udGludWU7IHRhcmdldFtpXSA9IG9ialtpXTsgfSByZXR1cm4gdGFyZ2V0OyB9XG5cbmltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSBcInByb3AtdHlwZXNcIjtcbmltcG9ydCBSb3V0ZSBmcm9tIFwiLi9Sb3V0ZVwiO1xuaW1wb3J0IExpbmsgZnJvbSBcIi4vTGlua1wiO1xuXG4vKipcbiAqIEEgPExpbms+IHdyYXBwZXIgdGhhdCBrbm93cyBpZiBpdCdzIFwiYWN0aXZlXCIgb3Igbm90LlxuICovXG52YXIgTmF2TGluayA9IGZ1bmN0aW9uIE5hdkxpbmsoX3JlZikge1xuICB2YXIgdG8gPSBfcmVmLnRvLFxuICAgICAgZXhhY3QgPSBfcmVmLmV4YWN0LFxuICAgICAgc3RyaWN0ID0gX3JlZi5zdHJpY3QsXG4gICAgICBsb2NhdGlvbiA9IF9yZWYubG9jYXRpb24sXG4gICAgICBhY3RpdmVDbGFzc05hbWUgPSBfcmVmLmFjdGl2ZUNsYXNzTmFtZSxcbiAgICAgIGNsYXNzTmFtZSA9IF9yZWYuY2xhc3NOYW1lLFxuICAgICAgYWN0aXZlU3R5bGUgPSBfcmVmLmFjdGl2ZVN0eWxlLFxuICAgICAgc3R5bGUgPSBfcmVmLnN0eWxlLFxuICAgICAgZ2V0SXNBY3RpdmUgPSBfcmVmLmlzQWN0aXZlLFxuICAgICAgYXJpYUN1cnJlbnQgPSBfcmVmW1wiYXJpYS1jdXJyZW50XCJdLFxuICAgICAgcmVzdCA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcmVmLCBbXCJ0b1wiLCBcImV4YWN0XCIsIFwic3RyaWN0XCIsIFwibG9jYXRpb25cIiwgXCJhY3RpdmVDbGFzc05hbWVcIiwgXCJjbGFzc05hbWVcIiwgXCJhY3RpdmVTdHlsZVwiLCBcInN0eWxlXCIsIFwiaXNBY3RpdmVcIiwgXCJhcmlhLWN1cnJlbnRcIl0pO1xuXG4gIHZhciBwYXRoID0gKHR5cGVvZiB0byA9PT0gXCJ1bmRlZmluZWRcIiA/IFwidW5kZWZpbmVkXCIgOiBfdHlwZW9mKHRvKSkgPT09IFwib2JqZWN0XCIgPyB0by5wYXRobmFtZSA6IHRvO1xuXG4gIC8vIFJlZ2V4IHRha2VuIGZyb206IGh0dHBzOi8vZ2l0aHViLmNvbS9waWxsYXJqcy9wYXRoLXRvLXJlZ2V4cC9ibG9iL21hc3Rlci9pbmRleC5qcyNMMjAyXG4gIHZhciBlc2NhcGVkUGF0aCA9IHBhdGggJiYgcGF0aC5yZXBsYWNlKC8oWy4rKj89XiE6JHt9KClbXFxdfC9cXFxcXSkvZywgXCJcXFxcJDFcIik7XG5cbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoUm91dGUsIHtcbiAgICBwYXRoOiBlc2NhcGVkUGF0aCxcbiAgICBleGFjdDogZXhhY3QsXG4gICAgc3RyaWN0OiBzdHJpY3QsXG4gICAgbG9jYXRpb246IGxvY2F0aW9uLFxuICAgIGNoaWxkcmVuOiBmdW5jdGlvbiBjaGlsZHJlbihfcmVmMikge1xuICAgICAgdmFyIGxvY2F0aW9uID0gX3JlZjIubG9jYXRpb24sXG4gICAgICAgICAgbWF0Y2ggPSBfcmVmMi5tYXRjaDtcblxuICAgICAgdmFyIGlzQWN0aXZlID0gISEoZ2V0SXNBY3RpdmUgPyBnZXRJc0FjdGl2ZShtYXRjaCwgbG9jYXRpb24pIDogbWF0Y2gpO1xuXG4gICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChMaW5rLCBfZXh0ZW5kcyh7XG4gICAgICAgIHRvOiB0byxcbiAgICAgICAgY2xhc3NOYW1lOiBpc0FjdGl2ZSA/IFtjbGFzc05hbWUsIGFjdGl2ZUNsYXNzTmFtZV0uZmlsdGVyKGZ1bmN0aW9uIChpKSB7XG4gICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgIH0pLmpvaW4oXCIgXCIpIDogY2xhc3NOYW1lLFxuICAgICAgICBzdHlsZTogaXNBY3RpdmUgPyBfZXh0ZW5kcyh7fSwgc3R5bGUsIGFjdGl2ZVN0eWxlKSA6IHN0eWxlLFxuICAgICAgICBcImFyaWEtY3VycmVudFwiOiBpc0FjdGl2ZSAmJiBhcmlhQ3VycmVudCB8fCBudWxsXG4gICAgICB9LCByZXN0KSk7XG4gICAgfVxuICB9KTtcbn07XG5cbk5hdkxpbmsucHJvcFR5cGVzID0ge1xuICB0bzogTGluay5wcm9wVHlwZXMudG8sXG4gIGV4YWN0OiBQcm9wVHlwZXMuYm9vbCxcbiAgc3RyaWN0OiBQcm9wVHlwZXMuYm9vbCxcbiAgbG9jYXRpb246IFByb3BUeXBlcy5vYmplY3QsXG4gIGFjdGl2ZUNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBhY3RpdmVTdHlsZTogUHJvcFR5cGVzLm9iamVjdCxcbiAgc3R5bGU6IFByb3BUeXBlcy5vYmplY3QsXG4gIGlzQWN0aXZlOiBQcm9wVHlwZXMuZnVuYyxcbiAgXCJhcmlhLWN1cnJlbnRcIjogUHJvcFR5cGVzLm9uZU9mKFtcInBhZ2VcIiwgXCJzdGVwXCIsIFwibG9jYXRpb25cIiwgXCJkYXRlXCIsIFwidGltZVwiLCBcInRydWVcIl0pXG59O1xuXG5OYXZMaW5rLmRlZmF1bHRQcm9wcyA9IHtcbiAgYWN0aXZlQ2xhc3NOYW1lOiBcImFjdGl2ZVwiLFxuICBcImFyaWEtY3VycmVudFwiOiBcInBhZ2VcIlxufTtcblxuZXhwb3J0IGRlZmF1bHQgTmF2TGluazsiLCJmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbmltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSBcInByb3AtdHlwZXNcIjtcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSBcImludmFyaWFudFwiO1xuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciBwcm9tcHRpbmcgdGhlIHVzZXIgYmVmb3JlIG5hdmlnYXRpbmcgYXdheVxuICogZnJvbSBhIHNjcmVlbiB3aXRoIGEgY29tcG9uZW50LlxuICovXG5cbnZhciBQcm9tcHQgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoUHJvbXB0LCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBQcm9tcHQoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFByb21wdCk7XG5cbiAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gIFByb21wdC5wcm90b3R5cGUuZW5hYmxlID0gZnVuY3Rpb24gZW5hYmxlKG1lc3NhZ2UpIHtcbiAgICBpZiAodGhpcy51bmJsb2NrKSB0aGlzLnVuYmxvY2soKTtcblxuICAgIHRoaXMudW5ibG9jayA9IHRoaXMuY29udGV4dC5yb3V0ZXIuaGlzdG9yeS5ibG9jayhtZXNzYWdlKTtcbiAgfTtcblxuICBQcm9tcHQucHJvdG90eXBlLmRpc2FibGUgPSBmdW5jdGlvbiBkaXNhYmxlKCkge1xuICAgIGlmICh0aGlzLnVuYmxvY2spIHtcbiAgICAgIHRoaXMudW5ibG9jaygpO1xuICAgICAgdGhpcy51bmJsb2NrID0gbnVsbDtcbiAgICB9XG4gIH07XG5cbiAgUHJvbXB0LnByb3RvdHlwZS5jb21wb25lbnRXaWxsTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsTW91bnQoKSB7XG4gICAgaW52YXJpYW50KHRoaXMuY29udGV4dC5yb3V0ZXIsIFwiWW91IHNob3VsZCBub3QgdXNlIDxQcm9tcHQ+IG91dHNpZGUgYSA8Um91dGVyPlwiKTtcblxuICAgIGlmICh0aGlzLnByb3BzLndoZW4pIHRoaXMuZW5hYmxlKHRoaXMucHJvcHMubWVzc2FnZSk7XG4gIH07XG5cbiAgUHJvbXB0LnByb3RvdHlwZS5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcbiAgICBpZiAobmV4dFByb3BzLndoZW4pIHtcbiAgICAgIGlmICghdGhpcy5wcm9wcy53aGVuIHx8IHRoaXMucHJvcHMubWVzc2FnZSAhPT0gbmV4dFByb3BzLm1lc3NhZ2UpIHRoaXMuZW5hYmxlKG5leHRQcm9wcy5tZXNzYWdlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5kaXNhYmxlKCk7XG4gICAgfVxuICB9O1xuXG4gIFByb21wdC5wcm90b3R5cGUuY29tcG9uZW50V2lsbFVubW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICB0aGlzLmRpc2FibGUoKTtcbiAgfTtcblxuICBQcm9tcHQucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfTtcblxuICByZXR1cm4gUHJvbXB0O1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5Qcm9tcHQucHJvcFR5cGVzID0ge1xuICB3aGVuOiBQcm9wVHlwZXMuYm9vbCxcbiAgbWVzc2FnZTogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5zdHJpbmddKS5pc1JlcXVpcmVkXG59O1xuUHJvbXB0LmRlZmF1bHRQcm9wcyA9IHtcbiAgd2hlbjogdHJ1ZVxufTtcblByb21wdC5jb250ZXh0VHlwZXMgPSB7XG4gIHJvdXRlcjogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBoaXN0b3J5OiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgICAgYmxvY2s6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWRcbiAgICB9KS5pc1JlcXVpcmVkXG4gIH0pLmlzUmVxdWlyZWRcbn07XG5cblxuZXhwb3J0IGRlZmF1bHQgUHJvbXB0OyIsIi8vIFdyaXR0ZW4gaW4gdGhpcyByb3VuZCBhYm91dCB3YXkgZm9yIGJhYmVsLXRyYW5zZm9ybS1pbXBvcnRzXG5pbXBvcnQgUHJvbXB0IGZyb20gXCJyZWFjdC1yb3V0ZXIvZXMvUHJvbXB0XCI7XG5cbmV4cG9ydCBkZWZhdWx0IFByb21wdDsiLCJpbXBvcnQgcGF0aFRvUmVnZXhwIGZyb20gXCJwYXRoLXRvLXJlZ2V4cFwiO1xuXG52YXIgcGF0dGVybkNhY2hlID0ge307XG52YXIgY2FjaGVMaW1pdCA9IDEwMDAwO1xudmFyIGNhY2hlQ291bnQgPSAwO1xuXG52YXIgY29tcGlsZUdlbmVyYXRvciA9IGZ1bmN0aW9uIGNvbXBpbGVHZW5lcmF0b3IocGF0dGVybikge1xuICB2YXIgY2FjaGVLZXkgPSBwYXR0ZXJuO1xuICB2YXIgY2FjaGUgPSBwYXR0ZXJuQ2FjaGVbY2FjaGVLZXldIHx8IChwYXR0ZXJuQ2FjaGVbY2FjaGVLZXldID0ge30pO1xuXG4gIGlmIChjYWNoZVtwYXR0ZXJuXSkgcmV0dXJuIGNhY2hlW3BhdHRlcm5dO1xuXG4gIHZhciBjb21waWxlZEdlbmVyYXRvciA9IHBhdGhUb1JlZ2V4cC5jb21waWxlKHBhdHRlcm4pO1xuXG4gIGlmIChjYWNoZUNvdW50IDwgY2FjaGVMaW1pdCkge1xuICAgIGNhY2hlW3BhdHRlcm5dID0gY29tcGlsZWRHZW5lcmF0b3I7XG4gICAgY2FjaGVDb3VudCsrO1xuICB9XG5cbiAgcmV0dXJuIGNvbXBpbGVkR2VuZXJhdG9yO1xufTtcblxuLyoqXG4gKiBQdWJsaWMgQVBJIGZvciBnZW5lcmF0aW5nIGEgVVJMIHBhdGhuYW1lIGZyb20gYSBwYXR0ZXJuIGFuZCBwYXJhbWV0ZXJzLlxuICovXG52YXIgZ2VuZXJhdGVQYXRoID0gZnVuY3Rpb24gZ2VuZXJhdGVQYXRoKCkge1xuICB2YXIgcGF0dGVybiA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogXCIvXCI7XG4gIHZhciBwYXJhbXMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuXG4gIGlmIChwYXR0ZXJuID09PSBcIi9cIikge1xuICAgIHJldHVybiBwYXR0ZXJuO1xuICB9XG4gIHZhciBnZW5lcmF0b3IgPSBjb21waWxlR2VuZXJhdG9yKHBhdHRlcm4pO1xuICByZXR1cm4gZ2VuZXJhdG9yKHBhcmFtcywgeyBwcmV0dHk6IHRydWUgfSk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBnZW5lcmF0ZVBhdGg7IiwidmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG5pbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gXCJwcm9wLXR5cGVzXCI7XG5pbXBvcnQgd2FybmluZyBmcm9tIFwid2FybmluZ1wiO1xuaW1wb3J0IGludmFyaWFudCBmcm9tIFwiaW52YXJpYW50XCI7XG5pbXBvcnQgeyBjcmVhdGVMb2NhdGlvbiwgbG9jYXRpb25zQXJlRXF1YWwgfSBmcm9tIFwiaGlzdG9yeVwiO1xuaW1wb3J0IGdlbmVyYXRlUGF0aCBmcm9tIFwiLi9nZW5lcmF0ZVBhdGhcIjtcblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgdXBkYXRpbmcgdGhlIGxvY2F0aW9uIHByb2dyYW1tYXRpY2FsbHlcbiAqIHdpdGggYSBjb21wb25lbnQuXG4gKi9cblxudmFyIFJlZGlyZWN0ID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKFJlZGlyZWN0LCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBSZWRpcmVjdCgpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUmVkaXJlY3QpO1xuXG4gICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH1cblxuICBSZWRpcmVjdC5wcm90b3R5cGUuaXNTdGF0aWMgPSBmdW5jdGlvbiBpc1N0YXRpYygpIHtcbiAgICByZXR1cm4gdGhpcy5jb250ZXh0LnJvdXRlciAmJiB0aGlzLmNvbnRleHQucm91dGVyLnN0YXRpY0NvbnRleHQ7XG4gIH07XG5cbiAgUmVkaXJlY3QucHJvdG90eXBlLmNvbXBvbmVudFdpbGxNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxNb3VudCgpIHtcbiAgICBpbnZhcmlhbnQodGhpcy5jb250ZXh0LnJvdXRlciwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPFJlZGlyZWN0PiBvdXRzaWRlIGEgPFJvdXRlcj5cIik7XG5cbiAgICBpZiAodGhpcy5pc1N0YXRpYygpKSB0aGlzLnBlcmZvcm0oKTtcbiAgfTtcblxuICBSZWRpcmVjdC5wcm90b3R5cGUuY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICBpZiAoIXRoaXMuaXNTdGF0aWMoKSkgdGhpcy5wZXJmb3JtKCk7XG4gIH07XG5cbiAgUmVkaXJlY3QucHJvdG90eXBlLmNvbXBvbmVudERpZFVwZGF0ZSA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZShwcmV2UHJvcHMpIHtcbiAgICB2YXIgcHJldlRvID0gY3JlYXRlTG9jYXRpb24ocHJldlByb3BzLnRvKTtcbiAgICB2YXIgbmV4dFRvID0gY3JlYXRlTG9jYXRpb24odGhpcy5wcm9wcy50byk7XG5cbiAgICBpZiAobG9jYXRpb25zQXJlRXF1YWwocHJldlRvLCBuZXh0VG8pKSB7XG4gICAgICB3YXJuaW5nKGZhbHNlLCBcIllvdSB0cmllZCB0byByZWRpcmVjdCB0byB0aGUgc2FtZSByb3V0ZSB5b3UncmUgY3VycmVudGx5IG9uOiBcIiArIChcIlxcXCJcIiArIG5leHRUby5wYXRobmFtZSArIG5leHRUby5zZWFyY2ggKyBcIlxcXCJcIikpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMucGVyZm9ybSgpO1xuICB9O1xuXG4gIFJlZGlyZWN0LnByb3RvdHlwZS5jb21wdXRlVG8gPSBmdW5jdGlvbiBjb21wdXRlVG8oX3JlZikge1xuICAgIHZhciBjb21wdXRlZE1hdGNoID0gX3JlZi5jb21wdXRlZE1hdGNoLFxuICAgICAgICB0byA9IF9yZWYudG87XG5cbiAgICBpZiAoY29tcHV0ZWRNYXRjaCkge1xuICAgICAgaWYgKHR5cGVvZiB0byA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICByZXR1cm4gZ2VuZXJhdGVQYXRoKHRvLCBjb21wdXRlZE1hdGNoLnBhcmFtcyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gX2V4dGVuZHMoe30sIHRvLCB7XG4gICAgICAgICAgcGF0aG5hbWU6IGdlbmVyYXRlUGF0aCh0by5wYXRobmFtZSwgY29tcHV0ZWRNYXRjaC5wYXJhbXMpXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0bztcbiAgfTtcblxuICBSZWRpcmVjdC5wcm90b3R5cGUucGVyZm9ybSA9IGZ1bmN0aW9uIHBlcmZvcm0oKSB7XG4gICAgdmFyIGhpc3RvcnkgPSB0aGlzLmNvbnRleHQucm91dGVyLmhpc3Rvcnk7XG4gICAgdmFyIHB1c2ggPSB0aGlzLnByb3BzLnB1c2g7XG5cbiAgICB2YXIgdG8gPSB0aGlzLmNvbXB1dGVUbyh0aGlzLnByb3BzKTtcblxuICAgIGlmIChwdXNoKSB7XG4gICAgICBoaXN0b3J5LnB1c2godG8pO1xuICAgIH0gZWxzZSB7XG4gICAgICBoaXN0b3J5LnJlcGxhY2UodG8pO1xuICAgIH1cbiAgfTtcblxuICBSZWRpcmVjdC5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHJldHVybiBudWxsO1xuICB9O1xuXG4gIHJldHVybiBSZWRpcmVjdDtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuUmVkaXJlY3QucHJvcFR5cGVzID0ge1xuICBjb21wdXRlZE1hdGNoOiBQcm9wVHlwZXMub2JqZWN0LCAvLyBwcml2YXRlLCBmcm9tIDxTd2l0Y2g+XG4gIHB1c2g6IFByb3BUeXBlcy5ib29sLFxuICBmcm9tOiBQcm9wVHlwZXMuc3RyaW5nLFxuICB0bzogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLm9iamVjdF0pLmlzUmVxdWlyZWRcbn07XG5SZWRpcmVjdC5kZWZhdWx0UHJvcHMgPSB7XG4gIHB1c2g6IGZhbHNlXG59O1xuUmVkaXJlY3QuY29udGV4dFR5cGVzID0ge1xuICByb3V0ZXI6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgaGlzdG9yeTogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICAgIHB1c2g6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgICByZXBsYWNlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkXG4gICAgfSkuaXNSZXF1aXJlZCxcbiAgICBzdGF0aWNDb250ZXh0OiBQcm9wVHlwZXMub2JqZWN0XG4gIH0pLmlzUmVxdWlyZWRcbn07XG5cblxuZXhwb3J0IGRlZmF1bHQgUmVkaXJlY3Q7IiwiLy8gV3JpdHRlbiBpbiB0aGlzIHJvdW5kIGFib3V0IHdheSBmb3IgYmFiZWwtdHJhbnNmb3JtLWltcG9ydHNcbmltcG9ydCBSZWRpcmVjdCBmcm9tIFwicmVhY3Qtcm91dGVyL2VzL1JlZGlyZWN0XCI7XG5cbmV4cG9ydCBkZWZhdWx0IFJlZGlyZWN0OyIsInZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhvYmosIGtleXMpIHsgdmFyIHRhcmdldCA9IHt9OyBmb3IgKHZhciBpIGluIG9iaikgeyBpZiAoa2V5cy5pbmRleE9mKGkpID49IDApIGNvbnRpbnVlOyBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGkpKSBjb250aW51ZTsgdGFyZ2V0W2ldID0gb2JqW2ldOyB9IHJldHVybiB0YXJnZXQ7IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG5pbXBvcnQgd2FybmluZyBmcm9tIFwid2FybmluZ1wiO1xuaW1wb3J0IGludmFyaWFudCBmcm9tIFwiaW52YXJpYW50XCI7XG5pbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gXCJwcm9wLXR5cGVzXCI7XG5pbXBvcnQgeyBjcmVhdGVMb2NhdGlvbiwgY3JlYXRlUGF0aCB9IGZyb20gXCJoaXN0b3J5XCI7XG5pbXBvcnQgUm91dGVyIGZyb20gXCIuL1JvdXRlclwiO1xuXG52YXIgYWRkTGVhZGluZ1NsYXNoID0gZnVuY3Rpb24gYWRkTGVhZGluZ1NsYXNoKHBhdGgpIHtcbiAgcmV0dXJuIHBhdGguY2hhckF0KDApID09PSBcIi9cIiA/IHBhdGggOiBcIi9cIiArIHBhdGg7XG59O1xuXG52YXIgYWRkQmFzZW5hbWUgPSBmdW5jdGlvbiBhZGRCYXNlbmFtZShiYXNlbmFtZSwgbG9jYXRpb24pIHtcbiAgaWYgKCFiYXNlbmFtZSkgcmV0dXJuIGxvY2F0aW9uO1xuXG4gIHJldHVybiBfZXh0ZW5kcyh7fSwgbG9jYXRpb24sIHtcbiAgICBwYXRobmFtZTogYWRkTGVhZGluZ1NsYXNoKGJhc2VuYW1lKSArIGxvY2F0aW9uLnBhdGhuYW1lXG4gIH0pO1xufTtcblxudmFyIHN0cmlwQmFzZW5hbWUgPSBmdW5jdGlvbiBzdHJpcEJhc2VuYW1lKGJhc2VuYW1lLCBsb2NhdGlvbikge1xuICBpZiAoIWJhc2VuYW1lKSByZXR1cm4gbG9jYXRpb247XG5cbiAgdmFyIGJhc2UgPSBhZGRMZWFkaW5nU2xhc2goYmFzZW5hbWUpO1xuXG4gIGlmIChsb2NhdGlvbi5wYXRobmFtZS5pbmRleE9mKGJhc2UpICE9PSAwKSByZXR1cm4gbG9jYXRpb247XG5cbiAgcmV0dXJuIF9leHRlbmRzKHt9LCBsb2NhdGlvbiwge1xuICAgIHBhdGhuYW1lOiBsb2NhdGlvbi5wYXRobmFtZS5zdWJzdHIoYmFzZS5sZW5ndGgpXG4gIH0pO1xufTtcblxudmFyIGNyZWF0ZVVSTCA9IGZ1bmN0aW9uIGNyZWF0ZVVSTChsb2NhdGlvbikge1xuICByZXR1cm4gdHlwZW9mIGxvY2F0aW9uID09PSBcInN0cmluZ1wiID8gbG9jYXRpb24gOiBjcmVhdGVQYXRoKGxvY2F0aW9uKTtcbn07XG5cbnZhciBzdGF0aWNIYW5kbGVyID0gZnVuY3Rpb24gc3RhdGljSGFuZGxlcihtZXRob2ROYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgaW52YXJpYW50KGZhbHNlLCBcIllvdSBjYW5ub3QgJXMgd2l0aCA8U3RhdGljUm91dGVyPlwiLCBtZXRob2ROYW1lKTtcbiAgfTtcbn07XG5cbnZhciBub29wID0gZnVuY3Rpb24gbm9vcCgpIHt9O1xuXG4vKipcbiAqIFRoZSBwdWJsaWMgdG9wLWxldmVsIEFQSSBmb3IgYSBcInN0YXRpY1wiIDxSb3V0ZXI+LCBzby1jYWxsZWQgYmVjYXVzZSBpdFxuICogY2FuJ3QgYWN0dWFsbHkgY2hhbmdlIHRoZSBjdXJyZW50IGxvY2F0aW9uLiBJbnN0ZWFkLCBpdCBqdXN0IHJlY29yZHNcbiAqIGxvY2F0aW9uIGNoYW5nZXMgaW4gYSBjb250ZXh0IG9iamVjdC4gVXNlZnVsIG1haW5seSBpbiB0ZXN0aW5nIGFuZFxuICogc2VydmVyLXJlbmRlcmluZyBzY2VuYXJpb3MuXG4gKi9cblxudmFyIFN0YXRpY1JvdXRlciA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhTdGF0aWNSb3V0ZXIsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFN0YXRpY1JvdXRlcigpIHtcbiAgICB2YXIgX3RlbXAsIF90aGlzLCBfcmV0O1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFN0YXRpY1JvdXRlcik7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3JldCA9IChfdGVtcCA9IChfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9SZWFjdCRDb21wb25lbnQuY2FsbC5hcHBseShfUmVhY3QkQ29tcG9uZW50LCBbdGhpc10uY29uY2F0KGFyZ3MpKSksIF90aGlzKSwgX3RoaXMuY3JlYXRlSHJlZiA9IGZ1bmN0aW9uIChwYXRoKSB7XG4gICAgICByZXR1cm4gYWRkTGVhZGluZ1NsYXNoKF90aGlzLnByb3BzLmJhc2VuYW1lICsgY3JlYXRlVVJMKHBhdGgpKTtcbiAgICB9LCBfdGhpcy5oYW5kbGVQdXNoID0gZnVuY3Rpb24gKGxvY2F0aW9uKSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgICBiYXNlbmFtZSA9IF90aGlzJHByb3BzLmJhc2VuYW1lLFxuICAgICAgICAgIGNvbnRleHQgPSBfdGhpcyRwcm9wcy5jb250ZXh0O1xuXG4gICAgICBjb250ZXh0LmFjdGlvbiA9IFwiUFVTSFwiO1xuICAgICAgY29udGV4dC5sb2NhdGlvbiA9IGFkZEJhc2VuYW1lKGJhc2VuYW1lLCBjcmVhdGVMb2NhdGlvbihsb2NhdGlvbikpO1xuICAgICAgY29udGV4dC51cmwgPSBjcmVhdGVVUkwoY29udGV4dC5sb2NhdGlvbik7XG4gICAgfSwgX3RoaXMuaGFuZGxlUmVwbGFjZSA9IGZ1bmN0aW9uIChsb2NhdGlvbikge1xuICAgICAgdmFyIF90aGlzJHByb3BzMiA9IF90aGlzLnByb3BzLFxuICAgICAgICAgIGJhc2VuYW1lID0gX3RoaXMkcHJvcHMyLmJhc2VuYW1lLFxuICAgICAgICAgIGNvbnRleHQgPSBfdGhpcyRwcm9wczIuY29udGV4dDtcblxuICAgICAgY29udGV4dC5hY3Rpb24gPSBcIlJFUExBQ0VcIjtcbiAgICAgIGNvbnRleHQubG9jYXRpb24gPSBhZGRCYXNlbmFtZShiYXNlbmFtZSwgY3JlYXRlTG9jYXRpb24obG9jYXRpb24pKTtcbiAgICAgIGNvbnRleHQudXJsID0gY3JlYXRlVVJMKGNvbnRleHQubG9jYXRpb24pO1xuICAgIH0sIF90aGlzLmhhbmRsZUxpc3RlbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBub29wO1xuICAgIH0sIF90aGlzLmhhbmRsZUJsb2NrID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIG5vb3A7XG4gICAgfSwgX3RlbXApLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihfdGhpcywgX3JldCk7XG4gIH1cblxuICBTdGF0aWNSb3V0ZXIucHJvdG90eXBlLmdldENoaWxkQ29udGV4dCA9IGZ1bmN0aW9uIGdldENoaWxkQ29udGV4dCgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgcm91dGVyOiB7XG4gICAgICAgIHN0YXRpY0NvbnRleHQ6IHRoaXMucHJvcHMuY29udGV4dFxuICAgICAgfVxuICAgIH07XG4gIH07XG5cbiAgU3RhdGljUm91dGVyLnByb3RvdHlwZS5jb21wb25lbnRXaWxsTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsTW91bnQoKSB7XG4gICAgd2FybmluZyghdGhpcy5wcm9wcy5oaXN0b3J5LCBcIjxTdGF0aWNSb3V0ZXI+IGlnbm9yZXMgdGhlIGhpc3RvcnkgcHJvcC4gVG8gdXNlIGEgY3VzdG9tIGhpc3RvcnksIFwiICsgXCJ1c2UgYGltcG9ydCB7IFJvdXRlciB9YCBpbnN0ZWFkIG9mIGBpbXBvcnQgeyBTdGF0aWNSb3V0ZXIgYXMgUm91dGVyIH1gLlwiKTtcbiAgfTtcblxuICBTdGF0aWNSb3V0ZXIucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgYmFzZW5hbWUgPSBfcHJvcHMuYmFzZW5hbWUsXG4gICAgICAgIGNvbnRleHQgPSBfcHJvcHMuY29udGV4dCxcbiAgICAgICAgbG9jYXRpb24gPSBfcHJvcHMubG9jYXRpb24sXG4gICAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9wcm9wcywgW1wiYmFzZW5hbWVcIiwgXCJjb250ZXh0XCIsIFwibG9jYXRpb25cIl0pO1xuXG4gICAgdmFyIGhpc3RvcnkgPSB7XG4gICAgICBjcmVhdGVIcmVmOiB0aGlzLmNyZWF0ZUhyZWYsXG4gICAgICBhY3Rpb246IFwiUE9QXCIsXG4gICAgICBsb2NhdGlvbjogc3RyaXBCYXNlbmFtZShiYXNlbmFtZSwgY3JlYXRlTG9jYXRpb24obG9jYXRpb24pKSxcbiAgICAgIHB1c2g6IHRoaXMuaGFuZGxlUHVzaCxcbiAgICAgIHJlcGxhY2U6IHRoaXMuaGFuZGxlUmVwbGFjZSxcbiAgICAgIGdvOiBzdGF0aWNIYW5kbGVyKFwiZ29cIiksXG4gICAgICBnb0JhY2s6IHN0YXRpY0hhbmRsZXIoXCJnb0JhY2tcIiksXG4gICAgICBnb0ZvcndhcmQ6IHN0YXRpY0hhbmRsZXIoXCJnb0ZvcndhcmRcIiksXG4gICAgICBsaXN0ZW46IHRoaXMuaGFuZGxlTGlzdGVuLFxuICAgICAgYmxvY2s6IHRoaXMuaGFuZGxlQmxvY2tcbiAgICB9O1xuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoUm91dGVyLCBfZXh0ZW5kcyh7fSwgcHJvcHMsIHsgaGlzdG9yeTogaGlzdG9yeSB9KSk7XG4gIH07XG5cbiAgcmV0dXJuIFN0YXRpY1JvdXRlcjtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuU3RhdGljUm91dGVyLnByb3BUeXBlcyA9IHtcbiAgYmFzZW5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIGNvbnRleHQ6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcbiAgbG9jYXRpb246IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5vYmplY3RdKVxufTtcblN0YXRpY1JvdXRlci5kZWZhdWx0UHJvcHMgPSB7XG4gIGJhc2VuYW1lOiBcIlwiLFxuICBsb2NhdGlvbjogXCIvXCJcbn07XG5TdGF0aWNSb3V0ZXIuY2hpbGRDb250ZXh0VHlwZXMgPSB7XG4gIHJvdXRlcjogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkXG59O1xuXG5cbmV4cG9ydCBkZWZhdWx0IFN0YXRpY1JvdXRlcjsiLCIvLyBXcml0dGVuIGluIHRoaXMgcm91bmQgYWJvdXQgd2F5IGZvciBiYWJlbC10cmFuc2Zvcm0taW1wb3J0c1xuaW1wb3J0IFN0YXRpY1JvdXRlciBmcm9tIFwicmVhY3Qtcm91dGVyL2VzL1N0YXRpY1JvdXRlclwiO1xuXG5leHBvcnQgZGVmYXVsdCBTdGF0aWNSb3V0ZXI7IiwiLy8gV3JpdHRlbiBpbiB0aGlzIHJvdW5kIGFib3V0IHdheSBmb3IgYmFiZWwtdHJhbnNmb3JtLWltcG9ydHNcbmltcG9ydCBnZW5lcmF0ZVBhdGggZnJvbSBcInJlYWN0LXJvdXRlci9lcy9nZW5lcmF0ZVBhdGhcIjtcblxuZXhwb3J0IGRlZmF1bHQgZ2VuZXJhdGVQYXRoOyIsIi8vIFdyaXR0ZW4gaW4gdGhpcyByb3VuZCBhYm91dCB3YXkgZm9yIGJhYmVsLXRyYW5zZm9ybS1pbXBvcnRzXG5pbXBvcnQgbWF0Y2hQYXRoIGZyb20gXCJyZWFjdC1yb3V0ZXIvZXMvbWF0Y2hQYXRoXCI7XG5cbmV4cG9ydCBkZWZhdWx0IG1hdGNoUGF0aDsiLCJ2YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMob2JqLCBrZXlzKSB7IHZhciB0YXJnZXQgPSB7fTsgZm9yICh2YXIgaSBpbiBvYmopIHsgaWYgKGtleXMuaW5kZXhPZihpKSA+PSAwKSBjb250aW51ZTsgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBpKSkgY29udGludWU7IHRhcmdldFtpXSA9IG9ialtpXTsgfSByZXR1cm4gdGFyZ2V0OyB9XG5cbmltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSBcInByb3AtdHlwZXNcIjtcbmltcG9ydCBob2lzdFN0YXRpY3MgZnJvbSBcImhvaXN0LW5vbi1yZWFjdC1zdGF0aWNzXCI7XG5pbXBvcnQgUm91dGUgZnJvbSBcIi4vUm91dGVcIjtcblxuLyoqXG4gKiBBIHB1YmxpYyBoaWdoZXItb3JkZXIgY29tcG9uZW50IHRvIGFjY2VzcyB0aGUgaW1wZXJhdGl2ZSBBUElcbiAqL1xudmFyIHdpdGhSb3V0ZXIgPSBmdW5jdGlvbiB3aXRoUm91dGVyKENvbXBvbmVudCkge1xuICB2YXIgQyA9IGZ1bmN0aW9uIEMocHJvcHMpIHtcbiAgICB2YXIgd3JhcHBlZENvbXBvbmVudFJlZiA9IHByb3BzLndyYXBwZWRDb21wb25lbnRSZWYsXG4gICAgICAgIHJlbWFpbmluZ1Byb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJ3cmFwcGVkQ29tcG9uZW50UmVmXCJdKTtcblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFJvdXRlLCB7XG4gICAgICBjaGlsZHJlbjogZnVuY3Rpb24gY2hpbGRyZW4ocm91dGVDb21wb25lbnRQcm9wcykge1xuICAgICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChDb21wb25lbnQsIF9leHRlbmRzKHt9LCByZW1haW5pbmdQcm9wcywgcm91dGVDb21wb25lbnRQcm9wcywge1xuICAgICAgICAgIHJlZjogd3JhcHBlZENvbXBvbmVudFJlZlxuICAgICAgICB9KSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgQy5kaXNwbGF5TmFtZSA9IFwid2l0aFJvdXRlcihcIiArIChDb21wb25lbnQuZGlzcGxheU5hbWUgfHwgQ29tcG9uZW50Lm5hbWUpICsgXCIpXCI7XG4gIEMuV3JhcHBlZENvbXBvbmVudCA9IENvbXBvbmVudDtcbiAgQy5wcm9wVHlwZXMgPSB7XG4gICAgd3JhcHBlZENvbXBvbmVudFJlZjogUHJvcFR5cGVzLmZ1bmNcbiAgfTtcblxuICByZXR1cm4gaG9pc3RTdGF0aWNzKEMsIENvbXBvbmVudCk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCB3aXRoUm91dGVyOyIsIi8vIFdyaXR0ZW4gaW4gdGhpcyByb3VuZCBhYm91dCB3YXkgZm9yIGJhYmVsLXRyYW5zZm9ybS1pbXBvcnRzXG5pbXBvcnQgd2l0aFJvdXRlciBmcm9tIFwicmVhY3Qtcm91dGVyL2VzL3dpdGhSb3V0ZXJcIjtcblxuZXhwb3J0IGRlZmF1bHQgd2l0aFJvdXRlcjsiLCJpbXBvcnQgX0Jyb3dzZXJSb3V0ZXIgZnJvbSBcIi4vQnJvd3NlclJvdXRlclwiO1xuZXhwb3J0IHsgX0Jyb3dzZXJSb3V0ZXIgYXMgQnJvd3NlclJvdXRlciB9O1xuaW1wb3J0IF9IYXNoUm91dGVyIGZyb20gXCIuL0hhc2hSb3V0ZXJcIjtcbmV4cG9ydCB7IF9IYXNoUm91dGVyIGFzIEhhc2hSb3V0ZXIgfTtcbmltcG9ydCBfTGluayBmcm9tIFwiLi9MaW5rXCI7XG5leHBvcnQgeyBfTGluayBhcyBMaW5rIH07XG5pbXBvcnQgX01lbW9yeVJvdXRlciBmcm9tIFwiLi9NZW1vcnlSb3V0ZXJcIjtcbmV4cG9ydCB7IF9NZW1vcnlSb3V0ZXIgYXMgTWVtb3J5Um91dGVyIH07XG5pbXBvcnQgX05hdkxpbmsgZnJvbSBcIi4vTmF2TGlua1wiO1xuZXhwb3J0IHsgX05hdkxpbmsgYXMgTmF2TGluayB9O1xuaW1wb3J0IF9Qcm9tcHQgZnJvbSBcIi4vUHJvbXB0XCI7XG5leHBvcnQgeyBfUHJvbXB0IGFzIFByb21wdCB9O1xuaW1wb3J0IF9SZWRpcmVjdCBmcm9tIFwiLi9SZWRpcmVjdFwiO1xuZXhwb3J0IHsgX1JlZGlyZWN0IGFzIFJlZGlyZWN0IH07XG5pbXBvcnQgX1JvdXRlIGZyb20gXCIuL1JvdXRlXCI7XG5leHBvcnQgeyBfUm91dGUgYXMgUm91dGUgfTtcbmltcG9ydCBfUm91dGVyIGZyb20gXCIuL1JvdXRlclwiO1xuZXhwb3J0IHsgX1JvdXRlciBhcyBSb3V0ZXIgfTtcbmltcG9ydCBfU3RhdGljUm91dGVyIGZyb20gXCIuL1N0YXRpY1JvdXRlclwiO1xuZXhwb3J0IHsgX1N0YXRpY1JvdXRlciBhcyBTdGF0aWNSb3V0ZXIgfTtcbmltcG9ydCBfU3dpdGNoIGZyb20gXCIuL1N3aXRjaFwiO1xuZXhwb3J0IHsgX1N3aXRjaCBhcyBTd2l0Y2ggfTtcbmltcG9ydCBfZ2VuZXJhdGVQYXRoIGZyb20gXCIuL2dlbmVyYXRlUGF0aFwiO1xuZXhwb3J0IHsgX2dlbmVyYXRlUGF0aCBhcyBnZW5lcmF0ZVBhdGggfTtcbmltcG9ydCBfbWF0Y2hQYXRoIGZyb20gXCIuL21hdGNoUGF0aFwiO1xuZXhwb3J0IHsgX21hdGNoUGF0aCBhcyBtYXRjaFBhdGggfTtcbmltcG9ydCBfd2l0aFJvdXRlciBmcm9tIFwiLi93aXRoUm91dGVyXCI7XG5leHBvcnQgeyBfd2l0aFJvdXRlciBhcyB3aXRoUm91dGVyIH07IiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIENvcHlyaWdodCAyMDE1LCBZYWhvbyEgSW5jLlxuICogQ29weXJpZ2h0cyBsaWNlbnNlZCB1bmRlciB0aGUgTmV3IEJTRCBMaWNlbnNlLiBTZWUgdGhlIGFjY29tcGFueWluZyBMSUNFTlNFIGZpbGUgZm9yIHRlcm1zLlxuICovXG52YXIgUkVBQ1RfU1RBVElDUyA9IHtcbiAgICBjaGlsZENvbnRleHRUeXBlczogdHJ1ZSxcbiAgICBjb250ZXh0VHlwZXM6IHRydWUsXG4gICAgZGVmYXVsdFByb3BzOiB0cnVlLFxuICAgIGRpc3BsYXlOYW1lOiB0cnVlLFxuICAgIGdldERlZmF1bHRQcm9wczogdHJ1ZSxcbiAgICBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM6IHRydWUsXG4gICAgbWl4aW5zOiB0cnVlLFxuICAgIHByb3BUeXBlczogdHJ1ZSxcbiAgICB0eXBlOiB0cnVlXG59O1xuXG52YXIgS05PV05fU1RBVElDUyA9IHtcbiAgICBuYW1lOiB0cnVlLFxuICAgIGxlbmd0aDogdHJ1ZSxcbiAgICBwcm90b3R5cGU6IHRydWUsXG4gICAgY2FsbGVyOiB0cnVlLFxuICAgIGNhbGxlZTogdHJ1ZSxcbiAgICBhcmd1bWVudHM6IHRydWUsXG4gICAgYXJpdHk6IHRydWVcbn07XG5cbnZhciBkZWZpbmVQcm9wZXJ0eSA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBnZXRPd25Qcm9wZXJ0eU5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM7XG52YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xudmFyIGdldFByb3RvdHlwZU9mID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xudmFyIG9iamVjdFByb3RvdHlwZSA9IGdldFByb3RvdHlwZU9mICYmIGdldFByb3RvdHlwZU9mKE9iamVjdCk7XG5cbmZ1bmN0aW9uIGhvaXN0Tm9uUmVhY3RTdGF0aWNzKHRhcmdldENvbXBvbmVudCwgc291cmNlQ29tcG9uZW50LCBibGFja2xpc3QpIHtcbiAgICBpZiAodHlwZW9mIHNvdXJjZUNvbXBvbmVudCAhPT0gJ3N0cmluZycpIHsgLy8gZG9uJ3QgaG9pc3Qgb3ZlciBzdHJpbmcgKGh0bWwpIGNvbXBvbmVudHNcblxuICAgICAgICBpZiAob2JqZWN0UHJvdG90eXBlKSB7XG4gICAgICAgICAgICB2YXIgaW5oZXJpdGVkQ29tcG9uZW50ID0gZ2V0UHJvdG90eXBlT2Yoc291cmNlQ29tcG9uZW50KTtcbiAgICAgICAgICAgIGlmIChpbmhlcml0ZWRDb21wb25lbnQgJiYgaW5oZXJpdGVkQ29tcG9uZW50ICE9PSBvYmplY3RQcm90b3R5cGUpIHtcbiAgICAgICAgICAgICAgICBob2lzdE5vblJlYWN0U3RhdGljcyh0YXJnZXRDb21wb25lbnQsIGluaGVyaXRlZENvbXBvbmVudCwgYmxhY2tsaXN0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBrZXlzID0gZ2V0T3duUHJvcGVydHlOYW1lcyhzb3VyY2VDb21wb25lbnQpO1xuXG4gICAgICAgIGlmIChnZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcbiAgICAgICAgICAgIGtleXMgPSBrZXlzLmNvbmNhdChnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoc291cmNlQ29tcG9uZW50KSk7XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIHZhciBrZXkgPSBrZXlzW2ldO1xuICAgICAgICAgICAgaWYgKCFSRUFDVF9TVEFUSUNTW2tleV0gJiYgIUtOT1dOX1NUQVRJQ1Nba2V5XSAmJiAoIWJsYWNrbGlzdCB8fCAhYmxhY2tsaXN0W2tleV0pKSB7XG4gICAgICAgICAgICAgICAgdmFyIGRlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlQ29tcG9uZW50LCBrZXkpO1xuICAgICAgICAgICAgICAgIHRyeSB7IC8vIEF2b2lkIGZhaWx1cmVzIGZyb20gcmVhZC1vbmx5IHByb3BlcnRpZXNcbiAgICAgICAgICAgICAgICAgICAgZGVmaW5lUHJvcGVydHkodGFyZ2V0Q29tcG9uZW50LCBrZXksIGRlc2NyaXB0b3IpO1xuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGFyZ2V0Q29tcG9uZW50O1xuICAgIH1cblxuICAgIHJldHVybiB0YXJnZXRDb21wb25lbnQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaG9pc3ROb25SZWFjdFN0YXRpY3M7XG4iXSwic291cmNlUm9vdCI6IiJ9